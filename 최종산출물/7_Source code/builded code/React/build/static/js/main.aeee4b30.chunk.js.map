{"version":3,"sources":["History.js","PrivateRoute.jsx","authentication.js","setting.js","components/Login.js","components/Register.js","components/LoginAndRegister.js","components/Header.js","components/MenuBar.js","components/ChemicalInfo.js","components/StockButtons.js","components/SelectInventory.js","components/StockInventoryChangeButton.js","components/StockInfo.js","components/Stock.js","components/ChemicalAdd.js","components/InventoryAdd.js","components/MenuTitle.js","components/MyLab.js","components/ApparatusReservation.js","components/Apparatus.js","components/StockInfoAlarm.js","components/AlarmInfo1.js","components/AlarmInfoList.js","components/Alarm.js","components/MyGroupGenerate.js","components/MyGroupInvite.js","components/MyGroupRegister.js","components/MyGroupWithdraw.js","components/Member.js","components/MyGroupMember.js","components/NoGroup.js","components/MyGroup.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","PrivateRoute","_ref","Component","component","rest","Object","objectWithoutProperties","react_default","a","createElement","react_router","assign","render","props","localStorage","getItem","to","pathname","state","from","location","login","user","lab","setItem","JSON","stringify","getUser","parse","e","logout","removeItem","getLab","serverUrl","Login","handleSubmit","preventDefault","_this","form","validateFields","err","values","console","log","fetch","method","headers","Content-Type","body","then","response","status","json","message","success","name","push","error","getFieldDecorator","this","es_form","onSubmit","className","Item","rules","required","input","prefix","icon","type","style","color","placeholder","es_button","htmlType","react_router_dom","Form","create","Register","registInformation","email","username","password","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","hasFeedback","validator","Password","onBlur","handleConfirmBlur","LoginAndRegister","marginTop","id","margin","path","exact","excat","Header","logOut","toHome","height","display","background","textAlign","defineProperty","width","verticalAlign","fontSize","fontFamily","textShadow","marginLeft","float","margihTop","marginRight","onClick","shape","MenuBar","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","href","row","col","span","theme","ChemicalInfo","key","getBooleanToString","TabPane","Tabs","chemical","tabs","defaultActiveKey","onChange","tab","descriptions","bordered","size","label","casNo","formula","molecularWeight","meltingPoint","boilingPoint","ph","density","deliquescent","efflorescence","photoReaction","flammability","ignitability","explosive","Option","Select","PriceInput","handleNumberChange","number","parseFloat","toFixed","isNaN","setState","triggerChange","handleUnitChange","unit","changedValue","objectSpread","nextProps","_this$state","react","input_number","es_select","React","StockButtons","_this2","change","stock","remainingVolume","changeVolume","checkNumber","clickDeleteButton","deleteStock","layout","initialValue","StockButtons_PriceInput","showInventoryChangeButton","Modal","confirm","SelectInventory","handleChange","selectedInventory","url","crash","crashWith","selectInventory","cancle","defaultValue","suggest","map","inventory","SelectInventory_Option","notSuggest","popconfirm","title","nickname","onConfirm","onCancel","cancel","okText","cancelText","StockInventoryChangeButton","components_SelectInventory","changeInventory","blindInventoryChangeButton","StockInfo","Typography","Title","showStockInventoryChangeButton","notSugget","newInventoryId","date","year","monthValue","dayOfMonth","components_ChemicalInfo","marginBottom","getDateToString","putDate","expireDate","volume","Math","floor","components_StockButtons","components_StockInventoryChangeButton","Stock","showModal","chemicalInfoVisible","handleOk","toLowerCase","iconType","match","Button","modal","visible","onOk","components_StockInfo","Search","Input","ChemicalAdd","expire","nicknameCheck","handleCancel","nickNameChange","target","setExpire","search","chemicalName","replace","getInventorySuggestList","length","warning","resetState","checkExpire","dateInt","parseInt","substring","month","day","realDate","Date","setFullYear","setMonth","setDate","inventoryId","gram","finish","i","addChemical","nicknameUrl","enterButton","onSearch","ChemicalAdd_Option","InventoryAdd","temperature","humidity","illuminance","oximeter","explosion","plainOptions","nameChange","temperatureChange","humidityChange","checkedValues","some","x","illuminane","submit","addInventory","es_radio","Group","es_checkbox","options","MenuTitle","borderColor","MenuTitle_Title","MyLab","getInventories","inventories","inventoryName","isInventoryExist","handleInventoryChange","forEach","stockId","makeVolumeAlarm","put","stocks","successMessage","components_MenuTitle","paddingTop","components_InventoryAdd","es_list","grid","gutter","column","dataSource","filter","renderItem","components_Stock","components_ChemicalAdd","ApparatusReservation","handleSubmit2","startTime","endTime","newday","todayDate","yy","getFullYear","mm","getMonth","dd","getDate","newdayInfo","reservationList","duplicated","sh","hour","sm","minute","eh","em","reservStart","reservEnd","past","now","getHours","getMinutes","undefined","apparatusId","plusReservation","schedules","Apparatus","showModal_0","visible_0","handleOk_0","handleRemove_2","handleCancel_0","showModal_1","visible_1","handleOk_1","handleCancel_1","newList","apparatusList","apparatus","list","realReservationList","makeDataSource","handleOk_2","showModal_2","visible_2","handleCancel_2","showModal_3","visible_3","handleOk_3","handleRemove","handleCancel_3","getUrl","goToLeft","menu","goToRight","deleteReservation","event","param","dataset","toDelete","newArray","splice","reservationDataSource","deleteButton","startHour","startMinute","endHour","endMinute","reserver","result","h","m","checker","oneBlock","time","reservation","m2","checker2","j","checker3","checkReservationDate","data-param","makeMonth","makeDate","getApparNameNow","one","realToday","nowMonth","nowDate","isPast","clickApparatus","today","todayInfo","params","visible_4","visible_5","format","columns","dataIndex","align","ellipsis","apparatuses","thisApparatus","newProps","_this3","_this4","item","ghost","fontWeight","card","table","tableLayout","locale","emptyText","scroll","y","pagination","pageSize","components_ApparatusReservation","sytle","AlarmInfo","_this$props","info","onRemove","alarmType","deleteFetch","getMessage","_this$props2","StockInfoAlarm","stockInfo","place","period","AlarmInfoList","itemLayout","data","AlarmInfo1","defaultProps","warn","Alarm","information","alarm1Count","alarm2Count","alarm3Count","type1Count","type2Count","type3Count","new_information","makeTypeOne","makeTypeTwo","makeTypeThree","function","getContent","components_AlarmInfoList","alarms","Qinformation","left","badge","count","MyGroupGenerate","groupName","groupPassword","afterGroupGenerate","MyGroupInvite","searchMember","userId","member","labId","MyGroupInvite_Title","font","MyGroupRegister","MyGroupWithdraw","Text","withdrawGroup","afterGroupWithdraw","MyGroupWithdraw_Title","Member","twoToneColor","members","MyGroupMember","components_Member","MyGroup","getGroupMembers","get","labexists","firstButtonClick","firstButtonClick2","secondButtonClick","thirdButtonClick","thirdButtonClick2","fourthButtonClick","enrollLab","withdrawLab","components_MyGroupInvite","components_MyGroupWithdraw","components_MyGroupMember","NoGroup","components_MyGroupRegister","components_MyGroupGenerate","Main","updateWindowDimensions","bind","assertThisInitialized","addEventListener","removeEventListener","innerWidth","innerHeight","heights","header","menubar","src_components_Header","overflowX","borderTop","borderBottom","components_MenuBar","App","PrivateRoute_PrivateRoute","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aeee4b30.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      localStorage.getItem('user') ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect\r\n          to={{ pathname: '/login', state: { from: props.location } }}\r\n        />\r\n      )\r\n    }\r\n  />\r\n)\r\n","export const login = ({ user, lab }) => {\n    localStorage.setItem('user', JSON.stringify(user))\n    localStorage.setItem('lab', JSON.stringify(lab))\n}\n\nexport const getUser = () => {\n    const user = localStorage.getItem('user')\n    try {\n        return JSON.parse(user)\n    } catch (e) {\n        return null\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('user')\n    localStorage.removeItem('lab')\n}\n\nexport const getLab = () => {\n    const lab = localStorage.getItem('lab')\n    try { \n        return JSON.parse(lab)\n    } catch (e) {\n        return null\n    }\n}","export const serverUrl = 'http://13.124.122.246:8080'\n","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nimport { history } from '../History';\nimport { login } from '../authentication';\nimport { serverUrl } from '../setting'\n\nclass Login extends Component {\n\n    //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n                //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n                console.log(values)\n                fetch(serverUrl + '/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(values)\n                })\n                    .then(response => {\n                        const result = response.status;\n                        if (result === 200) {\n                            //로그인이 성공하였을 경우\n                            response.json().then(response => {\n                                //로컬스토리지에 토큰 및 로그인 정보 저장\n                                login(response)\n                                console.log(response)\n                                message.success(response.user.name + '님 환영합니다!');\n                                history.push(\"/mylab\")\n                            })\n                        } else {\n                            //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n                            message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n                            console.log(\"fail!\")\n                        }\n                    })\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"form\">\n                {/* 이메일 폼*/}\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: '이메일을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호 폼*/}\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: '비밀번호를 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호 잃어버림, 로그인, 가입 버튼*/}\n                <Form.Item>\n                    {/*<Link to='/login/forgot' className=\"login-form-forgot\">Forgot password</Link>*/}\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                        Log in\n                    </Button>\n                    Or <Link to=\"/register\">register now!</Link>\n                </Form.Item>\n\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(Login);\n","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting'\n\nclass Register extends Component {\n\n    //회원가입 버튼 클릭했을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //회원 가입 정보\n                const registInformation = {\n                    email : values.email,\n                    name : values.username,\n                    password : values.password,\n                }\n                //http요청\n                fetch(serverUrl + '/regist', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(registInformation)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //가입이 성공적으로 수행 되었을 경우\n                        message.success('회원이 되신 것을 환영합니다!');\n                        history.push(\"/login\")\n                    } else {\n                        //요청 오류 발생\n                        message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n                    }\n                })\n            } else {\n                //비밀번호 틀렸을 경우 \n                message.error('두 비밀번호가 같은지 확인 해 주세요!');\n            }\n        });\n    };\n\n    //비밀번호 두개 일치하는지 확인\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('두 비밀번호가 일치하지 않습니다!');\n        } else {\n            callback();\n        }\n    };\n\n    //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        form.validateFields(['confirm'], { force: true });\n        callback();\n    };\n\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"form\">\n\n                {/* 이메일 */}\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: '이메일 주소를 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email Address\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 이름 */}\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: '이름을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호1 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Password\" />)}\n                </Form.Item>\n\n                {/* 비밀번호2 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 다시 한번 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Confirm password\"\n                        onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n\n                {/* 회원가입 버튼 */}\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                        Register Now!\n                    </Button>\n                    Or <Link to=\"/login\">login now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(Register);\n","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Login from './Login';\nimport Register from './Register';\nimport './LoginAndRegister.css';\n\nclass LoginAndRegister extends Component {\n\n    render() {\n        return (\n            <div style= {{marginTop: 150}}>\n                <div className='login' >\n                    <h1 id='loginHeadline' style={{color : '#5BC7AE'}}>SYLVY</h1>\n                    <div style={{ margin: '10px 0' }}>\n                        <Switch >\n                            <Route path='/login' exact component={Login} />\n                            <Route path='/register' excat component={Register} />\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LoginAndRegister;","import React, { Component } from 'react';\nimport { Button, Table } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport { logout, getUser } from '../authentication';\n\nimport './Header.css';\nimport './Box.css';\nimport { blockStatement } from '@babel/types';\n\nclass Header extends Component {\n\n    state = {\n        user: {}\n    }\n    //로그아웃\n    logOut = () => {\n        logout()\n        history.push('/login')\n    }\n\n    toHome = () => {\n        history.push('/')\n    }\n\n    render() {\n        /**\n         *     line-height: 60px;\n    display: block;\n    text-align: left;\n    background: #2DB400;\n    padding-left : 30px;\n    padding-right : 30px;\n    color: white;\n\n         */\n\n\n        return (\n            <div style={{\n                height: this.props.height, display: 'block', background: '#4B589F', textAlign: 'left',\n                 display: 'table', width: this.props.width, padding: 10, paddingLeft: 20, borderColor : '#4B589F'\n            }}>\n                <div style={{ display: 'table-cell', verticalAlign: 'middle' }}>\n                    {/* 로고 텍스트 ( 클릭하면 메인으로 이동) */}\n                    <div style={{display: 'inline', textAlign: 'left' }}>\n                        <b style={{ fontSize: 20, fontFamily: 'Comic Sans MS', textShadow:' 1px 1px 1px darkgray' }}><Link to='/mylab' id='color'>SYLVY</Link></b>\n                    </div>\n\n                    {/* 로그인된 사용자 */}\n                    <div style={{display: 'inline', textAlign : 'middle', marginLeft : 20, color : 'white'}}>\n                        \" {getUser().name}님 환영합니다! \"\n                    </div>\n\n                    {/* 로그인 정보 + 프로필 변경 + 로그아웃 버튼 */}\n                    <div style={{display: 'inline', float : 'right', margihTop: 30, marginRight : 10 }}>\n                        {/* 로그아웃 버튼 */}\n                        <Button type=\"danger\" icon=\"poweroff\" onClick={this.logOut} shape=\"circle\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Row, Col, Icon } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nclass MenuBar extends Component {\n\n    constructor(props){\n        super(props)\n        console.log(window.location.href)\n    }\n\n\n    render() {\n        //const currentUrl = this.props.location.pathname\n\n        return (\n            <div>\n                <Row>\n                    <Col span={6}>\n                        <Link to=\"/mylab\">\n                            <center >\n                                <span style={{ color: 'white' }}>\n                                    <Icon type=\"experiment\" theme=\"filled\" style={{ fontSize: '32px'}} /><br />\n                                    Chemicals\n                                </span>\n                            </center>\n                        </Link>\n                    </Col>\n\n                    <Col span={6}>\n                        <Link to=\"/apparatus/0\">\n                            <center>\n                                <span style={{ color: 'white' }}>\n                                    <Icon type=\"hdd\" theme=\"filled\" style={{ fontSize: '32px' }} /><br />\n                                    Apparatus\n                                    </span>\n                            </center>\n                        </Link>\n                    </Col>\n\n                    <Col span={6}>\n                        <Link to=\"/alarm\">\n                            <center>\n                                <span style={{ color: 'white' }}>\n                                    <Icon type=\"bell\" theme=\"filled\" style={{ fontSize: '32px' }} /><br />\n                                    Alarm\n                                    </span>\n                            </center>\n\n                        </Link>\n                    </Col>\n\n                    <Col span={6}>\n                        <Link to=\"/mygroup\">\n                            <center>\n                                <span style={{ color: 'white' }}>\n                                    <Icon type=\"team\" style={{ fontSize: '32px' }} /><br />\n                                    my Lab\n                                    </span>\n                            </center>\n\n                        </Link>\n                    </Col>\n\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default MenuBar;","import React, { Component } from 'react';\n\nimport { Tabs, Descriptions } from 'antd';\n\n\nclass ChemicalInfo extends Component {\n    \n\n    callback = (key) => {\n        console.log(key);\n    }\n\n    getBooleanToString = (value) => {\n        if (value===true){\n            return \"true\";\n        } else {\n            return \"false\"\n        }\n    }\n\n    render() {\n        const { TabPane } = Tabs;\n        const {chemical} = this.props;\n\n        return (\n            <div >\n                <Tabs defaultActiveKey=\"1\" onChange={this.callback}>\n                    <TabPane tab=\"특성 1\" key=\"1\">\n                        <Descriptions bordered=\"true\" size=\"small\">\n                            <Descriptions.Item label=\"Name\">{chemical.name}</Descriptions.Item>\n                            <Descriptions.Item label=\"CAS No.\">{chemical.casNo}</Descriptions.Item>\n                            <Descriptions.Item label=\"Formula\">{chemical.formula}</Descriptions.Item>\n                            <Descriptions.Item label=\"MW\">{chemical.molecularWeight}</Descriptions.Item>\n                            <Descriptions.Item label=\"status\">{chemical.status}</Descriptions.Item>\n                        </Descriptions>\n                    </TabPane>\n                    <TabPane tab=\"특성 2\" key=\"2\">\n                        <Descriptions bordered=\"true\" size=\"small\">\n                            <Descriptions.Item label=\"mp/bp\">{chemical.meltingPoint} / {chemical.boilingPoint}</Descriptions.Item>\n                            <Descriptions.Item label=\"pH\">{chemical.ph}</Descriptions.Item>\n                            <Descriptions.Item label=\"density\">{chemical.density}</Descriptions.Item>\n                            <Descriptions.Item label=\"deliquescent\">{this.getBooleanToString(chemical.deliquescent)}</Descriptions.Item>\n                            <Descriptions.Item label=\"efflorescence\">{this.getBooleanToString(chemical.efflorescence)}</Descriptions.Item>\n                        </Descriptions>\n                    </TabPane>\n                    <TabPane tab=\"특성 3\" key=\"3\">\n                        <Descriptions bordered=\"true\" size=\"small\">\n                            <Descriptions.Item label=\"photoReaction\">{this.getBooleanToString(chemical.photoReaction)}</Descriptions.Item>\n                            <Descriptions.Item label=\"flammability\">{this.getBooleanToString(chemical.flammability)}</Descriptions.Item>\n                            <Descriptions.Item label=\"ignitability\">{this.getBooleanToString(chemical.ignitability)}</Descriptions.Item>\n                            <Descriptions.Item label=\"explosive\">{this.getBooleanToString(chemical.explosive)}</Descriptions.Item>\n                        </Descriptions>\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default ChemicalInfo;","import React, { Component, Fragment } from 'react';\n\nimport { Form, Input, Select, Button, message, InputNumber } from 'antd';\n\nconst { Option } = Select;\n\nclass PriceInput extends React.Component {\n    static getDerivedStateFromProps(nextProps) {\n        // Should be a controlled component.\n        if ('value' in nextProps) {\n            return {\n                ...(nextProps.value || {}),\n            };\n        }\n        return null;\n    }\n\n    constructor(props) {\n        super(props);\n\n        const value = props.value || {};\n        this.state = {\n            number: value.number || 0,\n            unit: value.unit || 'g',\n        };\n    }\n\n    handleNumberChange = e => {\n        //const number = parseInt(e.target.value || 0, 10);\n        const number = parseFloat(e).toFixed(2)\n        if (isNaN(number)) {\n            return;\n        }\n        if (!('value' in this.props)) {\n            this.setState({ number });\n        }\n        this.triggerChange({ number });\n    };\n\n    handleUnitChange = unit => {\n        if (!('value' in this.props)) {\n            this.setState({ unit });\n        }\n        this.triggerChange({ unit });\n    };\n\n    triggerChange = changedValue => {\n        // Should provide an event to pass value to Form.\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange({\n                ...this.state,\n                ...changedValue,\n            });\n        }\n    };\n\n    render() {\n        const { size } = this.props;\n        const { unit, number } = this.state;\n        return (\n            <Fragment>\n                    <InputNumber\n                        type=\"text\"\n                        size={size}\n                        value={number}\n                        onChange={this.handleNumberChange}\n                        style={{ width: '40%', marginRight: '3%' }}\n                    />\n                    <Select\n                        value={unit}\n                        size={size}\n                        style={{ width: '40%' }}\n                        onChange={this.handleUnitChange}\n                    >\n                        <Option value=\"g\">g</Option>\n                        <Option value=\"mL\">mL</Option>\n                    </Select>\n            </Fragment>\n        );\n    }\n}\n\n\nclass StockButtons extends Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                // 값 : values.value.number\n                // 단위 : values.value.unit\n                const unit = values.value.unit\n                var change = values.value.number\n                if (unit ==='mL'){\n                    change *= this.props.stock.chemical.density\n                }\n                console.log(change)\n                console.log(change > this.props.stock.remainingVolume)\n                if (change > this.props.stock.remainingVolume){\n                     message.error('잘못된 사용량을 입력하셨습니다');\n                } else {\n                    this.props.changeVolume(change, unit);\n                }        \n            }\n        });\n\n    };\n\n    checkNumber = (rule, value, callback) => {\n        if (value.number > 0) {\n            callback();\n            return;\n        } \n        if (this.props.remainingVolume < value.number){\n            callback('너무 큰 수를 입력하셨습니다!')\n            return;\n        }\n        callback('0보다 큰 수를 입력 해 주세요!');\n    };\n\n    clickDeleteButton = () => {\n        this.props.deleteStock();\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Fragment>\n\n            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                <Form.Item style={{marginRight : '1.5%'}}>\n                    {getFieldDecorator('value', {\n                        initialValue: { number: 0, unit: 'g' },\n                        rules: [{ validator: this.checkNumber }],\n                    })(<PriceInput />)}\n                </Form.Item>\n                <Form.Item style={{marginLeft : '1.5%'}}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        사용\n                    </Button>\n                </Form.Item>\n            </Form>\n            <div style={{margin : 10}}>\n                <span style={{marginLeft : 10, marginRight : 10}}>\n                    <Button type=\"primary\" onClick={this.clickDeleteButton}> 폐기하기 </Button>\n                </span>\n                <span style={{marginLeft : 10, marginRight : 10}}>\n                    <Button type=\"primary\" onClick={this.props.showInventoryChangeButton}> 장소수정 </Button>\n                </span>\n            </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Form.create()(StockButtons);","import React, { Component, Fragment } from 'react';\n\nimport { Select, Button, Modal, Popconfirm, message, Row, Col } from 'antd';\nimport { getUser, getLab } from '../authentication';\nimport { serverUrl } from '../setting'\n\n\nconst { confirm } = Modal;\n\nconst { Option } = Select;\n\nclass SelectInventory extends Component {\n\n    //또 selectInventory라는 함수를 props로 받음\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedInventory: '장소를 선택해 주세요',\n            crash: false,\n            crashWith: {}\n        }\n\n        /*\n        suggest = [{\n                id : \"suggestInventory1\",\n                name : \"보관함1\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }, {\n                id : \"suggestInventory2\",\n                name : \"보관함2\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }, {\n                id : \"suggestInventory3\",\n                name : \"보관함3\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }\n            ],\n            notSuggest = [{\n                id : \"notSuggestInventory1\",\n                name : \"보관함4\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }, {\n                id : \"notSuggestInventory2\",\n                name : \"보관함5\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }, {\n                id : \"notSuggestInventory3\",\n                name : \"보관함6\",\n                temperature : 20.0,\n                humidity : 0,\n                illuminance : false,\n                oximeter : false,\n                explosion : false\n            }\n\n            ]\n        */\n\n    }\n    /*\n                        chemical: {\n                            id: 30,\n                            name : \"name6\",\n                            status : 1,\n                            meltingPoint : 20.0,\n                            boilingPoint : 30.0\n                        }\n    */\n\n\n    //select 바꼈을 때\n    handleChange = (value) => {\n        console.log(value)\n        this.setState({\n            selectedInventory: value\n        }, () => {\n            if (value !== '장소를 선택해 주세요') {\n                const url = serverUrl + '/chemical/' + getUser().id + '/' + this.props.chemical.id + '/' + this.state.selectedInventory\n                fetch(url, { // uri 넣어주기\n                    method: 'GET', //'GET', 'POST', 'DELETE' 등등\n                    headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n                }).then(response => {\n                    if (response.status === 200) {\n                        //이건 정상적으로 된 경우\n                        return response.json()\n                    } else {\n                        //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n                    }\n                }).then(response => {\n                    if (response.crash) {\n                        console.log(\"crash!\")\n                        this.setState({\n                            crash: true,\n                            crashWith: response.crashWith\n                        })\n                        //안되는 경우\n                        /*\n                        confirm({\n                            title: '약품이 해당 장소에 두었을 경우 다음 약품과 상호작용이 일어날 수 있습니다. 괜찮습니까?',\n                            content: response.crashWith.nickname + ' / ' + response.crashWith.chemical.name,\n                            onOk() {\n                                this.props.selectInventory(this.state.selectedInventory)\n                            },\n                            onCancel() { },\n                        });\n                        */\n\n                    } else {\n                        console.log(\"not crash!\")\n                        //되는 경우\n                        //this.props.selectInventory(this.state.selectedInventory)\n                        this.setState({\n                            crash: false\n                        })\n\n                    }\n                })\n\n            }\n        })\n    }\n\n    confirm = () => {\n        this.props.selectInventory(this.state.selectedInventory)\n    }\n\n    cancle = () => {\n\n    }\n\n\n    render() {\n        return (\n\n            <Row>\n                <Col span={16} >\n                    <center>\n                        <Select defaultValue=\"장소를 선택해 주세요\" style={{ width : '100%'}} onChange={this.handleChange}>\n                            {\n                                this.props.suggest.map(inventory => {\n                                    return <Option value={inventory.id}>{inventory.name} (추천)</Option>\n                                })\n                            }\n                            {\n                                this.props.notSuggest.map(inventory => {\n                                    return <Option value={inventory.id}>{inventory.name}</Option>\n                                })\n                            }\n                        </Select>\n                    </center>\n                </Col>\n                <Col span={8} >\n                    <center>\n                        <Popconfirm\n                            title={this.state.crash === true ? \"해당 약품은 \" + this.state.crashWith.nickname + \"/\" + this.state.crashWith.chemical.name + \"과 상호작용이 있습니다. 괜찮습니까?\"\n                                : \"해당 약품을 추가하시겠습니까?\"}\n                            onConfirm={this.confirm}\n                            onCancel={this.cancel}\n                            okText=\"Yes\"\n                            cancelText=\"No\"\n                            style ={{width : '100%'}}\n                        >\n                            <Button > 선택완료 </Button>\n                        </Popconfirm>\n\n                    </center>\n                </Col>\n            </Row>\n\n        )\n    }\n}\n\nexport default SelectInventory;","import React, { Component, Fragment } from 'react';\nimport { Button } from 'antd';\n\nimport SelectInventory from './SelectInventory';\n\nclass StockInventoryChangeButton extends Component {\n\n    render() {\n        return(\n            <Fragment>\n                <SelectInventory selectInventory={this.props.changeInventory} suggest={this.props.suggest}\n                notSuggest={this.props.notSuggest} chemical={this.props.chemical}/>\n                <div>\n                    <Button onClick={this.props.blindInventoryChangeButton} type=\"primary\"> 취소 </Button>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default StockInventoryChangeButton;","import React, { Component } from 'react';\nimport { Typography, Descriptions, message } from 'antd';\n\nimport ChemicalInfo from './ChemicalInfo';\nimport StockButtons from './StockButtons';\nimport StockInventoryChangeButton from './StockInventoryChangeButton';\n\nimport { serverUrl } from '../setting'\nimport { getUser, getLab } from '../authentication';\n\nconst { Title } = Typography;\n\n//약품 정보 중에서 약품 특성에 대한 박스\nclass StockInfo extends Component {\n\n    state = {\n        showStockInventoryChangeButton : false,\n        suggest : [],\n        notSugget : []\n    }\n\n    constructor(props) {\n        super(props);\n        console.log(this.props.stock)\n        \n    }\n\n    getDateToString( date ){\n        return (date.year + \"/\" + date.monthValue + \"/\" + date.dayOfMonth)\n    }\n\n    //사용\n    changeVolume = (change, unit) => {\n        this.props.changeVolume(this.props.stock.id, change, unit);\n    }\n\n    //삭제\n    deleteStock = () => {\n        this.props.deleteStock(this.props.stock.id)\n    }\n\n    //장소변경 버튼 보여주기\n    showInventoryChangeButton = () => {\n        //여기서 장소 추천을 받아준다\n        //여기서 fetch\n\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + this.props.stock.chemical.id\n        fetch(url, { // uri 넣어주기\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                    return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n            //여기서 response라는걸 제대로 쓸 수 있음\n            console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\n            //예를들면\n            this.setState({\n                suggest : response.suggest,\n                notSuggest : response.notSuggest,\n                showStockInventoryChangeButton : true\n            })\n        })\n        /*\n\n        var suggest = [{\n            id : \"id3\",\n            name : \"보관함1\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"suggestInventory2\",\n            name : \"보관함2\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"suggestInventory3\",\n            name : \"보관함3\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }]\n        var notSuggest = [{\n            id : \"notSuggestInventory1\",\n            name : \"보관함4\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"notSuggestInventory2\",\n            name : \"보관함5\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"notSuggestInventory3\",\n            name : \"보관함6\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }]\n\n        this.setState({\n            showStockInventoryChangeButton : true,\n            suggest : suggest,\n            notSuggest : notSuggest\n        })\n        */\n\n    }\n\n    //장소변경 버튼 없애기\n    blindInventoryChangeButton = () => {\n        this.setState({\n            showStockInventoryChangeButton : false\n        })\n    }\n\n    //장소 변경\n    changeInventory = (newInventoryId) => {\n        this.props.changeInventory(this.props.stock.id, newInventoryId)\n    }\n\n    render() {\n\n        {/*\n            stocks 모양\n        {\n                        id: 3,\n                        nickname: \"nickname6\",\n                        putDate : Date.now(),\n                        expireDate : Date.now(),\n                        volume : 300,\n                        remainingVolume : 300,\n                        chemical: {\n                            id: 30,\n                            name : \"name6\",\n                            status : 1,\n                            meltingPoint : 20.0,\n                            boilingPoint : 30.0\n                        }\n        */}\n        const {stock} = this.props;\n\n        return (\n            <div>\n                {/* 화학적 특성 정보*/}\n                <ChemicalInfo chemical={stock.chemical} />\n                {/* 재고 정보 */}\n                <div style={{ marginBottom: 20, marginTop: 20 }}>\n                    <Descriptions bordered=\"true\" size=\"small\" >\n                        <Descriptions.Item label=\"약품 등록일\">{this.getDateToString(stock.putDate)}</Descriptions.Item>\n                        <Descriptions.Item label=\"약품 유효기간\">{this.getDateToString(stock.expireDate)}</Descriptions.Item>\n                        <Descriptions.Item label=\"사용 후 남은 양\">{stock.remainingVolume}/{stock.volume} ({Math.floor((stock.remainingVolume/stock.volume)*100*100)/100}%)</Descriptions.Item>\n                    </Descriptions>\n                </div>\n                {/* 버튼들 */}\n                <div>\n                    <center>\n                        {\n                            !this.state.showStockInventoryChangeButton && <StockButtons changeVolume={this.changeVolume} \n                            remainingVolume={stock.remainingVolume} deleteStock={this.deleteStock} showInventoryChangeButton={this.showInventoryChangeButton} stock={stock}/>\n                        }\n                        {\n                            this.state.showStockInventoryChangeButton && <StockInventoryChangeButton changeInventory={this.changeInventory} \n                            chemical={stock.chemical} blindInventoryChangeButton={this.blindInventoryChangeButton} suggest={this.state.suggest}\n                            notSuggest={this.state.notSuggest}/>\n                        }\n                    </center>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default StockInfo;","import React, { Component } from 'react';\nimport { Modal, Button } from 'antd';\n\nimport StockInfo from './StockInfo';\n\n//화학 약품 하나에 대한 거 (my Lab 화면 중에)\nclass Stock extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chemicalInfoVisible: false\n        }\n    }\n\n    showModal = () => {\n        this.setState({\n            chemicalInfoVisible: true,\n        });\n    };\n\n    handleOk = e => { //두번쩨걸 닫고 첫번째 창을 켠다\n        this.setState({\n            chemicalInfoVisible: false,\n        });\n    };\n\n    render() {\n        const {stock} = this.props; //stock을 props로 넣어 주어야 함\n\n        //고체는 gold, 액체는 experiment, 기체는 cloud\n\n        const status = stock.chemical.status.toLowerCase()\n\n        const iconType = (status.match(\"liquid\") || status.match(\"solution\")) ? \"experiment\" : status.match(\"gas\") ? \"cloud\" : \"gold\"\n        return (\n            <span>\n                <center>\n                    {/* 버튼 */}\n                    <Button Button icon={iconType} onClick={this.showModal} style={{ fontSize: '25px' }} size=\"large\" shape=\"circle\" />\n                    {/* 뜨는 창 */}\n                    <Modal\n                        title={stock.nickname+\" 약품 정보\"}\n                        visible={this.state.chemicalInfoVisible}\n                        onOk={this.handleOk}\n                        onCancel={this.handleOk}\n                    >\n                        {/* 정보 출력  */}\n                        <StockInfo stock={stock} changeVolume={this.props.changeVolume} deleteStock={this.props.deleteStock}\n                        changeInventory={this.props.changeInventory} />\n                    </Modal>\n                </center>\n                <center>\n                    {/* 버튼 아래 약품 이름 */}\n                    {stock.nickname}\n                </center>\n            </span>\n        );\n    }\n}\n\nexport default Stock;","import React, { Component } from 'react';\nimport { Modal, Button, Input, Form, Select, message, InputNumber, Row, Col, Icon } from 'antd';\n\nimport ChemicalInfo from './ChemicalInfo';\nimport SelectInventory from './SelectInventory';\nimport { serverUrl } from '../setting';\nimport { getUser } from '../authentication';\n\nconst { Search } = Input;\n\n\nconst { Option } = Select;\n\n//화학 약품 하나에 대한 거 (my Lab 화면 중에)\nclass ChemicalAdd extends Component {\n\n    state = {\n        visible: false,\n        chemical: {},\n        nickname: \"default\",\n        suggest: [],\n        notSuggest: [],\n        selectedInventory: null,\n        number: 0,\n        unit: 'g',\n        expire: '',\n        nicknameCheck: true\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    handleCancel = e => { //둘다 닫는다\n        this.setState({\n            visible: false,\n        });\n    };\n\n    nickNameChange = (e) => {\n        this.setState({\n            nickname: e.target.value,\n            nicknameCheck: false\n        })\n        if (e.target.value === '') {\n            this.setState({\n                nicknameCheck: true\n            })\n        }\n    }\n\n    setExpire = (e) => {\n        this.setState({\n            expire: e.target.value\n        })\n    }\n\n    search = (chemicalName) => {\n        chemicalName = chemicalName.replace(' ', '_')\n        console.log(chemicalName)\n        //여기에 fetch 들어가기\n        const url = serverUrl + '/chemical/info/' + getUser().id\n        fetch(url, { // uri 넣어주기\n            method: 'POST', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify({\n                name: chemicalName\n            }) //여기에다가 body 넣어주기\n        }).then(response => {\n            if (response.status === 200) {\n                //이건 정상적으로 된 경우\n                response.json().then(response => {\n                    console.log(23123)\n                    console.log(response)\n                    //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n                    //여기서 response라는걸 제대로 쓸 수 있음\n                    this.setState({\n                        chemical: response.chemical\n                    }, () => {\n                        this.getInventorySuggestList()\n                    })\n                })\n            } else {\n                message.error('약품을 찾을 수 없습니다!');\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        })\n\n    }\n\n    getInventorySuggestList = () => {\n        //여기서 장소 추천을 받아준다\n        //여기서 fetch\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + this.state.chemical.id\n        fetch(url, { // uri 넣어주기\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if (response.status === 200) {\n                //이건 정상적으로 된 경우\n                return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n            //여기서 response라는걸 제대로 쓸 수 있음\n            console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\n            //예를들면\n            this.setState({\n                suggest: response.suggest,\n                notSuggest: response.notSuggest\n            })\n            if (response.suggest.length === 0) {\n                message.warning('추천 장소가 없습니다. 기존 장소를 선택하거나 새로 장소를 추가하여 등록해주세요!')\n            }\n        })\n\n    }\n\n    resetState = () => {\n        this.setState({\n            visible: false,\n            chemical: {},\n            nickname: \"default\",\n            suggest: [],\n            notSuggest: [],\n            selectedInventory: null,\n            number: 0,\n            unit: 'g',\n            expire: '',\n            nicknameCheck: true\n        })\n    }\n\n    //날짜가 양식에 맞는지 체크\n    checkExpire = () => {\n        const date = this.state.expire\n        if (date.length != 6) {\n            return false;\n        }\n        var dateInt = parseInt(date);\n        if (dateInt < 100101 || dateInt > 999999) {\n            return false;\n        }\n\n        const year = parseInt(date.substring(0, 2)) + 2000\n        const month = parseInt(date.substring(2, 4))\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        const day = parseInt(date.substring(4, 6))\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        try {\n            var realDate = new Date()\n            realDate.setFullYear(year)\n            realDate.setMonth(month)\n            realDate.setDate(day)\n        } catch (e) {\n            return false;\n        }\n        return true\n    }\n\n    selectInventory = (inventoryId) => {\n        //여기서 fetch해줌\n        this.setState({\n            selectInventory: inventoryId\n        })\n        console.log(inventoryId)\n        //여기서 state에 대한것들 추가해주기\n        var gram = this.state.number\n        if (this.state.unit === 'mL') {\n            gram *= this.state.chemical.density\n        }\n\n        //this.state.expire이 6글자여야 함\n        //TODO : expire 체크 \n\n        if (this.state.nicknameCheck) {\n            //여기서 날짜체크 해주기\n\n            if (this.checkExpire()) {\n\n                if (this.state.number < 0.01) {\n                    message.error('초기 용량을 확인해 주세요!')\n                } else {\n                    //여기서 전체 inventory list중에서 inventoryId인걸 찾아줘야 함\n                    var finish = false\n                    for (var i = 0; i < this.state.suggest.length; i++) {\n                        if (this.state.suggest[i].id === inventoryId) {\n                            finish = true;\n                            this.handleCancel()\n                            this.resetState()\n                            this.props.addChemical(this.state.chemical, inventoryId, gram, this.state.expire, this.state.nickname, this.state.suggest[i].name)\n                        }\n                    }\n                    if (!finish) {\n                        for (var i = 0; i < this.state.notSuggest.length; i++) {\n                            if (this.state.notSuggest[i].id === inventoryId) {\n                                this.handleCancel()\n                                this.resetState()\n                                this.props.addChemical(this.state.chemical, inventoryId, gram, this.state.expire, this.state.nickname, this.state.notSuggest[i].name)\n                            }\n                        }\n                    }\n                }\n\n\n            } else {\n                message.error('날짜를 양식에 맞게 입력해 주세요!')\n            }\n\n        } else {\n            message.error('별칭 중복확인 버튼을 눌러 주세요!')\n\n        }\n        //여기에 nickname체크 해주기\n        /*\n        const nicknameUrl = serverUrl + '/chemical/nickname/' + getUser().id\n        fetch(nicknameUrl, { // uri 넣어주기\n            method: 'POST', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify({\n                nickname : this.state.nickname\n            }) //여기에다가 body 넣어주기\n        }).then(response => {\n            if( response.status === 200){\n                this.props.addChemical(this.state.chemical, inventoryId, gram, this.state.expire, this.state.nickname)\n            } else {\n                message.error('닉네임이 겹칩니다')\n            }\n        })\n        */\n    }\n\n    nicknameCheck = () => {\n        const nicknameUrl = serverUrl + '/chemical/nickname/' + getUser().id\n        fetch(nicknameUrl, { // uri 넣어주기\n            method: 'POST', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify({\n                nickname: this.state.nickname\n            }) //여기에다가 body 넣어주기\n        }).then(response => {\n            if (response.status === 200) {\n                message.success('사용 가능한 별칭입니다')\n                this.setState({\n                    nicknameCheck: true\n                })\n                //this.props.addChemical(this.state.chemical, inventoryId, gram, this.state.expire, this.state.nickname)\n            } else {\n                message.error('이미 존재하는 별칭입니다. 다시 한번 확인해주세요')\n                this.setState({\n                    nicknameCheck: false\n                })\n            }\n        })\n    }\n\n\n\n    handleNumberChange = e => {\n        console.log(e)\n        const number = parseFloat(e).toFixed(2);\n        if (isNaN(number)) {\n            return;\n        }\n        if (!('value' in this.props)) {\n            this.setState({ number });\n        }\n        this.triggerChange({ number });\n    };\n\n    handleUnitChange = unit => {\n        if (!('value' in this.props)) {\n            this.setState({ unit });\n        }\n        this.triggerChange({ unit });\n    };\n\n\n    triggerChange = changedValue => {\n        // Should provide an event to pass value to Form.\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange({\n                ...this.state,\n                ...changedValue,\n            });\n        }\n        console.log(this.state)\n    };\n\n\n    render() {\n        const { size } = this.props;\n        const { unit, number } = this.state;\n\n        return (\n\n            <span>\n                <center>\n                    {/* 버튼 */}\n                    <Button Button type=\"primary\" shape=\"round\" onClick={this.showModal} style={{ fontSize: '12px' }} size=\"large\" > 약품 추가 </Button>\n                    {/* 뜨는 창 */}\n                    <Modal\n                        title=\"약품 추가\"\n                        visible={this.state.visible}\n                        onOk={this.handleCancel}\n                        onCancel={this.handleCancel} //둘다 닫는다\n                    >\n                        {/* 검색 창 */}\n                        <div>\n                            <Search\n                                placeholder=\"약품 이름을 입력 해 주세요\"\n                                enterButton=\"Search\"\n                                size=\"middle\"\n                                onSearch={value => this.search(value)}\n                            />\n                        </div>\n\n                        {/* 정보 출력  */}\n                        <div>\n                            <ChemicalInfo chemical={this.state.chemical} />\n                        </div>\n\n                        {/* 그 아래것들 */}\n                        <div style={{ marginTop: 10 }}>\n                            {/* 별명 입력 창 */}\n                            <div style={{ marginBottom: 10 }}>\n                                <Row>\n                                    <Col span={16} >\n                                        <center>\n                                            <Input placeholder=\"별칭을 입력 해 주세요\" onChange={this.nickNameChange} />\n                                        </center>\n                                    </Col>\n                                    <Col span={8} >\n                                        <center>\n                                            <Button onClick={this.nicknameCheck}>중복확인</Button>\n                                        </center>\n                                    </Col>\n                                </Row>\n                            </div>\n\n                            {/* 처음 용량 & 유효기간 입력 */}\n                            <div style={{ marginBottom: 10 }}>\n                                <Row>\n                                    <Col span={16} >\n                                        <center>\n                                            <InputNumber\n                                                type=\"text\"\n                                                size={size}\n                                                value={number}\n                                                onChange={this.handleNumberChange}\n                                                style={{ width: '95%' }}\n                                            />\n\n                                        </center>\n                                    </Col>\n                                    <Col span={8} >\n                                        <center>\n                                            <Select\n                                                value={unit}\n                                                size={size}\n                                                style={{ width: '100%' }}\n                                                onChange={this.handleUnitChange}\n                                            >\n                                                <Option value=\"g\">g</Option>\n                                                <Option value=\"mL\">mL</Option>\n                                            </Select>\n\n                                        </center>\n                                    </Col>\n                                </Row>\n                            </div>\n\n                            <div style={{ marginBottom: 10 }}>\n                                <center>\n\n\n                                </center>\n                            </div>\n\n                            <div style={{ marginBottom: 10 }} >\n                                <Input placeholder=\"유효기간을 입력 해 주세요(YYMMDD)\" onChange={this.setExpire} />\n                            </div>\n\n\n                            {/* 장소 */}\n                            <div style={{ marginBottom: 10 }}>\n                                <SelectInventory suggest={this.state.suggest} notSuggest={this.state.notSuggest} selectInventory={this.selectInventory} chemical={this.state.chemical} />\n                            </div>\n\n                        </div>\n\n                    </Modal>\n                </center>\n             \n            </span>\n        );\n    }\n}\n\nexport default ChemicalAdd;","import React, { Component, Fragment } from 'react';\nimport { Input, Modal, Button, Radio, Checkbox, Icon, Row, Col } from 'antd';\n\nclass InventoryAdd extends Component {\n\n    state = {\n        visible: false,\n        name: \"\",\n        temperature: 0,\n        humidity: 0,\n        illuminance: false,\n        oximeter: true,\n        explosion: false,\n        plainOptions: ['채광', '산소', '폭발방지']\n    };\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    handleOk = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleCancel = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n    nameChange = (name) => {\n        this.setState({\n            name: name.target.value\n        })\n    }\n\n    temperatureChange = (temperature) => {\n        this.setState({\n            temperature: temperature.target.value\n        })\n    }\n\n    humidityChange = e => {\n        this.setState({ humidity: e.target.value });\n        console.log(e.target.value)\n    };\n\n    onChange = (checkedValues) => {\n        console.log('checked = ', checkedValues);\n        if (checkedValues.some(x => x === this.state.plainOptions[0])) {\n            this.setState({\n                illuminance: true\n            })\n        } else {\n            this.setState({\n                illuminane: false\n            })\n        }\n\n        if (checkedValues.some(x => x === this.state.plainOptions[1])) {\n            this.setState({\n                oximeter: true\n            })\n        } else {\n            this.setState({\n                oximeter: false\n            })\n        }\n\n        if (checkedValues.some(x => x === this.state.plainOptions[2])) {\n            this.setState({\n                explosion: true\n            })\n        } else {\n            this.setState({\n                explosion: false\n            })\n        }\n\n    }\n\n    submit = () => {\n        this.props.addInventory(\n            this.state.name, this.state.temperature, this.state.humidity, this.state.illuminance, this.state.oximeter, this.state.explosion\n        )\n        this.handleOk()\n    }\n\n\n    render() {\n\n\n        return (\n            <span>\n                <Button type=\"primary\" onClick={this.showModal} size=\"small\" icon=\"plus\" shape=\"circle\" />\n                <Modal\n                    title=\"보관 장소 추가\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                >\n                    <Row style={{ marginBottom: 10 }}>\n                        <Col span={6} >\n\n                        </Col>\n                        <Col span={18}>\n\n                        </Col>\n                    </Row>\n\n                    <Row style={{ marginBottom: 10 }}>\n                        <Col span={6} >\n                            이름 :\n                        </Col>\n                        <Col span={18}>\n                            <Input placeholder=\"보관장소 이름\" onChange={this.nameChange} />\n                        </Col>\n                    </Row>\n\n                    <Row style={{ marginBottom: 10 }}>\n                        <Col span={6} >\n                            온도 :\n                        </Col>\n                        <Col span={18}>\n                            <Input placeholder=\"보관장소 온도\" onChange={this.temperatureChange} />\n                        </Col>\n                    </Row>\n\n                    <Row style={{ marginBottom: 10 }}>\n                        <Col span={6} >\n                            습도 :\n                        </Col>\n                        <Col span={18}>\n                            <Radio.Group value={this.state.humidity} onChange={this.humidityChange}>\n                                <Radio.Button value={-1}>없음(~3%)</Radio.Button>\n                                <Radio.Button value={0}>보통</Radio.Button>\n                                <Radio.Button value={1}>높음(71%~)</Radio.Button>\n                            </Radio.Group>\n                        </Col>\n                    </Row>\n\n                    <Row style={{ marginBottom: 10 }}>\n                        <Col span={6} >\n                            기타옵션 :\n                        </Col>\n                        <Col span={18}>\n                            <Checkbox.Group options={this.state.plainOptions} defaultValue={['산소']} onChange={this.onChange} />\n                        </Col>\n                    </Row>\n\n                    <div style={{ marginBottom: 10 }}>\n                        <center><Button onClick={this.submit} > 추가하기 </Button></center>\n                    </div>\n                </Modal>\n            </span>\n        );\n    }\n\n}\n\nexport default InventoryAdd;\n","import React, { Component } from 'react';\n\nimport {Typography} from 'antd';\n\n\nconst { Title } = Typography;\n\nclass MenuTitle extends Component {\n\n    //props로 title을 보내줘야 함\n    render() {\n        return (\n            <div style={{ height: 100, background: '#4B589F', borderColor : '#4B589F'}}>\n                <center><br /><Title style={{ marginTop:13, marginBottom: 25, fontSize: 35, color: 'white' }}>{this.props.title}</Title></center>\n            </div>\n        )\n    }\n}\n\nexport default MenuTitle;","import React, { Component } from 'react';\nimport { List, Typography, Radio, Button, message, Modal } from 'antd'\n\nimport Stock from './Stock';\nimport ChemicalAdd from './ChemicalAdd';\nimport InventoryAdd from './InventoryAdd';\nimport { history } from '../History';\nimport MenuTitle from './MenuTitle';\n\nimport { serverUrl } from '../setting'\nimport { getUser, getLab } from '../authentication';\n\nconst { Title } = Typography;\n\nconst { confirm } = Modal;\n\n//마이 랩\nclass MyLab extends Component {\n\n    state = {\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventories: [],//inventories, //인벤토리 배열 \n            inventory: 0, //firstInventoryId, //현재 인벤토리 아이디\n            inventoryName: '',//inventories[0].name, //현재 인벤토리 이름\n            isInventoryExist: false\n            //realInventory : inventories.filter(inventory => inventory.id===firstInventoryId) //현재 인벤토리에 있는 것들만\n        }\n        this.getInventories()\n\n    }\n\n    getInventories = () => {\n        const url = serverUrl + '/chemical/' + getUser().id\n        console.log(url)\n        fetch(url, { // uri 넣어주기\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if (response.status === 200) {\n                //이건 정상적으로 된 경우\n                return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n            //여기서 response라는걸 제대로 쓸 수 있음\n            console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\n            try {\n                this.setState({\n                    inventories: response.inventories,\n                    inventory: response.inventories.length>0 ? response.inventories[0].id : 0,\n                    inventoryName: response.inventories.length>0 ?response.inventories[0].name : '',\n                    isInventoryExist: response.inventories.length > 0 ? true : false\n                })\n            } catch (e){\n                message.warning('가입된 lab이 없습니다!')\n                history.push('/mygroup')\n            }\n           \n        })\n    }\n\n    //인벤토르 바꿨을 경우\n    handleInventoryChange = e => {\n        this.state.inventories.forEach(inventory => {\n            console.log(inventory)\n            if (inventory.id === e.target.value) {\n                this.setState({\n                    inventory: inventory.id,\n                    inventoryName: inventory.name,\n                    //realInventory : inventory\n                })\n            }\n        })\n    };\n\n    //볼륨 바꿀 경우\n    changeVolume = (stockId, change, unit) => {\n        //여기서 fetch 해준다\n        //volume 바꿔주는걸로\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + stockId \n        \n        console.log('before precision : ' + change)\n        change = Math.floor(change*100)/100\n        console.log('after precision ')\n        fetch(url, { // uri 넣어주기\n            method: 'PUT', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify({volume : change}) //여기에다가 body 넣어주기\n        }).then(response => {\n            if (response.status === 200) {\n                //이건 정상적으로 된 경우\n                response.json().then( response => {\n                    //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n                    //여기서 response라는걸 제대로 쓸 수 있음\n                    var stock = response.stock\n                    //여기서 다썼거나, 조금남았으면 표시 후 알람 발생\n                    if (stock.remainingVolume === 0.0){\n                        //다씀\n                        message.warning('약품을 전부 사용했습니다!')\n                        //this.makeVolumeAlarm(stockId)\n                    } else if (stock.remainingVolume / stock.volume <= 0.2){\n                        //쪼금남음\n                        message.warning('약품이 얼마 남지 않았습니다!')\n                        //this.makeVolumeAlarm(stockId)\n                    } else {\n                        message.success('성공적으로 반영 되었습니다')\n                    }\n                    this.getInventories()\n                })\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n                this.getInventories()\n            }\n        })\n    }\n\n    makeVolumeAlarm = (stockId) => {\n        const url = serverUrl + '/alarm/' + getUser().id + '/' + stockId;\n        fetch(url, { // uri 넣어주기\n            method: 'PUT', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        })\n    }\n\n    //재고 삭제하기\n    deleteStock = (stockId) => {\n        //여기서 fetch 해주기\n        const url = serverUrl + '/chemical/' + stockId\n        fetch(url, { // uri 넣어주기\n            method: 'DELETE', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if (response.status === 200) {\n                //이건 정상적으로 된 경우\n                message.success('성공적으로 폐기 되었습니다!')\n                this.setState({\n                    inventories : [],\n                    isInventoryExist : false\n                }, () => {\n                    this.getInventories()\n                })\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        })\n    }\n\n    //인벤토리 바꾸기\n    changeInventory = (stockId, newInventoryId) => {\n        //여기서 fetch 해주기\n        console.log(stockId, newInventoryId)\n        const url = serverUrl + '/inventory/' + getUser().id + '/' + stockId + '/' + newInventoryId\n        fetch(url, { // uri 넣어주기\n            method: 'PUT', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                    return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            this.getInventories()\n        })\n    }\n\n\n    //추가 해주기\n    addChemical = (chemical, inventoryId, put, expire, nickname, inventoryName) => {\n        if (nickname === \"\" || nickname === \" \") {\n            nickname = \"default\";\n        }\n        //chemical을 inventoryId에 추가\n        //각각 validation check해 준 뒤에 추가\n        console.log(\"추가\")\n        console.log(chemical, inventoryId, put, expire)\n        //그리고 추가 해주기\n\n        console.log(nickname)\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + chemical.id + '/' + inventoryId + '/' + expire\n        const body = {\n            nickname : nickname==='' ? null : nickname,\n            volume : put\n        }\n        fetch(url, { // uri 넣어주기\n            method: 'POST', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify(body) //여기에다가 body 넣어주기\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                    return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            try {\n                var stocks = response.stocks\n                for (var i=0; i<stocks.length; i++){\n                    if( stocks[i].chemical.id === chemical.id){\n                        const successMessage = '' + chemical.name +  ' / ' + stocks[i].nickname + '이 ' + inventoryName + '에 추가되었습니다!'\n                        message.success(successMessage)\n                        break;\n                    }\n                }\n                this.getInventories()\n                //window.location.reload();    \n            }\n            catch (e){\n                console.log(e)\n                message.error('오류가 발생했습니다. 새로고침 후 다시 진행 해 주세요')\n            }\n\n        })\n        \n    }\n/*\n    addChemical = (chemical, inventoryId, put, expire, nickname) => {\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + chemical.id + '/' + inventoryId\n        fetch(url, { // uri 넣어주기\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                    return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            if (response.crash){\n                //안되는 경우\n                confirm({\n                    title: '약품이 해당 장소에 두었을 경우 다음 약품과 상호작용이 일어날 수 있습니다. 괜찮습니까?',\n                    content: response.crashWith.nickname + ' / ' + response.crashWith.chemical.name,\n                    onOk() {\n                        this.addChemicalTwo(chemical, inventoryId, put, expire, nickname);\n                    },\n                    onCancel() { },\n                });\n\n            } else {\n                //되는 경우\n                this.addChemicalTwo(chemical, inventoryId, put, expire, nickname);\n\n            }\n        })\n\n\n        confirm({\n            title: 'Do you want to delete these items?',\n            content: 'When clicked the OK button, this dialog will be closed after 1 second',\n            onOk() {\n                return new Promise((resolve, reject) => {\n                    setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n                }).catch(() => console.log('Oops errors!'));\n            },\n            onCancel() { },\n        });\n        \n        \n    }\n\n*/\n\n    addInventory = (name, temperature, humidity, illuminance, oximeter, explosion) => {\n        console.log(name, temperature, humidity, illuminance, oximeter, explosion)\n        const url = serverUrl + '/inventory/' + getUser().id\n        const body = {\n            \"name\" : name,\n            \"temperature\" : temperature,\n            \"humidity\" : humidity,\n            \"illuminance\" : illuminance,\n            \"oximeter\" : oximeter,\n            \"explosion\" : explosion\n        }\n        fetch(url, { // uri 넣어주기\n            method: 'POST', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n            body: JSON.stringify(body) //여기에다가 body 넣어주기\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                message.success('보관장소가 성공적으로 추가되었습니다!')\n                this.getInventories()    \n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        })\n        \n    }\n\n    render() {\n\n        return (\n\n            <div>\n                {/* 약품 목록에서 각각 하나의 원소에 대한 Chemical 클래스 */}\n                <MenuTitle title=\"my Lab\" />\n\n                {\n                    this.state.isInventoryExist && \n                    <div style={{paddingTop : 20}}>\n                    <div><center> {/* 인벤토리 고르는 곳 */}\n                        <Radio.Group value={this.state.inventory} onChange={this.handleInventoryChange} size=\"small\" style={{margin : 10}}>\n                            {\n                                this.state.inventories.map(inventory => {\n                                    return (<Radio.Button value={inventory.id}>{inventory.name}</Radio.Button>)\n                                })\n                            }\n                        </Radio.Group>\n                        <InventoryAdd addInventory={this.addInventory} />\n                    </center>\n                    </div>\n\n                    <br />\n\n                    <List\n                        grid={{ gutter: 16, column: 3 }}\n                        dataSource={this.state.inventories.filter(inventory => inventory.id === this.state.inventory)[0].stocks}\n                        renderItem={stock => (\n                            <List.Item>\n                                <Stock stock={stock} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\n                                    changeInventory={this.changeInventory} /> {/* Chemical 컴포넌트에 stock을 전해줌*/}\n                            </List.Item>\n                        )}\n                    />\n\n\n\n                    {/* 약품 추가*/}\n                    <div style={{ marginTop: 100 }}>\n                        <ChemicalAdd addChemical={this.addChemical} />\n                    </div>\n                </div>\n                }\n\n                {\n                    !this.state.isInventoryExist  &&\n                    <div>\n                        <br/>\n                        <br/>\n                        <br/>\n                        <center>보관장소가 없습니다! 추가 해 주세요!</center>\n                        <br/>\n                        <br/>\n                        <center> <InventoryAdd addInventory={this.addInventory} /></center>\n                    </div>\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default MyLab;\n","import React, { Component } from 'react';\r\nimport { serverUrl } from '../setting'\r\nimport { Typography, Icon, Row, Col, Button, Modal, Divider, Table, Card, List, Input, Form, TimePicker, message } from 'antd'\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { history } from '../History';\r\nimport Column from 'antd/lib/table/Column';\r\n\r\n\r\nclass ApparatusReservation extends Component {\r\n\r\n    state = {\r\n    }\r\n\r\n    handleSubmit2 = e => {\r\n\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n\r\n\r\n            if (!err) {\r\n                var startTime = values['start']\r\n                var endTime = values['end']\r\n                var newday = this.props.todayDate;\r\n                console.log(newday)\r\n                var yy = newday.getFullYear();\r\n                yy += ''\r\n                yy = yy.substring(2, 4);\r\n                var mm = newday.getMonth() + 1\r\n                var dd = newday.getDate()\r\n                if (dd < 10) { dd = \"0\" + dd }\r\n                var newdayInfo = yy + mm + dd;\r\n\r\n                var reservationList = this.props.reservationList\r\n                var duplicated = false; //시간 중복 체커\r\n                for (var i = 0; i < reservationList.length; i++) { //예약된 것중 시작시간ㅇ\r\n                    var sh = reservationList[i].startTime.hour\r\n                    var sm = +reservationList[i].startTime.minute\r\n                    if (sh < 10) { sh = \"0\" + sh } else { sh += \"\" }\r\n                    if (sm < 10) { sm = \"0\" + sm } else { sm += \"\" }\r\n\r\n                    var eh = \"\" + reservationList[i].endTime.hour\r\n                    var em = reservationList[i].endTime.minute\r\n                    if (eh < 10) { eh = \"0\" + eh } else { eh += \"\" }\r\n                    if (em < 10) { em = \"0\" + em } else { em += \"\" }\r\n\r\n                    var reservStart = sh + sm\r\n                    var reservEnd = eh + em\r\n                    if (startTime == reservStart && endTime == reservEnd) { console.log(1); duplicated = true; break; }\r\n                    else if ((startTime < reservStart) && (reservStart < endTime)) { console.log(2); duplicated = true; break; }\r\n                    else if (startTime > reservStart && endTime < reservEnd) { console.log(3); duplicated = true; break; }\r\n                    else if (startTime < reservEnd && reservEnd < endTime) { console.log(4); duplicated = true; break; }\r\n                }\r\n\r\n\r\n                var past = false; //지난 시간 예약 체커\r\n                var now = new Date();\r\n                if (startTime.substring(0, 2) < now.getHours() && mm == (now.getMonth() + 1) && dd == now.getDate()) { past = true; }\r\n                if (startTime.substring(0, 2) == now.getHours() && startTime.substring(2, 4) < now.getMinutes() && mm == (now.getMonth() + 1) && dd == now.getDate()) { past = true }\r\n\r\n                console.log(getLab())\r\n\r\n                if (startTime >= endTime) { message.error(\"끝 시간이 시작 시간보다 빠릅니다!\") }\r\n                else if (past) { message.error(\"지난 시간은 예약할 수 없습니다!\") }\r\n                else if (getLab() === undefined) {\r\n                    message.error(\"가입된 lab이 없습니다!\")\r\n                    history.push('/mygroup')\r\n                }\r\n                else if (!((startTime.substring(2, 4) === \"00\") || (startTime.substring(2, 4) === \"30\")) || !((endTime.substring(2, 4) === \"00\") || (endTime.substring(2, 4) === \"30\"))) {\r\n                    message.error(\"예약시간 끝자리를 00 또는 30으로 맞춰주세요!\")\r\n                }\r\n                else if (duplicated) { message.error(\"예약 시간이 중복됩니다!\") }\r\n                else {\r\n                    fetch(serverUrl + '/schedule/' + getUser().id + '/' + this.props.apparatusId + '/' + newdayInfo + \"/\" + startTime + \"/\" + endTime, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(values)\r\n                    }).then(response => {\r\n                        if (response.status === 200) {\r\n                            response.json().then(\r\n                                response => {\r\n                                    try {\r\n                                        this.props.plusReservation(response.schedules)\r\n                                    }\r\n                                    catch (e) {\r\n                                        message.warning(\"등록된 기기가 없습니다\")\r\n                                    }\r\n                                }\r\n                            )\r\n                        } else {\r\n                            console.log(this.props.apparatusId) //선택된 기계가 없는데 예약하려는 경우\r\n                            message.warning('예약 오류입니다. ');\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit2} className=\"form\" >\r\n                <center>                \r\n                    From\r\n                        <Form.Item >\r\n                            {getFieldDecorator('start', {\r\n                                rules: [{ required: true, message: '시작 시간 입력 필요! ' }],\r\n                            })(\r\n                                <Input style={{ width: 90, height: 30 }} placeholder=\"ex: 1000 \" />\r\n                                //<center><TimePicker defaultValue={moment('12:00', this.state.format)} format={this.state.format} /></center>\r\n                            )}\r\n                        </Form.Item>\r\n                   To\r\n                        <Form.Item >\r\n\r\n                            {getFieldDecorator('end', {\r\n                                rules: [{ required: true, message: '끝 시간 입력 필요! ' }],\r\n                            })(\r\n                                <Input style={{ width: 90, height: 30 }} placeholder=\"ex: 1200\" />\r\n                                //<center><TimePicker defaultValue={moment('14:00', this.state.format)} format={this.state.format} /></center>    \r\n                            )}\r\n                        </Form.Item></center>\r\n\r\n                    <Form.Item>\r\n                        \r\n                    \r\n                        <center>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"button\" style={{ height: 30, width: 130, fontSize: 12 }}>\r\n                                예약 하기\r\n                            </Button>\r\n                        </center>\r\n                    </Form.Item>\r\n              \r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Form.create()(ApparatusReservation);","import React, { Component } from 'react';\r\nimport { Typography, Row, Col, Button, Modal, Empty, Table, Card, List, Input, Form, TimePicker, message, Icon } from 'antd'\r\nimport { history } from '../History';\r\nimport { Link } from \"react-router-dom\";\r\nimport { serverUrl } from '../setting'\r\nimport MenuTitle from './MenuTitle';\r\n\r\n\r\nimport { getUser, getLab } from '../authentication';\r\nimport moment from 'moment';\r\nimport ApparatusReservation from './ApparatusReservation';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass Apparatus extends Component {\r\n    state = {\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        const { apparatusId } = this.props.match.params;\r\n        //오늘 날짜 받아오기\r\n        var today = new Date();\r\n        this.state = {\r\n            visible_0: false, // '기기 삭제' 모달\r\n            visible_1: false, //'기기등록하기' 모달\r\n            visible_2: false, // '기기예약하기' 모달\r\n            visible_3: false, // '본인 예약 삭제확인' 모달\r\n            visible_4: false, // '예약 중복' 모달\r\n            visible_5: false, // '예약 삭제 오류 - 지난 날짜 삭제 안됨' 모달 \r\n            format: 'HH:mm',\r\n            columns: [\r\n                {\r\n                    title: 'Time',\r\n                    dataIndex: 'time',\r\n                    key: 'time',\r\n                    align: 'center',\r\n                    ellipsis: true,\r\n                    width: \"5\",\r\n\r\n                },\r\n                {\r\n                    title: 'User',\r\n                    dataIndex: 'user',\r\n                    key: 'user',\r\n                    align: 'center',\r\n                    ellipsis: true,\r\n                    width: \"23\",\r\n                },\r\n                {\r\n                    title: 'delete',\r\n                    dataIndex: \"deleteButton\",\r\n                    key: 'deleteButton',\r\n                    align: 'center',\r\n                    ellipsis: true,\r\n                    width: \"7\",\r\n\r\n                }\r\n\r\n            ],\r\n            menu: apparatusId, // 처음들어오면 menu가 0임\r\n            apparatusList: [],\r\n            realReservationList: [],\r\n            reservationDataSource: [], // 예약정보 받아와서 시작 끝 시간 파싱 적절히 해서 column형식 만들어서 넣기\r\n            // 예약 등록 직후에 반영 되는건 어떻게?\r\n            todayDate: today, //Date형식\r\n        }\r\n\r\n    }\r\n\r\n    //0. 아래에 있는 곳에서 state의 변수들을 참조하므로, 변수들을 미리 선언 해 놓고, fetch를 해줘야 하네여\r\n    // 순서가 fetch되고 난 결과는 너무 늦게 나타나기 때문에 아래에 함수들에서 undefined된걸 읽어버려서 오류가 난것 같아요\r\n    // 그래서 그냥 state에다 변수이름과 타입정도만 미리 다 알려주고 난 후에 fetch된 실제 결과를 setState 해주기\r\n    // 그런데 constructor에서는 setState 할 수 없으니까 componentDidMount를 써줌\r\n    componentDidMount() {\r\n        fetch(serverUrl + '/apparatus/' + getUser().id, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return response.json()\r\n            } else {\r\n                // 오류 난 경우 처리 \r\n            }\r\n        }).then(response => {\r\n            var newList = []\r\n            if (response != undefined) {\r\n                newList = response.apparatuses\r\n            }\r\n            this.setState({\r\n                apparatusList: newList\r\n            }, () => {\r\n                var apparatusId = 0\r\n                var thisApparatus = {}\r\n                thisApparatus = this.state.apparatusList[0]\r\n                console.log(123)\r\n                console.log(this.state.apparatusList[0])\r\n                console.log(thisApparatus)\r\n                if (this.state.apparatusList.length > 0) {\r\n                    var today = this.state.todayDate;\r\n                    var yy = today.getFullYear();\r\n                    yy += ''\r\n                    yy = yy.substring(2, 4);\r\n                    var mm = today.getMonth() + 1\r\n                    var dd = today.getDate()\r\n                    if (dd < 10) { dd = '0' + dd }\r\n                    var todayInfo = yy + mm + dd;\r\n                    var url = 'schedule/' + this.state.apparatusList[0].id + '/' + todayInfo\r\n                    console.log(url)\r\n                    console.log(thisApparatus.id)\r\n                    apparatusId = thisApparatus.id\r\n                }\r\n                else { var url = 'apparatus/' + getUser().id }\r\n\r\n                fetch(serverUrl + '/' + url, {\r\n                    method: 'GET',\r\n                    headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        return response.json()\r\n                    } else {\r\n                        // 오류 난 경우 처리 \r\n                    }\r\n                }).then(response => {\r\n                    var newList = []\r\n                    if (response == undefined) {\r\n                        this.makeDataSource([])\r\n                    }\r\n                    else {\r\n                        this.makeDataSource(response.schedules)\r\n                        newList = response.schedules\r\n                    }\r\n                    this.setState({\r\n                        menu: apparatusId,\r\n                        realReservationList: newList\r\n                    })\r\n                }\r\n                )\r\n            }\r\n            )\r\n        }\r\n        )\r\n    }\r\n\r\n    //'기기 삭제'버튼에 대한 메소드\r\n    showModal_0 = () => {\r\n        console.log(this.state.visible_0)\r\n        this.setState({\r\n            visible_0: true\r\n        })\r\n    }\r\n    handleOk_0 = e => {\r\n        console.log(e);\r\n        this.handleRemove_2();\r\n        this.setState({\r\n            visible_0: false,\r\n        })\r\n    }\r\n    handleCancel_0 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_0: false,\r\n        })\r\n    }\r\n\r\n    //'기기 등록하기' 버튼 메소드\r\n    showModal_1 = () => {\r\n        console.log(this.state.visible_1)\r\n        this.setState({\r\n            visible_1: true,\r\n        })\r\n\r\n    }\r\n    handleOk_1 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_1: false,\r\n        })\r\n    }\r\n    handleCancel_1 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_1: false,\r\n        })\r\n    }\r\n\r\n    //'등록하기'버튼 입력받기?\r\n    handleSubmit = e => {\r\n        console.log(1)\r\n        console.log(e)\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            console.log(err)\r\n            if (!err) {\r\n                console.log(values)\r\n                console.log(getLab().id)\r\n                try {\r\n                    fetch(serverUrl + '/apparatus/' + getLab().id, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(values)\r\n                    }).then(response => {\r\n                        if (response.status === 200) {\r\n                            console.log('no problem')\r\n                            return response.json()\r\n                        } else {\r\n                            console.log('?')\r\n                            message.warning('기기 이름이 중복되었습니다!');\r\n                        }\r\n                    }).then(response => {\r\n                        console.log('newAPp')\r\n                        console.log(response)\r\n                        var newList = this.state.apparatusList\r\n                        if (response !== undefined) {\r\n                            newList.push(response.apparatus)\r\n                        }\r\n                        this.setState({\r\n                            apparatusList: newList,\r\n                        })\r\n\r\n                    })\r\n                }\r\n                catch (e) {\r\n                    message.warning('가입된 lab이 없습니다!')\r\n                    history.push('/mygroup')\r\n                }\r\n            }\r\n        })\r\n        this.handleOk_1()\r\n    };\r\n\r\n    //기기예약 버튼 이후 예약 리스트 업데이트\r\n    plusReservation = (list) => {\r\n        this.setState({\r\n            realReservationList: list\r\n        })\r\n        this.makeDataSource(list)\r\n        this.handleOk_2()\r\n    }\r\n\r\n    //'예약하기'버튼에 대한 메소드\r\n    showModal_2 = () => {\r\n        console.log(this.state.visible_2)\r\n        this.setState({\r\n            visible_2: true\r\n        })\r\n    }\r\n    handleOk_2 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_2: false,\r\n        })\r\n    }\r\n    handleCancel_2 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_2: false,\r\n        })\r\n    }\r\n    //'본인 예약 삭제'버튼에 대한 메소드\r\n    showModal_3 = () => {\r\n        console.log(this.state.visible_3)\r\n        this.setState({\r\n            visible_3: true\r\n        })\r\n    }\r\n    handleOk_3 = e => {\r\n        console.log(e);\r\n        this.handleRemove();\r\n        this.setState({\r\n            visible_3: false,\r\n        })\r\n    }\r\n    handleCancel_3 = e => {\r\n        console.log(e);\r\n        this.setState({\r\n            visible_3: false,\r\n        })\r\n    }\r\n    shouldComponentUpdate(props) {\r\n        return true\r\n    }\r\n\r\n    //현재 페이지 내에서 파라미터만 변경되었을 경우\r\n    componentWillReceiveProps(newProps) {\r\n        var today = new Date();\r\n        var yy = today.getFullYear();\r\n        yy += ''\r\n        yy = yy.substring(2, 4);\r\n        var mm = today.getMonth() + 1\r\n        var dd = today.getDate()\r\n        if (dd < 10) { dd = '0' + dd }\r\n        var todayInfo = yy + mm + dd;\r\n        console.log(4567)\r\n        console.log(todayInfo)\r\n        if (this.props.match.params !== newProps.match.params) {\r\n            const { apparatusId } = this.props.match.params;\r\n            console.log(apparatusId)\r\n            fetch(serverUrl + '/schedule/' + apparatusId + '/' + todayInfo, {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n            }).then(response => {\r\n                if (response.status === 200) {\r\n                    return response.json()\r\n                } else {\r\n                    // 오류 난 경우 처리\r\n                }\r\n            }).then(response => {\r\n                var newList = []\r\n                if (response == undefined) {\r\n                    this.makeDataSource([])\r\n                }\r\n                else {\r\n                    this.makeDataSource(response.schedules)\r\n                    newList = response.schedules\r\n                }\r\n                this.setState({\r\n                    menu: apparatusId,\r\n                    realReservationList: newList\r\n                })\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    getUrl = (id) => {\r\n        const url = '/apparatus/' + id;\r\n        return (url)\r\n    }\r\n\r\n    //날짜 왼쪽으로 이동하면 해당 날짜에 해당하는 새로운 표출할 예약 필터링\r\n    goToLeft = () => {\r\n        var newday = this.state.todayDate;\r\n        newday.setDate(newday.getDate() - 1);\r\n        var yy = newday.getFullYear();\r\n        yy += ''\r\n        yy = yy.substring(2, 4);\r\n        var mm = newday.getMonth() + 1\r\n        var dd = newday.getDate()\r\n        if (dd < 10) { dd = '0' + dd }\r\n        var newdayInfo = yy + mm + dd;\r\n\r\n        fetch(serverUrl + '/schedule/' + this.state.menu + '/' + newdayInfo, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return response.json()\r\n            } else {\r\n                // 오류 난 경우 처리 \r\n            }\r\n        }).then(response => {\r\n            var newList = []\r\n            if (response == undefined) {\r\n                this.makeDataSource([]);\r\n            }\r\n            else {\r\n                this.makeDataSource(response.schedules);\r\n                newList = response.schedules\r\n            }\r\n            this.setState({\r\n                todayDate: newday,\r\n                realReservationList: newList,\r\n            })\r\n        })\r\n    }\r\n    //날짜 오른쪽 으로 이동하면 해당 날짜에 해당하는 새로운 표출할 예약 필터링\r\n    goToRight = () => {\r\n        var newday = this.state.todayDate;\r\n        newday.setDate(newday.getDate() + 1);\r\n        var yy = newday.getFullYear();\r\n        yy += ''\r\n        yy = yy.substring(2, 4);\r\n        var mm = newday.getMonth() + 1\r\n        var dd = newday.getDate()\r\n        if (dd < 10) { dd = '0' + dd }\r\n        var newdayInfo = yy + mm + dd;\r\n\r\n        fetch(serverUrl + '/schedule/' + this.state.menu + '/' + newdayInfo, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return response.json()\r\n            } else {\r\n                // 오류 난 경우 처리 \r\n            }\r\n        }).then(response => {\r\n            var newList = []\r\n            if (response == undefined) {\r\n                this.makeDataSource([]);\r\n            }\r\n            else {\r\n                this.makeDataSource(response.schedules);\r\n                newList = response.schedules\r\n            }\r\n            this.setState({\r\n                todayDate: newday,\r\n                realReservationList: newList,\r\n            })\r\n        })\r\n    }\r\n\r\n    //예약 삭제\r\n    deleteReservation = (event) => {\r\n        //console.log(this.props.value)\r\n        const { param } = event.target.dataset;\r\n\r\n        //realReservationList 업데이트\r\n        var toDelete = 0\r\n        var newArray = this.state.realReservationList\r\n        for (var i = 0; i < newArray.length; i++) {\r\n            if (newArray[i].id == param) {\r\n                toDelete = i\r\n            }\r\n        }\r\n        newArray.splice(toDelete, 1)\r\n\r\n        //reservationDataSource 업데이트\r\n        var newList = this.state.reservationDataSource;\r\n        for (var i = 0; i < newList.length; i++) {\r\n            console.log(newList[i])\r\n            if (newList[i].id == param) {\r\n                console.log('hereeee')\r\n                newList[i].user = ''\r\n                newList[i].deleteButton = ''\r\n            }\r\n        }\r\n        fetch(serverUrl + '/schedule/' + this.state.menu + '/' + param, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                console.log(\"success\")\r\n                this.setState({\r\n                    realReservationList: newArray,\r\n                    reservationDataSource: newList\r\n                })\r\n            } else {\r\n                // 오류 난 경우 처리 \r\n            }\r\n        })\r\n    }\r\n\r\n    // DataSource형식으로 정제하는 함수\r\n    makeDataSource = (list) => {\r\n        if (list == undefined) {\r\n            list = []\r\n        }\r\n        var newList = list;\r\n        var result = []\r\n        var startHour, startMinute, endHour, endMinute, reserver;\r\n        var now = new Date();\r\n        for (var h = 8, m = true; h <= 22 && m <= 30; h++) {\r\n            var checker = 0;\r\n\r\n            while (checker <= 1) {\r\n                var oneBlock = {}\r\n                var hh, mm; //h,m은 숫자형식의 시간단위, hh,mm은 두음절 짜리 string시간단위\r\n                if (m) { mm = \"00\" } else { mm = \"30\" }\r\n                if (h < 10) { hh = \"0\" + h } else { hh = \"\" + h }\r\n                var time = hh + \":\" + mm\r\n                oneBlock['time'] = time;\r\n                oneBlock['user'] = (<font color=\"white\">none</font>)\r\n                oneBlock['deleteButton'] = (<font color=\"white\">none</font>)\r\n                oneBlock['id'] = 0\r\n\r\n                result.push(oneBlock)\r\n                checker++\r\n                m = (!m)\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < newList.length; i++) {\r\n\r\n            startHour = list[i].startTime['hour']\r\n            startMinute = list[i].startTime['minute']\r\n            endHour = list[i].endTime['hour']\r\n            endMinute = list[i].endTime['minute']\r\n            reserver = list[i].reservation['name']\r\n\r\n\r\n            console.log(\"list[i].id : \" + list[i].id)\r\n\r\n            var checker2 = false;\r\n            var m2;\r\n            for (var j = 0, h = 8, m = true; h <= 22; h++) { //m 이 true면 00분\r\n                var checker = 0;\r\n                while (checker <= 1) {\r\n                    if (m) { mm = \"00\"; m2 = 0 } else { mm = \"30\"; m2 = 30 }\r\n\r\n                    if (startHour == h && startMinute == m2) { //시작 시간이 예약시간과 같으면\r\n                        checker2 = true; //checker2 ON\r\n                    }\r\n                    if (endHour == h && endMinute == m2) { //끝시간이 같으면 \r\n                        checker2 = false; //checker2 OFF\r\n                    }\r\n                    if (checker2) {\r\n                        var checker3 = true;\r\n                        var minute = m ? 0 : 30;\r\n                        result[j]['user'] = reserver\r\n                        // 오늘의 지난시간 버튼 안생김\r\n                        if (h < this.state.todayDate.getHours() && (this.state.todayDate.getMonth() + 1) == (now.getMonth() + 1) && (this.state.todayDate.getDate()) == now.getDate()) { checker3 = false }\r\n                        if (h == this.state.todayDate.getHours() && minute < this.state.todayDate.getMinutes()) { checker3 = false; }\r\n\r\n                        if (checker3 && (reserver === getUser().name)) { // 지난 날짜 버튼 안생김\r\n                            result[j]['deleteButton'] = ((!this.checkReservationDate()) && <Button type=\"link\" icon=\"close-square\" id='deleteButton' data-param={list[i].id} onClick={this.deleteReservation} > </Button>)\r\n                        }\r\n                        result[j]['id'] = list[i].id\r\n                    }\r\n                    checker++; j++\r\n                    m = (!m)\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            reservationDataSource: result\r\n        })\r\n    }\r\n\r\n    makeMonth = () => {\r\n        console.log(this.state)\r\n        var newday = new Date();\r\n        newday = this.state.todayDate;\r\n        return (newday.getMonth() + 1)\r\n    }\r\n\r\n    makeDate = () => {\r\n        var newday = new Date();\r\n        newday = this.state.todayDate;\r\n        return (newday.getDate())\r\n    }\r\n    // 현재 누른 기기의 이름을 받아오는 함수\r\n    getApparNameNow = () => {\r\n        try {\r\n            for (let i = 0; i < this.state.apparatusList.length; i++) {\r\n                if (this.state.apparatusList[i].id == this.state.menu) {\r\n                    return this.state.apparatusList[i].name\r\n                }\r\n            }\r\n            return \"선택 없음\"\r\n\r\n        } catch (e) {\r\n            return \"waiting\"\r\n        }\r\n    }\r\n    // 본인 예약 삭제할 수 있는 함수 \r\n    // handleRemove=()=>{\r\n    //     var newList = [];\r\n    //     newList = this.state.reservationList;\r\n    //     var del = 0;\r\n    //     for(var i = 0; i < newList.length; i++){\r\n    //         if (newList[i].user == getUser().name ){ //유저 네임은 로그인 정보 받아오는 걸로 바꾸기\r\n    //             del = i; break;\r\n    //         }\r\n    //     }\r\n    //     newList.splice(del, 1)\r\n    //     this.setState({\r\n    //         reservationList: newList,\r\n    //     }, () => {\r\n    //         this.setState({\r\n    //             realReservationList: this.getRealReservationList(),\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    // 기기 삭제하는 함수\r\n    handleRemove_2 = () => {\r\n        var newList = [];\r\n        newList = this.state.apparatusList.filter(one => one.id != this.state.menu);\r\n        if (getLab() == null) {\r\n            message.error('가입된 lab이 없습니다.')\r\n            history.push('/mygroup')\r\n        }\r\n        else {\r\n            fetch(serverUrl + '/apparatus/' + getLab().id + '/' + this.state.menu, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n            }).then(response => {\r\n                if (response === 200) {\r\n                    return response.json()\r\n                } else {\r\n                    // 오류 난 경우 처리 \r\n                }\r\n            }).then(response => {\r\n                this.setState({\r\n                    apparatusList: newList,\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    // 현재 날짜의 현재 기기 예약 중 내 예약이 있는지 없는지 -> my 예약 삭제하기 버튼을 표출할지 안할지 정하기 위함\r\n    // checkMyReservation = () => {\r\n    //     var newList = [];\r\n    //     newList = this.state.realReservationList;\r\n\r\n    //     var present = false;\r\n    //     for (var i = 0; i < newList.length; i++) {\r\n    //         if (newList[i].reservation['name'] == getUser().name) { //login user정보 오면 넣기\r\n    //             present = true; break;\r\n    //         }\r\n\r\n    //     }\r\n    //     return (present)\r\n    // }\r\n\r\n\r\n    //하고자 하는 예약 or 삭제하고자 하는 예약이 옛날 건지 확인 \r\n    checkReservationDate = () => {\r\n        var realToday = new Date();\r\n        var nowMonth = realToday.getMonth() + 1\r\n        var nowDate = realToday.getDate();\r\n        var isPast = false;\r\n\r\n        if (this.state.todayDate.getMonth() + 1 < nowMonth) { isPast = true }\r\n        else if (this.state.todayDate.getMonth() + 1 == nowMonth && this.state.todayDate.getDate() < nowDate) {\r\n            isPast = true;\r\n        }\r\n        return (isPast)\r\n    }\r\n\r\n    //기계 클릭하면 페이지 바뀌게 하기\r\n    clickApparatus = (event) => {\r\n        const { param } = event.target.dataset;\r\n\r\n        var today = this.state.todayDate;\r\n        var yy = today.getFullYear();\r\n        yy += ''\r\n        yy = yy.substring(2, 4);\r\n        var mm = today.getMonth() + 1\r\n        var dd = today.getDate()\r\n        if (dd < 10) { dd = '0' + dd }\r\n        var todayInfo = yy + mm + dd;\r\n        console.log('apparatus id: ', param)\r\n        console.log(todayInfo)\r\n\r\n        fetch(serverUrl + '/schedule/' + param + '/' + todayInfo, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return response.json()\r\n            } else {\r\n                // 오류 난 경우 처리 \r\n            }\r\n        }).then(response => {\r\n            var newList = []\r\n            if (response == undefined) {\r\n                this.makeDataSource([])\r\n            }\r\n            else {\r\n                this.makeDataSource(response.schedules)\r\n                newList = response.schedules\r\n            }\r\n            this.setState({\r\n                menu: param,\r\n                realReservationList: newList\r\n            })\r\n        }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div>\r\n                <MenuTitle title=\"Apparatus\" />\r\n                <div style={{ paddingTop: 20 }}>\r\n\r\n                    <Row >\r\n                        <Col span={5} style={{ marginLeft: 10 }}>\r\n                            <List\r\n                                size=\"small\"\r\n                                grid={{ gutter: 16, column: 1 }}\r\n                                dataSource={this.state.apparatusList}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <Button type={(item.id == this.state.menu) ? \"primary\" : \"default\"} style={{ height: 27, width: 87, fontSize: 12 }} id='appartus' data-param={item.id} onClick={this.clickApparatus} >{item.name}</Button>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                            <center>\r\n                                <br></br>\r\n                                <Button type=\"primary\" ghost onClick={this.showModal_1} style={{ width: 75, height: 30, fontSize: 11 }}>\r\n                                    기기 등록\r\n                        </Button> </center>\r\n                            <Modal\r\n                                size=\"small\"\r\n                                title=\"new Apparatus 등록 하기\"\r\n                                visible={this.state.visible_1}\r\n\r\n                                onOk={this.handleOk_1}\r\n                                onCancel={this.handleCancel_1}\r\n\r\n                            >\r\n                                <Form onSubmit={this.handleSubmit} className=\"form\">\r\n                                    <Form.Item>\r\n                                        <center>\r\n                                            {getFieldDecorator('name', {\r\n                                                rules: [{ required: true, message: '등록할 기기 이름을 입력하세요. ' }],\r\n                                            })(\r\n                                                <Input placeholder=\"new apparatue name?\" style={{ width: 200 }} />\r\n                                            )}\r\n                                        </center>\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <center>\r\n                                            <Button type=\"primary\" htmlType=\"submit\" className=\"button\" style={{ height: 35, width: 80, fontSize: 12 }}>\r\n                                                <center>등록 하기</center>\r\n                                            </Button>\r\n                                        </center>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Modal>\r\n                            <p></p>\r\n                            <center>\r\n                                <Button type=\"primary\" ghost onClick={this.showModal_0} style={{ height: 30, width: 75, fontSize: 11 }} > {/*기기 삭제 버튼*/}\r\n                                    기기 삭제\r\n                        </Button>\r\n                            </center>\r\n                            <Modal\r\n                                size=\"small\"\r\n                                title=\"Apparatus 삭제 하기\"\r\n                                visible={this.state.visible_0}\r\n                                onOk={this.handleOk_0}\r\n                                onCancel={this.handleCancel_0}\r\n                            >\r\n                                <p> <center> <Icon type=\"hdd\" style={{ size: 4 }} />     해당 기기를 삭제하시겠습니까? </center> </p>\r\n                                <br></br>\r\n                                <center><p> <font style={{ size: 13, fontWeight: \"bold\" }} > {this.getApparNameNow()} </font> </p></center>\r\n                                <p></p>\r\n                                <p></p>\r\n\r\n                            </Modal>\r\n                        </Col>\r\n                        <Col span={17} style={{ marginLeft: 10, marginRight: 10 }}>\r\n                            {/* 기기들 상세 창 */}\r\n                            <Card>\r\n                                <Row span={1} >\r\n                                    <center>\r\n                                        <Button type=\"link\" onClick={this.goToLeft}><Icon type=\"arrow-left\" /></Button>\r\n                                        {this.makeMonth()}월 {this.makeDate()}일\r\n                                    <Button type=\"link\" onClick={this.goToRight}><Icon type=\"arrow-right\" /></Button>\r\n                                    </center>\r\n                                </Row>\r\n                                <Row span={18}>\r\n                                    {/*시간과 예약현황을 표로 나타내기*/}\r\n                                    <Table width=\"100\" size='small' tableLayout=\"fixed\" locale={{ emptyText: '   ' }} dataSource={this.state.reservationDataSource} columns={this.state.columns} scroll={{ y: 240 }} pagination={{ pageSize: 50 }} />\r\n                                </Row>\r\n                                <Row span={2} style={{ fontSize: 10 }}>\r\n                                    {(!this.checkReservationDate()) &&\r\n                                        <div>\r\n                                            <center>\r\n                                                <Button onClick={this.showModal_2} style={{ fontSize: 12 }}>\r\n                                                    예약 하기\r\n                                    </Button></center>\r\n                                            <Modal\r\n                                                size=\"small\"\r\n                                                title=\"Apparatus 예약 하기\"\r\n                                                visible={this.state.visible_2}\r\n                                                onOk={this.handleOk_2}\r\n                                                onCancel={this.handleCancel_2}\r\n                                            >\r\n                                                <p><Icon type=\"check-circle\" theme=\"filled\" style={{ size: 4 }} />   <font style={{ fontWeight: \"bold\" }}> 예약할 기기: {this.getApparNameNow()} </font> </p>\r\n                                                <p><Icon type=\"check-circle\" theme=\"filled\" style={{ size: 4 }} />   <font style={{ fontWeight: \"bold\" }}>  예약자: {getUser().name}</font> </p>\r\n                                                <p><Icon type=\"clock-circle\" style={{ size: 4 }} /> <font style={{ fontWeight: \"bold\" }}> 예약할 날짜: {this.state.todayDate.getMonth() + 1} 월  {this.state.todayDate.getDate()} 일 </font></p>\r\n                                                <p><Icon type=\"clock-circle\" style={{ size: 4 }} />  <font style={{ fontWeight: \"bold\" }}>예약할 시간: </font> </p>\r\n\r\n                                                <center><ApparatusReservation reservationList={this.state.realReservationList} apparatusId={this.state.menu} todayDate={this.state.todayDate} plusReservation={this.plusReservation} /></center>\r\n                                                <center> ------------------------------------------------</center>\r\n                                                <center><p> <Icon type=\"alert\" theme=\"filled\" sytle={{ size: 5 }} />  주의 사항  <Icon theme=\"filled\" type=\"alert\" sytle={{ size: 5 }} /> </p></center>\r\n                                                <center><p> 1. 예약은 오전8시부터 밤 10시까지 가능합니다. </p></center>\r\n                                                <center><p>            2. 예약은 삼십분 단위로만 가능합니다.        </p> </center>\r\n                                                <center> ------------------------------------------------</center>\r\n\r\n                                            </Modal>\r\n                                        </div>}\r\n                                    {/* <Divider type=\"vertical\" />\r\n                            {(this.checkMyReservation()) && (\r\n                                <div>\r\n                                    <Button onClick={this.showModal_3} >\r\n                                        my예약 삭제하기\r\n                                </Button>\r\n                                    <Modal\r\n                                        title=\"my 예약 삭제하기\"\r\n                                        visible={this.state.visible_3}\r\n                                        onOk={this.handleOk_3}\r\n                                        onCancel={this.handleCancel_3}\r\n\r\n                                    >   <p> ---- 아래 정보의 예약을 삭제 하시겠습니까? ----</p>\r\n                                        <p>예약 기기: {this.getApparNameNow()} </p>\r\n                                        <p>예약자: {getUser().name}</p>\r\n                                        <p>예약 시간: </p>\r\n                                    </Modal>\r\n                                </div>)\r\n                            } */}\r\n                                </Row>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(Apparatus);\r\n","import React, { Component } from 'react';\nimport { Typography, Descriptions, message } from 'antd';\n\nimport ChemicalInfo from './ChemicalInfo';\nimport StockButtons from './StockButtons';\nimport StockInventoryChangeButton from './StockInventoryChangeButton';\n\nimport { serverUrl } from '../setting'\nimport { getUser, getLab } from '../authentication';\n\nconst { Title } = Typography;\n\n//약품 정보 중에서 약품 특성에 대한 박스\nclass StockInfo extends Component {\n\n    state = {\n        showStockInventoryChangeButton : false,\n        suggest : [],\n        notSugget : []\n    }\n\n    constructor(props) {\n        super(props);\n        console.log(this.props.stock)\n        \n    }\n\n    getDateToString( date ){\n        return (date.year + \"/\" + date.monthValue + \"/\" + date.dayOfMonth)\n    }\n\n    //사용\n    changeVolume = (change, unit) => {\n        this.props.changeVolume(this.props.stock.id, change, unit);\n    }\n\n    //삭제\n    deleteStock = () => {\n        this.props.deleteStock(this.props.stock.id)\n    }\n\n    //장소변경 버튼 보여주기\n    showInventoryChangeButton = () => {\n        //여기서 장소 추천을 받아준다\n        //여기서 fetch\n\n        const url = serverUrl + '/chemical/' + getUser().id + '/' + this.props.stock.chemical.id\n        fetch(url, { // uri 넣어주기\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\n        }).then(response => {\n            if( response.status === 200){\n                //이건 정상적으로 된 경우\n                    return response.json()\n            } else {\n                //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n            }\n        }).then(response => {\n            //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n            //여기서 response라는걸 제대로 쓸 수 있음\n            console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\n            //예를들면\n            this.setState({\n                suggest : response.suggest,\n                notSuggest : response.notSuggest,\n                showStockInventoryChangeButton : true\n            })\n        })\n        /*\n\n        var suggest = [{\n            id : \"id3\",\n            name : \"보관함1\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"suggestInventory2\",\n            name : \"보관함2\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"suggestInventory3\",\n            name : \"보관함3\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }]\n        var notSuggest = [{\n            id : \"notSuggestInventory1\",\n            name : \"보관함4\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"notSuggestInventory2\",\n            name : \"보관함5\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }, {\n            id : \"notSuggestInventory3\",\n            name : \"보관함6\",\n            temperature : 20.0,\n            humidity : 0,\n            illuminance : false,\n            oximeter : false,\n            explosion : false\n        }]\n\n        this.setState({\n            showStockInventoryChangeButton : true,\n            suggest : suggest,\n            notSuggest : notSuggest\n        })\n        */\n\n    }\n\n    //장소변경 버튼 없애기\n    blindInventoryChangeButton = () => {\n        this.setState({\n            showStockInventoryChangeButton : false\n        })\n    }\n\n    //장소 변경\n    changeInventory = (newInventoryId) => {\n        this.props.changeInventory(this.props.stock.id, newInventoryId)\n    }\n\n    render() {\n\n        {/*\n            stocks 모양\n        {\n                        id: 3,\n                        nickname: \"nickname6\",\n                        putDate : Date.now(),\n                        expireDate : Date.now(),\n                        volume : 300,\n                        remainingVolume : 300,\n                        chemical: {\n                            id: 30,\n                            name : \"name6\",\n                            status : 1,\n                            meltingPoint : 20.0,\n                            boilingPoint : 30.0\n                        }\n        */}\n        const {stock} = this.props;\n\n        return (\n            <div>\n                {/* 화학적 특성 정보*/}\n                <ChemicalInfo chemical={stock.chemical} />\n                {/* 재고 정보 */}\n                <div style={{ marginBottom: 20, marginTop: 20 }}>\n                    <Descriptions bordered=\"true\" size=\"small\" >\n                        <Descriptions.Item label=\"약품 등록일\">{this.getDateToString(stock.putDate)}</Descriptions.Item>\n                        <Descriptions.Item label=\"약품 유효기간\">{this.getDateToString(stock.expireDate)}</Descriptions.Item>\n                        <Descriptions.Item label=\"사용 후 남은 양\">{stock.remainingVolume}/{stock.volume}</Descriptions.Item>\n                    </Descriptions>\n                </div>\n                {/* 버튼들 */}\n            </div>\n        );\n    }\n}\n\nexport default StockInfo;","import React, { Component } from 'react';\r\nimport { Col, Button, message } from 'antd';\r\nimport { Modal } from 'antd';\r\nimport { getUser, getLab } from '../authentication';\r\nimport StockInfoAlarm from './StockInfoAlarm.js'\r\nimport { serverUrl } from '../setting'\r\n\r\nclass AlarmInfo extends Component {\r\n\r\n  state = {\r\n    visible: false\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n\r\n  handleRemove = () => {\r\n    // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\r\n    const { info, onRemove } = this.props;\r\n    onRemove(info.id, info.alarmType);\r\n    this.deleteFetch();\r\n  }\r\n\r\n  deleteFetch = () => {\r\n    fetch(serverUrl + '/alarm/' + getUser().id +'/'+ this.props.info.alarmType + '/' + this.props.info.id,  {\r\n      method: 'DELETE', //'GET', 'POST', 'DELETE' 등등\r\n      headers: { 'Content-Type': 'application/json' } //안고쳐도 됨\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        //이건 정상적으로 된 경우\r\n      } else {\r\n        //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\r\n      }\r\n    })\r\n  }\r\n  \r\n\r\n  getMessage = () => {\r\n    const { info, onRemove } = this.props;\r\n    if (info.alarmType === 1) {\r\n      if (this.props.info.date > 0) {\r\n        return (\r\n\r\n          <div style={{ fontSize: 16 }}>\r\n            <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n            <br />유효기간이 <b>{this.props.info.date}</b>일 남았습니다.\r\n          <span style={{ marginLeft: 10 }}><Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n            <Modal\r\n              title=\"약품 정보\"\r\n              visible={this.state.visible}\r\n              onOk={this.handleOk}\r\n              onCancel={this.handleCancel}\r\n            >\r\n              {/* 정보 출력  */}\r\n              <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n                changeInventory={this.changeInventory} />\r\n            </Modal>\r\n          </div>\r\n        )\r\n      }\r\n      else if (this.props.info.date === 0){\r\n        return (\r\n\r\n          <div style={{ fontSize: 16 }}>\r\n            <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n            <br />유효기간이 <b>오늘</b>까지 입니다.\r\n          <span style={{ marginLeft: 10 }}><Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n            <Modal\r\n              title=\"약품 정보\"\r\n              visible={this.state.visible}\r\n              onOk={this.handleOk}\r\n              onCancel={this.handleCancel}\r\n            >\r\n              {/* 정보 출력  */}\r\n              <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n                changeInventory={this.changeInventory} />\r\n            </Modal>\r\n          </div>\r\n        )\r\n      }\r\n      else {\r\n        return (\r\n\r\n          <div style={{ fontSize: 16 }}>\r\n            <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n            <br />유효기간이 <b>지났습니다.</b>\r\n            <span style={{ marginLeft: 10 }}><Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n            <Modal\r\n              title=\"약품 정보\"\r\n              visible={this.state.visible}\r\n              onOk={this.handleOk}\r\n              onCancel={this.handleCancel}\r\n            >\r\n              {/* 정보 출력  */}\r\n              <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n                changeInventory={this.changeInventory} />\r\n            </Modal>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    else if (info.alarmType === 2) {\r\n      if (this.props.info.volume !== 0) {\r\n        return (\r\n\r\n          <div style={{ fontSize: 16 }}>\r\n            <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n            <br/>장소 : <b>{this.props.info.place}</b>\r\n            <br/>양이 얼마 남지 않았습니다.\r\n            <span style={{marginLeft : 10}}>  <Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n            <Modal\r\n              title=\"약품 정보\"\r\n              visible={this.state.visible}\r\n              onOk={this.handleOk}\r\n              onCancel={this.handleCancel}\r\n            >\r\n              {/* 정보 출력  */}\r\n              <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n                changeInventory={this.changeInventory} />\r\n            </Modal>\r\n          </div>\r\n        )\r\n      }\r\n      else{\r\n        return (\r\n\r\n          <div style={{ fontSize: 16 }}>\r\n            <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n            <br/>장소 : <b>{this.props.info.place}</b>\r\n            <br/>전부 소진되었습니다.\r\n            <span style={{marginLeft : 10}}>   <Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n            <Modal\r\n              title=\"약품 정보\"\r\n              visible={this.state.visible}\r\n              onOk={this.handleOk}\r\n              onCancel={this.handleCancel}\r\n            >\r\n              {/* 정보 출력  */}\r\n              <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n                changeInventory={this.changeInventory} />\r\n            </Modal>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    else {\r\n     \r\n      return (\r\n\r\n        <div style={{ fontSize: 16 }}>\r\n          <Button type=\"link\" onClick={this.showModal} style={{ fontSize: '18px' }}><b>{this.props.info.name}</b></Button>\r\n          <br /> 사용한지 <b>{this.props.info.period}</b>개월이 지났습니다.\r\n            <br /> 특수 건강진단을 받아야 합니다.\r\n            <span style={{ marginLeft: 10 }}><Button icon=\"close\" onClick={this.handleRemove}></Button></span>\r\n\r\n          <Modal\r\n            title=\"약품 정보\"\r\n            visible={this.state.visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n          >\r\n            {/* 정보 출력  */}\r\n            <StockInfoAlarm stock={this.props.info.stockInfo} changeVolume={this.changeVolume} deleteStock={this.deleteStock}\r\n              changeInventory={this.changeInventory} />\r\n          </Modal>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n\r\n    return (\r\n      <div >\r\n        {this.getMessage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlarmInfo;\r\n","import React, { Component } from 'react';\r\nimport { List, Avatar } from 'antd'\r\nimport AlarmInfo from './AlarmInfo1';\r\nimport { serverUrl } from '../setting'\r\n\r\nclass AlarmInfoList extends Component {\r\n    static defaultProps = {\r\n        data: [],\r\n        onRemove: () => console.warn('onRemove not defined'),\r\n    }\r\n\r\n\r\n    render() {\r\n        const { onRemove } = this.props;\r\n        return (\r\n            <div>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={this.props.data}\r\n                    renderItem={info => (\r\n                        <List.Item>\r\n                            <AlarmInfo key={info.id} info={info} onRemove={onRemove} />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlarmInfoList;   \r\n","import React, { Component } from 'react';\r\nimport { Typography, Row, Col, Button, Card, List, Badge, Icon } from 'antd'\r\nimport AlarmInfoList from './AlarmInfoList';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\nimport MenuTitle from './MenuTitle';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass Alarm extends Component {\r\n\r\n    state = {\r\n        type: 1,\r\n        information: [],\r\n        alarm1Count: 0,\r\n        alarm2Count: 0,\r\n        alarm3Count: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /*\r\n        var information = [\r\n            {\r\n                id: 0,\r\n                name: 'Hexane',\r\n                date: '15',\r\n                alarmType : 1\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Benzeqwene',\r\n                date: '10',\r\n                volume : 5,\r\n                alarmType : 1\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Hexane',\r\n                place : '냉장고',\r\n                volume : 0,\r\n                alarmType : 2\r\n              },\r\n              {\r\n                 id: 4,\r\n                 name: 'Benzene',\r\n                 place : '오븐',\r\n                 alarmType : 2\r\n              },\r\n              {\r\n                  id: 6,\r\n                  name: 'Benzenecwqwsd',\r\n                  use : '3개월',\r\n                  disease : \"간암\",\r\n                  alarmType : 3\r\n               },\r\n        ] \r\n        */\r\n\r\n        fetch(serverUrl + '/alarm/' + getUser().id, {\r\n            method: 'GET', //'GET', 'POST', 'DELETE' 등등\r\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                //이건 정상적으로 된 경우\r\n                console.log(33333333333)\r\n                console.log(response.alarms)\r\n                response.json().then(response => {\r\n                    var list = response.alarms\r\n                    var Qinformation = []\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (list[i].alarmType === 1) {\r\n                            var a = {\r\n                                alarmType: list[i].alarmType,\r\n                                id: list[i].stock.id,\r\n                                name: list[i].stock.nickname,\r\n                                date: list[i].left,\r\n                                stockInfo: list[i].stock\r\n                            }\r\n                            Qinformation.push(a)\r\n                        }\r\n                        else if (list[i].alarmType === 2) {\r\n                            var a = {\r\n                                alarmType: list[i].alarmType,\r\n                                id: list[i].stock.id,\r\n                                name: list[i].stock.nickname,\r\n                                place: list[i].inventory.name,\r\n                                volume: list[i].stock.remainingVolume,\r\n                                stockInfo: list[i].stock\r\n                            }\r\n                            Qinformation.push(a)\r\n                        }\r\n                        else {\r\n                            var a = {\r\n                                alarmType: list[i].alarmType,\r\n                                id: list[i].stock.id,\r\n                                name: list[i].stock.nickname,\r\n                                period: list[i].left,\r\n                                stockInfo: list[i].stock\r\n                            }\r\n\r\n                            Qinformation.push(a)\r\n                        }\r\n                    }\r\n                    console.log(Qinformation)\r\n                    console.log('filter test')\r\n                    console.log(Qinformation.filter(value => value.alarmType === 1).length)\r\n                    this.setState({\r\n                        type: 1,\r\n                        information: Qinformation,\r\n                        alarm1Count: Qinformation.filter(value => value.alarmType === 1).length,\r\n                        alarm2Count: Qinformation.filter(value => value.alarmType === 2).length,\r\n                        alarm3Count: Qinformation.filter(value => value.alarmType === 3).length\r\n\r\n                    })\r\n                })\r\n            } else {\r\n                //가져올 알람이 없을 경우\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    handleRemove = (id, alarmType) => {\r\n        const { information } = this.state;\r\n        var type1Count = this.state.alarm1Count;\r\n        var type2Count = this.state.alarm2Count;\r\n        var type3Count = this.state.alarm3Count;\r\n        if (alarmType === 1) {\r\n            type1Count -= 1;\r\n        }\r\n        else if (alarmType === 2) {\r\n            type2Count -= 1;\r\n        }\r\n        else if (alarmType === 3) {\r\n            type3Count -= 1;\r\n        }\r\n        const new_information = information.filter(info => !((info.id === id) && (info.alarmType === alarmType)))\r\n        this.setState({\r\n            information: new_information,\r\n            alarm1Count: type1Count,\r\n            alarm2Count: type2Count,\r\n            alarm3Count: type3Count\r\n        })\r\n    }\r\n\r\n\r\n\r\n    makeTypeOne = () => {\r\n        this.setState({ type: 1 })\r\n    }\r\n\r\n    makeTypeTwo = () => {\r\n        this.setState({ type: 2 })\r\n    }\r\n\r\n    makeTypeThree = () => {\r\n        this.setState({ type: 3 })\r\n    }\r\n\r\n    function = (value) => {\r\n        return value.alarmType\r\n    }\r\n\r\n    getContent = () => {\r\n        return (<div><AlarmInfoList data={this.state.information.filter(value => value.alarmType === this.state.type)} onRemove={this.handleRemove} /></div>)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                    <MenuTitle title=\"Alarm\" />\r\n                    <div style={{ paddingTop: 20 }}>\r\n\r\n                    <Row style={{ marginBottom: 30 }}>\r\n                        <Col span={8}><center>\r\n                            <Badge count={this.state.alarm1Count}>\r\n                                <Button Button shape=\"circle\" icon=\"bell\" onClick={this.makeTypeOne} style={{ fontSize: '25px' }} size=\"large\" /><br />\r\n                            </Badge>\r\n                            <div>\r\n                                <font size='2' >유효기간</font>\r\n                            </div>\r\n                        </center></Col>\r\n\r\n                        <Col span={8}><center>\r\n                            <Badge count={this.state.alarm2Count}>\r\n                                <Button Button shape=\"circle\" icon=\"bell\" onClick={this.makeTypeTwo} style={{ fontSize: '25px' }} size=\"large\" /><br />\r\n                            </Badge>\r\n                            <div>\r\n                                <font size='2' >재고소진</font>\r\n                            </div>\r\n                        </center></Col>\r\n\r\n                        <Col span={8}><center>\r\n                            <Badge count={this.state.alarm3Count}>\r\n                                <Button Button shape=\"circle\" icon=\"bell\" onClick={this.makeTypeThree} style={{ fontSize: '25px' }} size=\"large\" /><br />\r\n                            </Badge>\r\n                            <div>\r\n                                <font size='2' > 의심질병</font>\r\n                            </div>\r\n                        </center></Col>\r\n                    </Row>\r\n\r\n                    <Card style={{ margin: 10 }}>\r\n                        {this.getContent()}\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alarm;\r\n","import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, message } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from 'antd';\r\nimport { history } from '../History';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupGenerate extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  //그룹 생성 버튼 클릭했을 때\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      console.log(222222);\r\n      if (!err) {\r\n        //그룹 생성 정보\r\n        console.log(values)\r\n        const registInformation = {\r\n          name: values.groupName,\r\n          password: values.groupPassword,\r\n        }\r\n        console.log(registInformation)\r\n        //http요청\r\n        fetch(serverUrl + '/lab/' + getUser().id, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(registInformation)\r\n        }).then(response => {\r\n          if (response.status === 200) {\r\n            //그룹 생성이 성공적으로 수행 되었을 경우\r\n            message.success('그룹이 생성되었습니다!');\r\n            response.json().then(response => {\r\n              console.log(555)\r\n              localStorage.setItem('lab', JSON.stringify(response.lab));\r\n              this.props.afterGroupGenerate(getLab().id);\r\n\r\n            })\r\n          }\r\n          else {\r\n            message.warning('중복된 my Lab 이름이 존재합니다!');\r\n          }\r\n\r\n        })\r\n      } else {\r\n        //비밀번호 틀렸을 경우\r\n      }\r\n    });\r\n  };\r\n\r\n  //비밀번호 두개 일치하는지 확인\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('groupPassword')) {\r\n      callback('두 비밀번호가 일치하지 않습니다!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    form.validateFields(['confirm'], { force: true });\r\n    callback();\r\n  };\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div>\r\n      <center><font size='4' >my Lab 생성<span> </span> <Icon type=\"contacts\"style={{size: 4}} /></font></center><br/>\r\n      <Form onSubmit={this.handleSubmit} className=\"form\">\r\n\r\n      {/* 그룹 이름 */}\r\n      <Form.Item>\r\n      {getFieldDecorator('groupName', {\r\n        rules: [{ required: true, message: '그룹 이름을 입력해 주세요!' }],\r\n      })(\r\n        <Input\r\n        prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n        placeholder=\"my Lab Name\"\r\n        />,\r\n      )}\r\n      </Form.Item>\r\n\r\n      {/* 그룹 비밀번호1 */}\r\n      <Form.Item hasFeedback>\r\n      {getFieldDecorator('groupPassword', {\r\n        rules: [\r\n          {\r\n            required: true,\r\n            message: '비밀번호를 입력해 주세요!',\r\n          },\r\n          {\r\n            validator: this.validateToNextPassword,\r\n          },\r\n        ],\r\n      })(<Input.Password\r\n        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n        placeholder=\"my Lab Password\" />)}\r\n        </Form.Item>\r\n\r\n        {/* 비밀번호2 */}\r\n        <Form.Item hasFeedback>\r\n        {getFieldDecorator('confirm', {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: '비밀번호를 다시 한번 입력해 주세요!',\r\n            },\r\n            {\r\n              validator: this.compareToFirstPassword,\r\n            },\r\n          ],\r\n        })(<Input.Password\r\n          prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n          placeholder=\"Confirm my Lab Password\"\r\n          onBlur={this.handleConfirmBlur} />)}\r\n          </Form.Item>\r\n\r\n          {/* 그룹 생성 버튼 */}\r\n          <Form.Item>\r\n            <center>\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"button\" style={{width: 80}}>\r\n          생성하기\r\n          </Button>\r\n          </center>\r\n          </Form.Item>\r\n\r\n          </Form>\r\n\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    export default Form.create()(MyGroupGenerate);\r\n","import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, Modal, message } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from 'antd';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { history } from '../History';\r\nimport { serverUrl } from '../setting';\r\nimport { Alert } from 'antd';\r\n\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupInvite extends Component {\r\n\r\n  state = { visible: false };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  \r\n  \r\n\r\n  searchMember = (email) => {\r\n    console.log(3)\r\n    console.log(email)\r\n    fetch(serverUrl + '/member/' + email, {\r\n      method: 'GET', //'GET', 'POST', 'DELETE' 등등\r\n      headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        //이건 정상적으로 된 경우\r\n\r\n        response.json().then(response => {\r\n          console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\r\n          var a = response.member\r\n          var userId = a.id\r\n          var labId = getLab().id\r\n\r\n          fetch(serverUrl + '/lab/' + labId + '/' + userId, {\r\n            method: 'PUT', //'GET', 'POST', 'DELETE' 등등\r\n            headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n          }).then(response => {\r\n            if (response.status === 200) {\r\n              //이건 정상적으로 된 경우\r\n              message.success('성공적으로 초대되었습니다!');\r\n            } else {\r\n              console.log('fetch error')\r\n              message.warning('해당 멤버는 이미 속해있는 Lab이 있습니다!');\r\n            }\r\n          }).then(response => {\r\n\r\n          })\r\n\r\n        })\r\n      } else {\r\n        console.log('fetch error')\r\n        message.warning('해당 이메일을 가진 멤버가 존재하지 않습니다!');\r\n      }\r\n    }).then(response => { })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n        if (!err) {\r\n          console.log(values)\r\n          //values.email\r\n          this.searchMember(values.email)\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div style={{ margin: '10px 0' }}>\r\n        <center>\r\n          <Icon type=\"user-add\"   style={{ fontSize: 33 }} />\r\n          <Title style={{ marginBottom: 30 }}><font size='4' font color='black'>멤버 초대  </font></Title>\r\n        </center>\r\n\r\n        <Form onSubmit={this.handleSubmit} className=\"form\">\r\n          {/* 이메일 폼*/}\r\n          <Form.Item>\r\n            {getFieldDecorator('email', {\r\n              rules: [{ required: true, message: '이메일을 입력 해 주세요!' }],\r\n            })(\r\n              <Input\r\n                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                placeholder=\"Email\"\r\n              />,\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {/*<Link to='/login/forgot' className=\"login-form-forgot\">Forgot password</Link>*/}\r\n            <center>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"button\" style={{width: 80}}>\r\n              초대하기\r\n            </Button>\r\n            </center>\r\n            \r\n          </Form.Item>\r\n        </Form>\r\n\r\n                \r\n               \r\n               \r\n               \r\n               \r\n                \r\n                \r\n                {/* \r\n                <Form.Item>\r\n                    {getFieldDecorator('memberName', {\r\n                        rules: [{ required: true, message: '초대할 멤버 이메일을 입력해 주세요!' }],\r\n                    })(\r\n                        <Input\r\n                            //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            placeholder=\"Member Email\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                */}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(MyGroupInvite);\r\n","import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from 'antd';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { history } from '../History';\r\nimport { serverUrl } from '../setting';\r\nimport { login } from '../authentication';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupRegister extends Component {\r\n\r\n  state = { visible: false };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log(values)\r\n        const registInformation = {\r\n          name: values.groupName,\r\n          password: values.password,\r\n        }\r\n        fetch(serverUrl + '/lab/' + getUser().id, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(registInformation)\r\n        }).then(response => {\r\n          if (response.status === 200) {\r\n            //가입이 성공적으로 수행 되었을 경우\r\n            message.success('Lab의 맴버가 되신 것을 환영합니다!');\r\n            response.json().then(response => {\r\n              localStorage.setItem('lab', JSON.stringify(response.lab));\r\n              this.props.afterGroupGenerate(getUser().id);\r\n            })\r\n          } \r\n          else if (response.status === 400) {\r\n            //그룹 이름이 없을 경우\r\n            message.warning('해당 이름을 가진 Lab이 존재하지 않습니다!');\r\n          }\r\n          else {\r\n            //패스워드가 틀릴 경우\r\n            message.warning('패스워드가 올바르지 않습니다!');\r\n          }\r\n        })\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    form.validateFields(['confirm'], { force: true });\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className=\"form\">\r\n        <center><font size='4' >my Lab 가입 신청</font></center><br/>\r\n        {/* 이름 */}\r\n        <Form.Item> \r\n          {getFieldDecorator('groupName', {\r\n            rules: [{ required: true, message: '그룹 이름을 입력해 주세요!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"my Lab Name\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n\r\n        {/* 비밀번호 */}\r\n        <Form.Item hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true, message: '비밀번호를 입력 해 주세요!',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password\r\n            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n            placeholder=\"my Lab Password\" />)}\r\n        </Form.Item>\r\n\r\n        {/* 가입 버튼 */}\r\n        <Form.Item>\r\n          <center>\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"button\" style={{width: 80}}>\r\n            가입 신청\r\n          </Button>\r\n          </center>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(MyGroupRegister);\r\n","import React, { Component } from 'react';\r\nimport { Modal, Form, Button, Icon } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport { history } from '../History';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\nconst { Title } = Typography;\r\nconst { Text } = Typography;\r\n\r\nclass MyGroupWithdraw extends Component {\r\n\r\n  state = { visible: false };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n    this.withdrawGroup();\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n\r\n  withdrawGroup = () => {\r\n\r\n    fetch(serverUrl + '/lab/' + getLab().id + '/' + getUser().id, { // uri 넣어주기\r\n      method: 'DELETE', //'GET', 'POST', 'DELETE' 등등\r\n      headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        console.log(11112222)\r\n        localStorage.removeItem('lab')\r\n        this.props.afterGroupWithdraw()\r\n\r\n      } else {\r\n        //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\r\n      }\r\n    }).then(response => {})\r\n  }\r\n\r\n  render() {\r\n    //const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div style={{ margin: '10px 0' }}>\r\n      <center><Icon type=\"rocket\"   style={{ fontSize: 33 }}  /><Title style={{marginBottom : 30}}><font size='4' font color='black'>my Lab 탈퇴</font></Title></center>\r\n\r\n      <font size='3' >현재 속한 my Lab 이름 :  \r\n      </font><font size='3' font color='black'> {getLab().name} </font>\r\n      <br /><br/><font size='3' >현재 속한 my Lab 인원 수 :  \r\n      </font><font size='3' font color='black'> {this.props.count}명 </font>\r\n\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <center>\r\n      <Button type=\"primary\" onClick={this.showModal} style={{width: 80}}>\r\n      탈퇴하기\r\n      </Button>\r\n      </center>\r\n      \r\n      <Modal\r\n      title=\"탈퇴 경고 메세지\"\r\n      visible={this.state.visible}\r\n      onOk={this.handleOk} \r\n      onCancel={this.handleCancel}\r\n      >\r\n      <p><center><font size='3' color='black'><b>정말 탈퇴하시겠습니까?</b></font></center></p>\r\n      <p><center><font size='2' color='black'> 기기 예약, 알림 등의 정보가 모두 삭제 됩니다!</font></center></p>\r\n\r\n      </Modal>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(MyGroupWithdraw);\r\n","import React, { Component } from 'react';\nimport { Icon } from 'antd';\n\n//화학 약품 하나에 대한 거 (my Lab 화면 중에)\nclass Member extends Component {\n\n    state = {\n        visible: false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <span>\n                <center>\n                    <Icon type=\"smile\" theme=\"twoTone\" twoToneColor=\"#5BC7AE\" style={{fontSize : 35}} />\n                </center>\n                <center>\n                <font size='2.5' font color='black'>{this.props.members.name}</font>\n                </center>\n            </span>\n        );\n    }\n}\n\nexport default Member;\n","import React, { Component } from 'react';\r\nimport { Form } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Typography} from 'antd';\r\nimport Member from './Member';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupMember extends Component {\r\n\r\n  state = {\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      {/* 약품 목록에서 각각 하나의 원소에 대한 Chemical 클래스 */}\r\n      <center style={{marginBottom: 30}}><font size='4' font color='black'> <b>{getLab().name} lab 멤버들 </b></font></center>\r\n      <List\r\n      grid={{ gutter: 16, column: 3 }}\r\n      dataSource={this.props.members}\r\n      renderItem={item => (\r\n        <List.Item>\r\n        <Member members={item}/>\r\n        </List.Item>\r\n      )}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Form.create()(MyGroupMember);\r\n","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\n\nconst { Title } = Typography;\nconst { Text } = Typography;\n\nclass MyGroupWithdraw extends Component {\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <center>\n      <font size='2' >현재 속해있는 my Lab이 없습니다!</font></center>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(MyGroupWithdraw);\n","import React, { Component } from 'react';\r\nimport { Typography, Row, Col, Button, Card, Icon, message } from 'antd'\r\n\r\nimport MyGroupGenerate from './MyGroupGenerate';\r\nimport MyGroupInvite from './MyGroupInvite';\r\nimport MyGroupRegister from './MyGroupRegister';\r\nimport MyGroupWithdraw from './MyGroupWithdraw';\r\nimport MyGroupMember from './MyGroupMember';\r\nimport NoGroup from './NoGroup';\r\nimport MenuTitle from './MenuTitle';\r\n\r\nimport { history } from '../History';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroup extends Component {\r\n\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menu: 0,\r\n      labexists: getLab() === null ? false : true,\r\n      // false 도 테스트해보기\r\n      // 속한 lab이 없을 때, labid = 0\r\n      members: []\r\n\r\n\r\n    }\r\n    if (getLab() !== null) {\r\n      this.getGroupMembers()\r\n    }\r\n  }\r\n\r\n  getGroupMembers = () => {\r\n    fetch(serverUrl + '/lab/' + getLab().id, {\r\n      method: 'GET', //'GET', 'POST', 'DELETE' 등등\r\n      headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        //이건 정상적으로 된 경우\r\n        response.json().then(response => {\r\n          console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\r\n          var get = response.lab\r\n          var members = []\r\n          for (var i = 0; i < get.members.length; i++) {\r\n            var a = {\r\n              id: get.members[i].id,\r\n              name: get.members[i].name\r\n            }\r\n            members.push(a)\r\n          }\r\n\r\n          this.setState({\r\n            members: members\r\n\r\n          })\r\n\r\n        })\r\n      } else {\r\n        //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\r\n      }\r\n    }).then(response => { })\r\n  }\r\n\r\n  //그룹 생성하고 나서 정보 새로고침 해주\r\n  afterGroupGenerate = (id) => {\r\n    console.log(id)\r\n    this.setState({\r\n      menu: 0,\r\n      labexists: id === null ? false : true\r\n    })\r\n    this.getGroupMembers()\r\n  }\r\n\r\n  afterGroupWithdraw = () => {\r\n    console.log(333)\r\n    this.setState({\r\n      menu: 0,\r\n      labexists: false\r\n    })\r\n    //this.getGroupMembers()\r\n  }\r\n\r\n\r\n  firstButtonClick = () => {\r\n    this.setState({\r\n      menu: 1\r\n    })\r\n  }\r\n\r\n  firstButtonClick2 = () => {\r\n    this.setState({\r\n      menu: 1\r\n    })\r\n    message.warning('이미 가입된 my Lab이 있습니다!')\r\n    this.getGroupMembers()\r\n  }\r\n\r\n  secondButtonClick = () => {\r\n    this.setState({\r\n      menu: 2\r\n    })\r\n  }\r\n\r\n  thirdButtonClick = () => {\r\n    this.setState({\r\n      menu: 3\r\n    })\r\n  }\r\n\r\n  thirdButtonClick2 = () => {\r\n    this.setState({\r\n      menu: 3\r\n    })\r\n    message.warning('이미 가입된 my Lab이 있습니다!')\r\n    this.getGroupMembers()\r\n  }\r\n\r\n  fourthButtonClick = () => {\r\n    this.setState({\r\n      menu: 4\r\n    })\r\n    if (getLab() !== null) {\r\n      this.getGroupMembers()\r\n    }\r\n  }\r\n\r\n  enrollLab = (id) => {\r\n    this.setState({\r\n      labId: id,\r\n      labexists: true\r\n    })\r\n  }\r\n\r\n  withdrawLab = () => {\r\n    this.setState({\r\n      labId: 0,\r\n      labexists: false\r\n    })\r\n  }\r\n\r\n  getContent = () => {\r\n    if (!this.state.labexists && this.state.menu === 1) {\r\n      return (\r\n        <div>\r\n          <MyGroupGenerate afterGroupGenerate={this.afterGroupGenerate} />\r\n        </div>\r\n      )\r\n    } else if (this.state.labexists && this.state.menu === 2) {\r\n      return (\r\n        <div>\r\n          <MyGroupInvite />\r\n        </div>\r\n      )\r\n    } else if (!this.state.labexists && this.state.menu === 3) {\r\n      return (\r\n        <div>\r\n          <MyGroupRegister enrollLab={this.enrollLab} afterGroupGenerate={this.afterGroupGenerate} />\r\n        </div>\r\n      )\r\n    } else if (this.state.labexists && this.state.menu === 4) {\r\n      return (\r\n        <div>\r\n          <MyGroupWithdraw afterGroupWithdraw={this.afterGroupWithdraw} count={this.state.members.length} />\r\n        </div>\r\n      )\r\n    } else {\r\n      if (this.state.labexists) {\r\n        return (\r\n          <div>\r\n            <MyGroupMember members={this.state.members} />\r\n          </div>\r\n        )\r\n      }\r\n      else {\r\n        return (\r\n          <div>\r\n            <NoGroup />\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (getLab() === null) {\r\n      return (\r\n        <div>\r\n\r\n          <MenuTitle title=\"my Lab\" />\r\n          <div style={{ paddingTop: 20 }}>\r\n\r\n            {/* 버튼 4개 */}\r\n            <Row style={{ margin: 20 }}>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.firstButtonClick}>my Lab 생성<Icon type=\"contacts\" style={{ size: 4 }} /></Button></center></Col>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.secondButtonClick} >멤버 초대 <Icon type=\"user-add\" style={{ size: 3 }} /></Button></center></Col>\r\n            </Row>\r\n\r\n            <Row style={{ margin: 20 }}>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.thirdButtonClick} >my Lab 가입 신청</Button></center></Col>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.fourthButtonClick} >my Lab 탈퇴<Icon type=\"rocket\" style={{ size: 3 }} /></Button></center></Col>\r\n            </Row>\r\n\r\n            {/* 내용 */}\r\n            <div>\r\n              <Card style={{ margin: 20 }}>\r\n                {this.getContent()}\r\n              </Card>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div>\r\n\r\n          <MenuTitle title=\"my Lab\" />\r\n          <div style={{ paddingTop: 20 }}>\r\n\r\n            {/* 버튼 4개 */}\r\n            <Row style={{ margin: 20 }}>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.firstButtonClick2}>my Lab 생성<Icon type=\"contacts\" style={{ size: 4 }} /></Button></center></Col>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.secondButtonClick} >멤버 초대<Icon type=\"user-add\" style={{ size: 3 }} /></Button></center></Col>\r\n            </Row>\r\n\r\n            <Row style={{ margin: 20 }}>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.thirdButtonClick2} >my Lab 가입 신청</Button></center></Col>\r\n              <Col span={12}><center><Button style={{ width: 140 }} type=\"primary\" onClick={this.fourthButtonClick} >my Lab 탈퇴<Icon type=\"rocket\" style={{ size: 3 }} /></Button></center></Col>\r\n            </Row>\r\n\r\n            {/* 내용 */}\r\n            <div>\r\n              <Card style={{ margin: 20 }}>\r\n                {this.getContent()}\r\n              </Card>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default MyGroup;\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Header from './Header';\nimport MenuBar from './MenuBar'\n\nimport MyLab from './MyLab';\nimport Apparatus from './Apparatus';\nimport Alarm from './Alarm';\nimport MyGroup from './MyGroup';\n\n\nclass Main extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0 };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n\n    render() {\n\n        const header = 60;\n        const menubar = 85;\n        const body = this.state.height - header - menubar\n\n        const heights = {\n            header: header,\n            menubar: menubar,\n            body: body\n        }\n\n        return (\n            <div>\n                {/* 헤더 */}\n                <Header height={heights.header} width={this.state.width} />\n\n                {/* 바디 background : 'rgb(35, 41, 48)' */}\n                <div style={{ overflowX: 'auto', height: heights.body,  background : '#F2F2F2', width : this.state.width-0.00001}}>\n                    <Switch>\n                        <Route path='/mylab' component={MyLab} />\n                        <Route path='/apparatus/:apparatusId' component={Apparatus} />\n                        <Route path='/alarm' component={Alarm} />\n                        <Route path='/mygroup' component={MyGroup} />\n                    </Switch>\n                </div>\n\n                {/* 메뉴바 */}\n                <div style={{borderTop : 'solid 15px', borderBottom : 'solid 16px',borderColor : 'rgb(35, 41, 48)', background: 'rgb(35, 41, 48)'}}>\n                    <MenuBar />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport { Router, Route, Switch } from \"react-router-dom\";\n\nimport { history } from './History';\nimport { PrivateRoute } from './PrivateRoute';\n\nimport LoginAndRegister from './components/LoginAndRegister';\nimport Main from './components/Main';\n\nimport './App.css';\n//import './App2.css';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router history={history}>\n          <Switch>\n            {/* 로그인 & 회원가입 */}\n            <Route path='/login' exact component={LoginAndRegister} /> \n            <Route path='/register' exact component={LoginAndRegister} />\n\n            {/* /로 시작하는 모든 경로는 Main으로 라우팅 */}\n            <PrivateRoute path='/' component={Main} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}