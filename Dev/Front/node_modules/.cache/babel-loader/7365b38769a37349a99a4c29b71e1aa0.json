{"ast":null,"code":"var _jsxFileName = \"/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupRegister.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nimport { login } from '../authentication';\nconst Title = Typography.Title;\n\nclass MyGroupRegister extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCancel = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n          //따로 가공해줄 필요 없이 바로 http 요청을 보낸다\n          console.log(values);\n          fetch(serverUrl + '/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //로그인이 성공하였을 경우\n              response.json().then(response => {\n                //로컬스토리지에 토큰 및 로그인 정보 저장\n                login(response);\n                console.log(response);\n                message.success(response.user.name + '그룹 가입에 성공하였습니다!');\n                this.props.enrollLab(3);\n                history.push(\"/main\");\n              });\n            } else if (result === 401) {\n              //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n              message.error('그룹 가입 신청에 실패하였습니다. 그룹 이름 혹은 그룹 비밀번호를 다시 확인해 주세요.');\n              console.log(\"fail!\");\n            } else {//내부 오류\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Lab \\uAC00\\uC785 \\uC2E0\\uCCAD\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, getFieldDecorator('LabName', {\n      rules: [{\n        required: true,\n        message: 'Lab 이름을 입력해 주세요!'\n      }]\n    })(React.createElement(Input //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n    , {\n      placeholder: \"Lab Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '그룹 비밀번호를 입력해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }),\n      type: \"Group Password\",\n      placeholder: \"Group Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"\\uAC00\\uC785 \\uC2E0\\uCCAD\"), React.createElement(Modal, {\n      title: \"\\uAC00\\uC785 \\uC2E0\\uCCAD\",\n      visible: this.state.visible,\n      onOk: this.handleOk,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"\\uC5D0 \\uAC00\\uC785\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupRegister);","map":{"version":3,"sources":["/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupRegister.js"],"names":["React","Component","Form","Icon","Input","Button","message","Modal","Link","Typography","history","serverUrl","login","Title","MyGroupRegister","state","visible","showModal","setState","handleOk","e","console","log","handleCancel","handleSubmit","preventDefault","props","form","validateFields","err","values","fetch","method","headers","body","JSON","stringify","then","response","result","status","json","success","user","name","enrollLab","push","error","render","getFieldDecorator","marginBottom","rules","required","color","create"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,KAA7C,QAA0D,MAA1D;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,KAAT,QAAsB,mBAAtB;MAEQC,K,GAAUJ,U,CAAVI,K;;AAER,MAAMC,eAAN,SAA8Bb,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCc,KAFsC,GAE9B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAF8B;;AAAA,SAItCC,SAJsC,GAI1B,MAAM;AAChB,WAAKC,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KARqC;;AAAA,SAUtCG,QAVsC,GAU3BC,CAAC,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAKF,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAfqC;;AAAA,SAiBtCO,YAjBsC,GAiBvBH,CAAC,IAAI;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAKF,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAtBqC;;AAAA,SA0BtCQ,YA1BsC,GA0BvBJ,CAAC,IAAI;AAChBA,MAAAA,CAAC,CAACK,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,cAAhB,CAA+B,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC5C,YAAI,CAACD,GAAL,EAAU;AACN;AACA;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ;AACAC,UAAAA,KAAK,CAACpB,SAAS,GAAG,QAAb,EAAuB;AACxBqB,YAAAA,MAAM,EAAE,MADgB;AAExBC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAFe;AAGxBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAHkB,WAAvB,CAAL,CAKKO,IALL,CAKUC,QAAQ,IAAI;AACd,kBAAMC,MAAM,GAAGD,QAAQ,CAACE,MAAxB;;AACA,gBAAID,MAAM,KAAK,GAAf,EAAoB;AAChB;AACAD,cAAAA,QAAQ,CAACG,IAAT,GAAgBJ,IAAhB,CAAqBC,QAAQ,IAAI;AAC7B;AACA1B,gBAAAA,KAAK,CAAC0B,QAAD,CAAL;AACAjB,gBAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACAhC,gBAAAA,OAAO,CAACoC,OAAR,CAAgBJ,QAAQ,CAACK,IAAT,CAAcC,IAAd,GAAqB,iBAArC;AACA,qBAAKlB,KAAL,CAAWmB,SAAX,CAAqB,CAArB;AACAnC,gBAAAA,OAAO,CAACoC,IAAR,CAAa,OAAb;AACH,eAPD;AAQH,aAVD,MAUO,IAAIP,MAAM,KAAK,GAAf,EAAoB;AACvB;AACAjC,cAAAA,OAAO,CAACyC,KAAR,CAAc,kDAAd;AACA1B,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,aAJM,MAIA,CACH;AACH;AACJ,WAxBL;AAyBH;AACJ,OA/BD;AAgCH,KA5DqC;AAAA;;AAgEtC0B,EAAAA,MAAM,GAAG;AAAA,UACGC,iBADH,GACyB,KAAKvB,KAAL,CAAWC,IADpC,CACGsB,iBADH;AAEL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAG;AAAhB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAR,CADF,EAGM,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,iBAAiB,CAAC,SAAD,EAAY;AAC1BE,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,QAAQ,EAAE,IAAZ;AAAkB9C,QAAAA,OAAO,EAAE;AAA3B,OAAD;AADmB,KAAZ,CAAjB,CAGG,oBAAC,KAAD,CACI;AADJ;AAEI,MAAA,WAAW,EAAC,UAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CADL,CAHN,EAeM,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK2C,iBAAiB,CAAC,UAAD,EAAa;AAC3BE,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,QAAQ,EAAE,IAAZ;AAAkB9C,QAAAA,OAAO,EAAE;AAA3B,OAAD;AADoB,KAAb,CAAjB,CAGG,oBAAC,KAAD;AACI,MAAA,MAAM,EAAE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAE;AAAE+C,UAAAA,KAAK,EAAE;AAAT,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADZ;AAEI,MAAA,IAAI,EAAC,gBAFT;AAGI,MAAA,WAAW,EAAC,gBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CADL,CAfN,EA2BM,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAE,KAAKpC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA3BN,EA8BM,oBAAC,KAAD;AACA,MAAA,KAAK,EAAC,2BADN;AAEA,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,OAFpB;AAGA,MAAA,IAAI,EAAE,KAAKG,QAHX;AAIA,MAAA,QAAQ,EAAE,KAAKI,YAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEANA,CA9BN,CADF;AA0CH;;AA5GqC;;AA+GxC,eAAerB,IAAI,CAACoD,MAAL,GAAcxC,eAAd,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nimport { login } from '../authentication';\n\nconst { Title } = Typography;\n\nclass MyGroupRegister extends Component {\n\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n\n  //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\n  handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n          if (!err) {\n              //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n              //따로 가공해줄 필요 없이 바로 http 요청을 보낸다\n              console.log(values)\n              fetch(serverUrl + '/login', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify(values)\n              })\n                  .then(response => {\n                      const result = response.status;\n                      if (result === 200) {\n                          //로그인이 성공하였을 경우\n                          response.json().then(response => {\n                              //로컬스토리지에 토큰 및 로그인 정보 저장\n                              login(response)\n                              console.log(response)\n                              message.success(response.user.name + '그룹 가입에 성공하였습니다!');\n                              this.props.enrollLab(3);\n                              history.push(\"/main\")\n                          })\n                      } else if (result === 401) {\n                          //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n                          message.error('그룹 가입 신청에 실패하였습니다. 그룹 이름 혹은 그룹 비밀번호를 다시 확인해 주세요.');\n                          console.log(\"fail!\")\n                      } else {\n                          //내부 오류\n                      }\n                  })\n          }\n      });\n  };\n\n\n\n  render() {\n      const { getFieldDecorator } = this.props.form;\n      return (\n        <div>\n          <center><Title style={{marginBottom : 50}}>Lab 가입 신청</Title></center>\n              {/* 이메일 폼*/}\n              <Form.Item>\n                  {getFieldDecorator('LabName', {\n                      rules: [{ required: true, message: 'Lab 이름을 입력해 주세요!' }],\n                  })(\n                      <Input\n                          //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          placeholder=\"Lab Name\"\n                      />,\n                  )}\n              </Form.Item>\n\n              {/* 비밀번호 폼*/}\n              <Form.Item>\n                  {getFieldDecorator('password', {\n                      rules: [{ required: true, message: '그룹 비밀번호를 입력해 주세요!' }],\n                  })(\n                      <Input\n                          prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          type=\"Group Password\"\n                          placeholder=\"Group Password\"\n                      />,\n                  )}\n              </Form.Item>\n\n              <Button type=\"primary\" onClick={this.showModal}>\n              가입 신청\n              </Button>\n              <Modal\n              title=\"가입 신청\"\n              visible={this.state.visible}\n              onOk={this.handleOk}\n              onCancel={this.handleCancel}\n              >\n              <p>에 가입하시겠습니까?</p>\n              </Modal>\n\n        </div>\n      );\n  }\n}\n\nexport default Form.create()(MyGroupRegister);\n"]},"metadata":{},"sourceType":"module"}