{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBB34\\\\Desktop\\\\git\\\\ChemicalManagementApplication\\\\Dev\\\\Front\\\\src\\\\components\\\\MyLab.js\";\nimport React, { Component } from 'react';\nimport { List, Typography } from 'antd';\nimport Chemical from './Chemical';\nimport ChemicalAdd from './ChemicalAdd';\nimport { array } from 'prop-types';\nconst Title = Typography.Title; //마이 랩\n\nclass MyLab extends Component {\n  constructor(props) {\n    super(props); //Mylab의 this.state에는 현재 확인중인 인벤토리의 아이디인 inventoryId와 해당 인벤토리에 들어있는 stock의 id의 리스트!!!가 들어있음\n\n    this.state = {};\n\n    this.changeVolume = (stockId, change) => {\n      const chemicalArray = [];\n\n      for (let i = 0; i < this.state.chemicals.length; i++) {\n        if (this.state.chemicals.stockId === stockId) {\n          this.state.chemicals.remainingVolume = this.state.chemicals.remainingVolume - change;\n          chemicalArray.push(this.state.chemicals);\n        }\n\n        this.setState({\n          chemicals: chemicalArray\n        });\n      }\n\n      console.log(chemicalArray); //state에 있는 배열 탐색하면서 그거의 stockId가 stockId인거 찾기\n      //나머지들은 바로 chemicalArray에 넣어주고\n      //찾은거면 그거의 stockInfo.volume에서 change만큼을 뺴준다\n      //그리고 그걸 chemicalArray에 넣어주기\n      //탐색 끝나면 this.setState({chemicals : chemicalArray})\n    };\n\n    this.state = {\n      inventoryId: 1,\n      stocks: [1, 2, 3, 4, 5, 6, 7, 8]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"My Lab\")), React.createElement(List, {\n      grid: {\n        gutter: 16,\n        column: 3\n      },\n      dataSource: this.state.stocks,\n      renderItem: stockId => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Chemical, {\n        stockId: stockId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), \" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(ChemicalAdd, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MyLab;","map":{"version":3,"sources":["C:\\Users\\무\\Desktop\\git\\ChemicalManagementApplication\\Dev\\Front\\src\\components\\MyLab.js"],"names":["React","Component","List","Typography","Chemical","ChemicalAdd","array","Title","MyLab","constructor","props","state","changeVolume","stockId","change","chemicalArray","i","chemicals","length","remainingVolume","push","setState","console","log","inventoryId","stocks","render","marginBottom","gutter","column","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,MAAjC;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,KAAT,QAAsB,YAAtB;MAEQC,K,GAAUJ,U,CAAVI,K,EAER;;AACA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;AAK1BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AAFe,SAHnBC,KAGmB,GAHX,EAGW;;AAAA,SAWnBC,YAXmB,GAWJ,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChC,YAAMC,aAAa,GAAG,EAAtB;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,SAAX,CAAqBC,MAAzC,EAAkDF,CAAC,EAAnD,EAAsD;AAClD,YAAI,KAAKL,KAAL,CAAWM,SAAX,CAAqBJ,OAArB,KAAiCA,OAArC,EAA6C;AACzC,eAAKF,KAAL,CAAWM,SAAX,CAAqBE,eAArB,GAAuC,KAAKR,KAAL,CAAWM,SAAX,CAAqBE,eAArB,GAAuCL,MAA9E;AACAC,UAAAA,aAAa,CAACK,IAAd,CAAmB,KAAKT,KAAL,CAAWM,SAA9B;AACH;;AACD,aAAKI,QAAL,CAAc;AAACJ,UAAAA,SAAS,EAAGF;AAAb,SAAd;AACH;;AAEDO,MAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ,EAXgC,CAYhC;AACA;AACA;AACA;AACA;AACH,KA5BkB;;AAGf,SAAKJ,KAAL,GAAa;AACTa,MAAAA,WAAW,EAAG,CADL;AAETC,MAAAA,MAAM,EAAG,CACL,CADK,EACF,CADE,EACC,CADD,EACI,CADJ,EACO,CADP,EACU,CADV,EACa,CADb,EACgB,CADhB;AAFA,KAAb;AAMH;;AAqBDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAR,CAHJ,EAII,oBAAC,IAAD;AACI,MAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,EAAV;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OADV;AAEI,MAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWc,MAF3B;AAGI,MAAA,UAAU,EAAEZ,OAAO,IACf,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAEA,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAaI;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAbJ,CADJ;AAmBH;;AAvDyB;;AA0D9B,eAAetB,KAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { List, Typography } from 'antd'\r\n\r\nimport Chemical from './Chemical';\r\nimport ChemicalAdd from './ChemicalAdd';\r\nimport { array } from 'prop-types';\r\n\r\nconst { Title } = Typography;\r\n\r\n//마이 랩\r\nclass MyLab extends Component {\r\n\r\n    state = {\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //Mylab의 this.state에는 현재 확인중인 인벤토리의 아이디인 inventoryId와 해당 인벤토리에 들어있는 stock의 id의 리스트!!!가 들어있음\r\n        this.state = {\r\n            inventoryId : 1,\r\n            stocks : [\r\n                1, 2, 3, 4, 5, 6, 7, 8\r\n            ]\r\n        }\r\n    }\r\n\r\n    changeVolume = (stockId, change) => {\r\n        const chemicalArray = [];\r\n\r\n        for(let i = 0 ; i < this.state.chemicals.length ; i++){\r\n            if (this.state.chemicals.stockId === stockId){\r\n                this.state.chemicals.remainingVolume = this.state.chemicals.remainingVolume - change \r\n                chemicalArray.push(this.state.chemicals)\r\n            } \r\n            this.setState({chemicals : chemicalArray})\r\n        }\r\n\r\n        console.log(chemicalArray)\r\n        //state에 있는 배열 탐색하면서 그거의 stockId가 stockId인거 찾기\r\n        //나머지들은 바로 chemicalArray에 넣어주고\r\n        //찾은거면 그거의 stockInfo.volume에서 change만큼을 뺴준다\r\n        //그리고 그걸 chemicalArray에 넣어주기\r\n        //탐색 끝나면 this.setState({chemicals : chemicalArray})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 약품 목록에서 각각 하나의 원소에 대한 Chemical 클래스 */}\r\n                <br />\r\n                <center><Title style={{ marginBottom: 50 }}>My Lab</Title></center>\r\n                <List\r\n                    grid={{ gutter: 16, column: 3 }}\r\n                    dataSource={this.state.stocks}\r\n                    renderItem={stockId => (\r\n                        <List.Item>\r\n                            <Chemical stockId={stockId} /> {/* Chemical 컴포넌트에 stockId를 전해줌*/}\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n                <div style={{ marginTop: 100 }}>\r\n                    <ChemicalAdd />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyLab;\r\n"]},"metadata":{},"sourceType":"module"}