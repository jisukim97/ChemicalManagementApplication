{"ast":null,"code":"var _jsxFileName = \"/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js\";\nimport React, { Component } from 'react';\nimport { List, Typography } from 'antd';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nconst Title = Typography.Title; //마이 랩\n\nclass MyGroupGenerate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //회원 가입 정보\n          const registInformation = {\n            email: values.email,\n            name: values.username,\n            password: values.password //http요청\n\n          };\n          fetch(serverUrl + '/regist', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(registInformation)\n          }).then(response => {\n            if (response.status === 200) {\n              //가입이 성공적으로 수행 되었을 경우\n              message.success('회원이 되신 것을 환영합니다!');\n              history.push(\"/login\");\n            } else if (response.status === 403) {\n              //가입 실패했을 경우\n              message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n            } else {//요청 오류 발생\n            }\n          });\n        } else {\n          //비밀번호 틀렸을 경우\n          message.error('두 비밀번호가 같은지 확인 해 주세요!');\n        }\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('두 비밀번호가 일치하지 않습니다!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      form.validateFields(['confirm'], {\n        force: true\n      });\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: '이메일 주소를 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }),\n      placeholder: \"Email Address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: '이름을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력 해 주세요!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }),\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 다시 한번 입력 해 주세요!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }),\n      placeholder: \"Confirm password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Register Now!\"), \"Or \", React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"login now!\")));\n  }\n\n}\n\nexport default MyGroupGenerate;","map":{"version":3,"sources":["/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js"],"names":["React","Component","List","Typography","history","serverUrl","Title","MyGroupGenerate","handleSubmit","e","preventDefault","props","form","validateFields","err","values","registInformation","email","name","username","password","fetch","method","headers","body","JSON","stringify","then","response","status","message","success","push","error","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","render","getFieldDecorator","rules","required","color","validator","handleConfirmBlur"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { List, Typography} from 'antd'\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting'\n\nconst { Title } = Typography;\n\n//마이 랩\nclass MyGroupGenerate extends Component {\n\n  handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n          if (!err) {\n              //회원 가입 정보\n              const registInformation = {\n                  email : values.email,\n                  name : values.username,\n                  password : values.password,\n              }\n              //http요청\n              fetch(serverUrl + '/regist', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify(registInformation)\n              }).then(response => {\n                  if (response.status === 200) {\n                      //가입이 성공적으로 수행 되었을 경우\n                      message.success('회원이 되신 것을 환영합니다!');\n                      history.push(\"/login\")\n                  } else if (response.status === 403) {\n                      //가입 실패했을 경우\n                      message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n                  } else {\n                      //요청 오류 발생\n                  }\n              })\n          } else {\n              //비밀번호 틀렸을 경우\n              message.error('두 비밀번호가 같은지 확인 해 주세요!');\n          }\n      });\n  };\n\n  //비밀번호 두개 일치하는지 확인\n  compareToFirstPassword = (rule, value, callback) => {\n      const { form } = this.props;\n      if (value && value !== form.getFieldValue('password')) {\n          callback('두 비밀번호가 일치하지 않습니다!');\n      } else {\n          callback();\n      }\n  };\n\n  //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n  validateToNextPassword = (rule, value, callback) => {\n      const { form } = this.props;\n      form.validateFields(['confirm'], { force: true });\n      callback();\n  };\n\n\n  render() {\n      const { getFieldDecorator } = this.props.form;\n      return (\n          <Form onSubmit={this.handleSubmit} className=\"form\">\n\n              {/* 이메일 */}\n              <Form.Item>\n                  {getFieldDecorator('email', {\n                      rules: [{ required: true, message: '이메일 주소를 입력 해 주세요!' }],\n                  })(\n                      <Input\n                          prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          placeholder=\"Email Address\"\n                      />,\n                  )}\n              </Form.Item>\n\n              {/* 이름 */}\n              <Form.Item>\n                  {getFieldDecorator('username', {\n                      rules: [{ required: true, message: '이름을 입력 해 주세요!' }],\n                  })(\n                      <Input\n                          prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          placeholder=\"Username\"\n                      />,\n                  )}\n              </Form.Item>\n\n              {/* 비밀번호1 */}\n              <Form.Item hasFeedback>\n                  {getFieldDecorator('password', {\n                      rules: [\n                          {\n                              required: true,\n                              message: '비밀번호를 입력 해 주세요!',\n                          },\n                          {\n                              validator: this.validateToNextPassword,\n                          },\n                      ],\n                  })(<Input.Password\n                      prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                      placeholder=\"Password\" />)}\n              </Form.Item>\n\n              {/* 비밀번호2 */}\n              <Form.Item hasFeedback>\n                  {getFieldDecorator('confirm', {\n                      rules: [\n                          {\n                              required: true,\n                              message: '비밀번호를 다시 한번 입력 해 주세요!',\n                          },\n                          {\n                              validator: this.compareToFirstPassword,\n                          },\n                      ],\n                  })(<Input.Password\n                      prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                      placeholder=\"Confirm password\"\n                      onBlur={this.handleConfirmBlur} />)}\n              </Form.Item>\n\n              {/* 회원가입 버튼 */}\n              <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                      Register Now!\n                  </Button>\n                  Or <Link to=\"/login\">login now!</Link>\n              </Form.Item>\n          </Form>\n      );\n  }\n}\n\nexport default MyGroupGenerate;\n"]},"metadata":{},"sourceType":"module"}