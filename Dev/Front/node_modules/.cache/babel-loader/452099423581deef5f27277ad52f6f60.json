{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal, notification } from 'antd';\nimport { getUser, getToken } from '../authentication';\nimport './ArticleForm.css';\n\nconst openNotificationWithIcon = type => {\n  notification[type]({\n    message: '소식 업로드 성공!',\n    description: '당신의 소식이 친구들에게 공유 되었어요!'\n  });\n};\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst TextArea = Input.TextArea;\n\nclass ArticleForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewVisible: false,\n      previewImage: '',\n      fileList: []\n    };\n    this.userID = getUser().userID;\n\n    this.handleCancel = () => this.setState({\n      previewVisible: false\n    });\n\n    this.handlePreview = async file => {\n      if (!file.url && !file.preview) {\n        file.preview = await getBase64(file.originFileObj);\n      }\n\n      this.setState({\n        previewImage: file.url || file.preview,\n        previewVisible: true\n      });\n    };\n\n    this.handleChange = ({\n      fileList\n    }) => this.setState({\n      fileList\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          console.log(this.state.fileList); //여기서 각 원소의 response.name이 파일이름이고, 이를 db에 저장시켜주면 됨\n\n          let fileList = [];\n          this.state.fileList.map(file => {\n            fileList.push(file.response.name);\n          });\n          let fileNames = fileList.join('/'); //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n\n          let article = {\n            'userID': this.userID,\n            'content': values.content.replace(/\\n/gi, '<br>'),\n            //줄바꿈 표시를 <br/>로 바꿔줌\n            'photo': fileNames\n          };\n          fetch('http://localhost:8080/article/insert', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'token': getToken()\n            },\n            body: JSON.stringify(article)\n          }).then(response => {\n            if (response.status === 200) {\n              //글올리기 성공\n              response.json().then(rsp => {\n                console.log(rsp);\n                openNotificationWithIcon('success');\n                this.props.form.resetFields();\n                this.props.addArticle(rsp);\n              });\n            } else {\n              console.log(\"글올리기 실패\");\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    //여기부터 사진폼\n    const _this$state = this.state,\n          previewVisible = _this$state.previewVisible,\n          previewImage = _this$state.previewImage,\n          fileList = _this$state.fileList;\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Upload\")); //여기까지가 사진 폼 \n\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      className: \"articleform\",\n      id: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"\\uB2F9\\uC2E0\\uC758 \\uC18C\\uC2DD\\uC744 \\uCE5C\\uAD6C\\uB4E4\\uC5D0\\uAC8C \\uC54C\\uB824\\uC8FC\\uC138\\uC694!\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"article-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, getFieldDecorator('content', {\n      rules: [{\n        required: true,\n        message: 'Please input your story!'\n      }]\n    })(React.createElement(TextArea, {\n      placeholder: \"\\uC624\\uB298 \\uBB34\\uC2A8 \\uC77C\\uC774 \\uC77C\\uC5B4\\uB0AC\\uB098\\uC694?\",\n      autosize: {\n        minRows: 5,\n        maxRows: 6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, getFieldDecorator('photo', {\n      rules: [{\n        required: false\n      }]\n    })(React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      name: \"file\",\n      action: \"http://localhost:8080/photo/upload/\" + this.userID,\n      listType: \"picture-card\",\n      fileList: fileList,\n      onPreview: this.handlePreview,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, fileList.length >= 5 ? null : uploadButton), React.createElement(Modal, {\n      visible: previewVisible,\n      footer: null,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"example\",\n      style: {\n        width: '100%'\n      },\n      src: previewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"article-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Upload\")))));\n  }\n\n}\n\nexport default Form.create()(ArticleForm);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js"],"names":["React","Component","Form","Icon","Input","Button","Upload","Modal","notification","getUser","getToken","openNotificationWithIcon","type","message","description","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","TextArea","ArticleForm","state","previewVisible","previewImage","fileList","userID","handleCancel","setState","handlePreview","url","preview","originFileObj","handleChange","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","map","push","response","name","fileNames","join","article","content","replace","fetch","method","headers","body","JSON","stringify","then","status","json","rsp","resetFields","addArticle","render","uploadButton","getFieldDecorator","rules","required","minRows","maxRows","length","width","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal, notification } from 'antd';\nimport { getUser, getToken } from '../authentication';\n\nimport './ArticleForm.css';\n\nconst openNotificationWithIcon = type => {\n    notification[type]({\n      message: '소식 업로드 성공!',\n      description:\n        '당신의 소식이 친구들에게 공유 되었어요!',\n    });\n  };  \n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nconst { TextArea } = Input;\n\nclass ArticleForm extends Component {\n\n    state = {\n        previewVisible: false,\n        previewImage: '',\n        fileList: [\n\n        ],\n    };\n\n    userID = getUser().userID\n\n    handleCancel = () => this.setState({ previewVisible: false });\n\n    handlePreview = async file => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n\n        this.setState({\n            previewImage: file.url || file.preview,\n            previewVisible: true,\n        });\n    };\n\n    handleChange = ({ fileList }) => this.setState({ fileList });\n\n    //여기위까지가 사진 폼 \n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                console.log(this.state.fileList) //여기서 각 원소의 response.name이 파일이름이고, 이를 db에 저장시켜주면 됨\n                let fileList = []\n                this.state.fileList.map(file => {\n                    fileList.push(file.response.name)\n                })\n                let fileNames = fileList.join('/')\n                //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n\n                let article = {\n                    'userID': this.userID,\n                    'content': values.content.replace(/\\n/gi,'<br>'), //줄바꿈 표시를 <br/>로 바꿔줌\n                    'photo': fileNames\n                }\n\n                fetch('http://localhost:8080/article/insert', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'token': getToken()\n                    },\n                    body: JSON.stringify(article)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //글올리기 성공\n                        response.json().then( rsp => {\n                            console.log(rsp)\n                            openNotificationWithIcon('success')\n                            this.props.form.resetFields()                \n                            this.props.addArticle(rsp)    \n                        })\n                    } else {\n                        console.log(\"글올리기 실패\")\n                    }\n                });\n            }\n        });\n    };\n\n    render() {\n\n        //여기부터 사진폼\n\n        const { previewVisible, previewImage, fileList } = this.state;\n        const uploadButton = (\n            <div>\n                <Icon type=\"plus\" />\n                <div className=\"ant-upload-text\">Upload</div>\n            </div>\n        );\n\n        //여기까지가 사진 폼 \n\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div className=\"articleform\" id='box'>\n                <center>당신의 소식을 친구들에게 알려주세요!</center> <br/>\n                <Form onSubmit={this.handleSubmit} className=\"article-form\">\n                    <Form.Item>\n                        {getFieldDecorator('content', {\n                            rules: [{ required: true, message: 'Please input your story!' }],\n                        })(\n                            <TextArea\n                                placeholder=\"오늘 무슨 일이 일어났나요?\"\n                                autosize={{ minRows: 5, maxRows: 6 }}\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('photo', {\n                            rules: [{ required: false }],\n                        })(\n                            <div className=\"clearfix\">\n                                <Upload\n                                    name=\"file\"\n                                    action={\"http://localhost:8080/photo/upload/\"+this.userID}\n                                    listType=\"picture-card\"\n                                    fileList={fileList}\n                                    onPreview={this.handlePreview}\n                                    onChange={this.handleChange}\n                                >\n                                    {fileList.length >= 5 ? null : uploadButton}\n                                </Upload>\n                                <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n                                    <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n                                </Modal>\n                            </div>\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <center><Button type=\"primary\" htmlType=\"submit\" className=\"article-form-button\" >\n                            Upload\n                    </Button></center>\n                    </Form.Item>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(ArticleForm);\n"]},"metadata":{},"sourceType":"module"}