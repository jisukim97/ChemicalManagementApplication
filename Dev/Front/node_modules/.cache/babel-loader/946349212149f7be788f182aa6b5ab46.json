{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/FriendUnit.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Button, message, Popconfirm } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { getUser, getToken } from '../authentication';\nimport './FriendUnit.css';\n\nclass FriendUnit extends Component {\n  //어디서 왔는지 : this.props.from\n  constructor(props) {\n    super(props); //현재 받은 친구 원소와 나와의 관계가 무엇인지 확인 \n    //친구면 1, 친구요청 이미 보낸상태면 2, 친구요청 받은 상태면 3, 아무것도 아니면 4\n\n    this.state = {\n      relationship: 4\n    };\n\n    this.getOnePhoto = (fileName, username) => {\n      if (fileName === \"\" || fileName == null) return React.createElement(Avatar, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, username);else return React.createElement(Avatar, {\n        size: \"large\",\n        src: 'http://localhost:8080/photo/download?filename=' + fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    };\n\n    this.getButton = () => {\n      const from = this.props.from;\n\n      if (from === \"request\") {\n        //친구요청 리스트업일 경우\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(Button, {\n          type: \"primary\",\n          shape: \"circle\",\n          size: \"small\",\n          onClick: this.acceptRequest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"O\"), React.createElement(Button, {\n          type: \"danger\",\n          shape: \"circle\",\n          size: \"small\",\n          onClick: this.denyRequest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \"X\"));\n      } else {\n        //자기자신일 경우 아무 버튼 노출 안함\n        if (getUser().userID === this.props.friend.id) {\n          return null;\n        } else if (this.state.relationship === 1) {\n          //이미 친구인 상태\n          return React.createElement(Popconfirm, {\n            title: \"\\uC815\\uB9D0 \\uCE5C\\uAD6C \\uAD00\\uACC4\\uB97C \\uB04A\\uC73C\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\",\n            onConfirm: this.confirm,\n            onCancel: this.cancel,\n            okText: \"Yes\",\n            cancelText: \"No\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"danger\",\n            size: \"small\",\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, \"\\uCE5C\\uAD6C\\uB04A\\uAE30\"));\n        } else if (this.state.relationship === 2) {\n          //이미 친구요청 보낸  상태\n          return React.createElement(Button, {\n            size: \"small\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, \"\\uC774\\uBBF8\\uC2E0\\uCCAD\\uD588\\uC74C\");\n        } else if (this.state.relationship === 3) {\n          //이미 친구요청 받은 상태\n          return React.createElement(Button, {\n            size: \"small\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, \"\\uCE5C\\uAD6C\\uC694\\uCCAD\\uBC1B\\uC74C\");\n        } else {\n          //둘이 아무 사이도 아니므로 친구 신청 버튼\n          return React.createElement(Button, {\n            type: \"primary\",\n            size: \"small\",\n            onClick: this.sendRequest,\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, \"\\uCE5C\\uAD6C\\uC2E0\\uCCAD\");\n        }\n      }\n    };\n\n    this.confirm = e => {\n      console.log(e);\n      const requesturl = 'http://localhost:8080/friends/' + this.props.friend.id + '/' + getUser().userID;\n      fetch(requesturl, {\n        method: 'DELETE',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success('더이상 친구관계가 아닙니다');\n          this.setState({\n            relationship: 4\n          });\n        } else {\n          console.log('친구 삭제 실패');\n        }\n      });\n    };\n\n    this.cancel = e => {\n      console.log(e);\n    };\n\n    this.sendRequest = () => {\n      fetch(\"http://localhost:8080/friend/request/\" + getUser().userID + \"/\" + this.props.friend.id, {\n        method: 'POST',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success(\"친구 요청을 보냈습니다!\");\n          this.setState({\n            relationship: 2\n          });\n        } else {\n          //오류 처리\n          console.log(\"error!\");\n        }\n      });\n    };\n\n    this.acceptRequest = () => {\n      fetch(\"http://localhost:8080/friend/request/response/\" + 1 + \"/\" + this.props.friend.id + \"/\" + getUser().userID, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success(\"지금부터 두분은 친구사입니다!\");\n          this.deleteUnit();\n        } else {\n          //오류 처리\n          console.log(\"error!\");\n        }\n      });\n    };\n\n    this.denyRequest = () => {\n      fetch(\"http://localhost:8080/friend/request/response/\" + 2 + \"/\" + this.props.friend.id + \"/\" + getUser().userID, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success(\"친구 신청을 거절 하였습니다.\");\n          this.deleteUnit();\n        } else {\n          //오류 처리\n          console.log(\"error!\");\n        }\n      });\n    };\n\n    this.deleteUnit = () => {\n      this.props.deleteArray(this.props.friend);\n    };\n\n    const _requesturl = 'http://localhost:8080/friend/request/check/' + getUser().userID + '/' + this.props.friend.id;\n\n    fetch(_requesturl, {\n      method: 'GET',\n      headers: {\n        'token': getToken()\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        console.log('관계 불러오기 에러!');\n        return [];\n      }\n    }).then(response => this.setState({\n      relationship: response\n    }));\n  } //프로필 사진을 받아오기\n\n\n  render() {\n    const profile = this.props.friend.profile;\n    const email = this.props.friend.email;\n    const userID = this.props.friend.id;\n    const username = this.props.friend.username;\n    const goToHome = '/home/' + userID;\n    return React.createElement(\"div\", {\n      className: \"marginTopBottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.getOnePhoto(profile, username), React.createElement(\"span\", {\n      className: \"marginLeftRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: goToHome,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, username))), React.createElement(\"span\", {\n      className: \"rightAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.getButton()));\n  }\n\n}\n\nexport default FriendUnit;","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/FriendUnit.js"],"names":["React","Component","Avatar","Button","message","Popconfirm","Link","getUser","getToken","FriendUnit","constructor","props","state","relationship","getOnePhoto","fileName","username","getButton","from","acceptRequest","denyRequest","userID","friend","id","confirm","cancel","sendRequest","e","console","log","requesturl","fetch","method","headers","then","response","status","success","setState","deleteUnit","deleteArray","json","render","profile","email","goToHome"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Avatar, Button, message, Popconfirm } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nimport { getUser, getToken } from '../authentication';\n\nimport './FriendUnit.css';\n\nclass FriendUnit extends Component {\n\n    //어디서 왔는지 : this.props.from\n    state = {\n        relationship: 4\n    }\n\n\n    constructor(props) {\n        super(props)\n\n        //현재 받은 친구 원소와 나와의 관계가 무엇인지 확인 \n        //친구면 1, 친구요청 이미 보낸상태면 2, 친구요청 받은 상태면 3, 아무것도 아니면 4\n        const requesturl = 'http://localhost:8080/friend/request/check/' + getUser().userID + '/' + this.props.friend.id\n        fetch(requesturl, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    console.log('관계 불러오기 에러!')\n                    return [];\n                }\n            }).then(response => this.setState({ relationship: response }))\n    }\n\n    //프로필 사진을 받아오기\n    getOnePhoto = (fileName, username) => {\n        if (fileName === \"\" || fileName == null)\n            return <Avatar size='large'>{username}</Avatar>\n        else\n            return <Avatar size='large' src={'http://localhost:8080/photo/download?filename=' + fileName} />\n    }\n\n    //친구 관계에 따라 노출되는 버튼이 다름\n    getButton = () => {\n        const from = this.props.from;\n\n        if (from === \"request\") {\n            //친구요청 리스트업일 경우\n            return (\n                <span>\n                    <Button type=\"primary\" shape=\"circle\" size=\"small\" onClick={this.acceptRequest}>O</Button>\n                    <Button type=\"danger\" shape=\"circle\" size=\"small\" onClick={this.denyRequest}>X</Button>\n                </span>\n            )\n        } else {\n            //자기자신일 경우 아무 버튼 노출 안함\n            if (getUser().userID === this.props.friend.id) {\n                return null;\n            } else if (this.state.relationship === 1) {\n                //이미 친구인 상태\n                return (\n                    <Popconfirm\n                        title=\"정말 친구 관계를 끊으시겠습니까?\"\n                        onConfirm={this.confirm}\n                        onCancel={this.cancel}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                    >\n                        <Button type=\"danger\" size=\"small\" ghost>친구끊기</Button>\n                    </Popconfirm>\n                )\n            } else if (this.state.relationship === 2) {\n                //이미 친구요청 보낸  상태\n                return (\n                    <Button size=\"small\" disabled>이미신청했음</Button>\n                )\n            } else if (this.state.relationship === 3) {\n                //이미 친구요청 받은 상태\n                return (\n                    <Button size=\"small\" disabled>친구요청받음</Button>\n                )\n            } else {\n                //둘이 아무 사이도 아니므로 친구 신청 버튼\n                return (\n                    <Button type=\"primary\" size=\"small\" onClick={this.sendRequest} ghost>친구신청</Button>\n                )\n            }\n        }\n    }\n\n    //친구 관계 끊을 때\n    confirm = (e) => {\n        console.log(e);\n        const requesturl = 'http://localhost:8080/friends/' + this.props.friend.id + '/' + getUser().userID;\n        fetch(requesturl, {\n            method: 'DELETE',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success('더이상 친구관계가 아닙니다');\n                    this.setState({ relationship: 4 });\n                } else {\n                    console.log('친구 삭제 실패')\n                }\n            })\n\n    }\n\n    cancel = (e) => {\n        console.log(e);\n    }\n\n    //친구 요청\n    sendRequest = () => {\n        fetch(\"http://localhost:8080/friend/request/\" + getUser().userID + \"/\" + this.props.friend.id, {\n            method: 'POST',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success(\"친구 요청을 보냈습니다!\")\n                    this.setState({ relationship: 2 })\n                } else {\n                    //오류 처리\n                    console.log(\"error!\")\n                }\n            })\n\n    }\n\n    //친구 신청 받을 때\n    acceptRequest = () => {\n        fetch(\"http://localhost:8080/friend/request/response/\" + 1 + \"/\" + this.props.friend.id + \"/\" + getUser().userID, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success(\"지금부터 두분은 친구사입니다!\")\n                    this.deleteUnit();\n                } else {\n                    //오류 처리\n                    console.log(\"error!\")\n                }\n            })\n    }\n\n    //친구 요청 거부\n    denyRequest = () => {\n        fetch(\"http://localhost:8080/friend/request/response/\" + 2 + \"/\" + this.props.friend.id + \"/\" + getUser().userID, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success(\"친구 신청을 거절 하였습니다.\")\n                    this.deleteUnit();\n                } else {\n                    //오류 처리\n                    console.log(\"error!\")\n                }\n            })\n    }\n\n    //친구 신청 받거나 거절 후에는 리스트에서 삭제\n    deleteUnit = () => {\n        this.props.deleteArray(this.props.friend)\n    }\n\n    render() {\n        const profile = this.props.friend.profile;\n        const email = this.props.friend.email;\n        const userID = this.props.friend.id;\n        const username = this.props.friend.username;\n        const goToHome = '/home/' + userID;\n\n        return (\n            <div className=\"marginTopBottom\">\n                <span>\n                    {this.getOnePhoto(profile, username)}\n                    <span className='marginLeftRight'><Link to={goToHome}>{username}</Link></span>\n                </span>\n                <span className='rightAlign'>\n                    {this.getButton()}\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default FriendUnit;"]},"metadata":{},"sourceType":"module"}