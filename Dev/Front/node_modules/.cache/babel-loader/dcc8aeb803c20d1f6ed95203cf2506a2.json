{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal } from 'antd';\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst TextArea = Input.TextArea;\n\nclass ArticleForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewVisible: false,\n      previewImage: '',\n      fileList: []\n    };\n\n    this.handleCancel = () => this.setState({\n      previewVisible: false\n    });\n\n    this.handlePreview = async file => {\n      if (!file.url && !file.preview) {\n        file.preview = await getBase64(file.originFileObj);\n      }\n\n      this.setState({\n        previewImage: file.url || file.preview,\n        previewVisible: true\n      });\n    };\n\n    this.handleChange = ({\n      fileList\n    }) => this.setState({\n      fileList\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          console.log(this.state.fileList); //여기서 각 원소의 response.name이 파일이름이고, 이를 db에 저장시켜주면 됨\n\n          let fileList = [];\n          this.state.fileList.map(file => {\n            fileList.push(file.response.name);\n          });\n          let fileNames = fileList.join('/'); //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n          //userID 임시 설정\n\n          let article = {\n            'userID': 1,\n            'content': values.content,\n            'photo': fileNames\n          };\n          fetch('http://localhost:8080/article/insert', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(article)\n          }).then(response => response.json()).then(rsp => {\n            console.log(rsp);\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    //여기부터 사진폼\n    const _this$state = this.state,\n          previewVisible = _this$state.previewVisible,\n          previewImage = _this$state.previewImage,\n          fileList = _this$state.fileList;\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Upload\")); //여기까지가 사진 폼 \n\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"article-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('content', {\n      rules: [{\n        required: true,\n        message: 'Please input your story!'\n      }]\n    })(React.createElement(TextArea, {\n      placeholder: \"\\uC624\\uB298 \\uBB34\\uC2A8 \\uC77C\\uC774 \\uC77C\\uC5B4\\uB0AC\\uB098\\uC694?\",\n      autosize: {\n        minRows: 5,\n        maxRows: 6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, getFieldDecorator('photo', {\n      rules: [{\n        required: false\n      }]\n    })(React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      name: \"file\",\n      action: \"http://localhost:8080/photo/upload/1\" //유저아이디 1로 설정\n      ,\n      listType: \"picture-card\",\n      fileList: fileList,\n      onPreview: this.handlePreview,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, fileList.length >= 5 ? null : uploadButton), React.createElement(Modal, {\n      visible: previewVisible,\n      footer: null,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"example\",\n      style: {\n        width: '100%'\n      },\n      src: previewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"article-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Upload\")));\n  }\n\n}\n\nexport default Form.create()(ArticleForm);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js"],"names":["React","Component","Form","Icon","Input","Button","Upload","Modal","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","TextArea","ArticleForm","state","previewVisible","previewImage","fileList","handleCancel","setState","handlePreview","url","preview","originFileObj","handleChange","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","map","push","response","name","fileNames","join","article","content","fetch","method","headers","body","JSON","stringify","then","json","rsp","render","uploadButton","getFieldDecorator","rules","required","message","minRows","maxRows","length","width","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal } from 'antd';\n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}  \n\nconst { TextArea } = Input;\n\nclass ArticleForm extends Component {\n\n    state = {\n        previewVisible: false,\n        previewImage: '',\n        fileList: [\n\n        ],\n    };\n\n\n    handleCancel = () => this.setState({ previewVisible: false });\n\n    handlePreview = async file => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n\n        this.setState({\n            previewImage: file.url || file.preview,\n            previewVisible: true,\n        });\n    };\n\n    handleChange = ({ fileList }) => this.setState({ fileList });\n\n    //여기위까지가 사진 폼 \n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                console.log(this.state.fileList) //여기서 각 원소의 response.name이 파일이름이고, 이를 db에 저장시켜주면 됨\n                let fileList = []\n                this.state.fileList.map(file => {\n                    fileList.push(file.response.name)\n                })\n                let fileNames = fileList.join('/')\n                //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n\n                //userID 임시 설정\n                let article = {\n                    'userID' : 1,\n                    'content' : values.content,\n                    'photo' : fileNames\n                }\n\n                fetch('http://localhost:8080/article/insert', {\n                    method:'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body : JSON.stringify(article)\n                }).then(response => response.json())\n                .then(rsp => {\n                    console.log(rsp)\n                })\n\n            }\n        });\n    };\n\n    render() {\n\n        //여기부터 사진폼\n\n        const { previewVisible, previewImage, fileList } = this.state;\n        const uploadButton = (\n          <div>\n            <Icon type=\"plus\" />\n            <div className=\"ant-upload-text\">Upload</div>\n          </div>\n        );\n        \n        //여기까지가 사진 폼 \n\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"article-form\">\n                <Form.Item>\n                    {getFieldDecorator('content', {\n                        rules: [{ required: true, message: 'Please input your story!' }],\n                    })(\n                        <TextArea\n                            placeholder=\"오늘 무슨 일이 일어났나요?\"\n                            autosize={{ minRows: 5, maxRows: 6 }}\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('photo', {\n                        rules: [{ required: false }],\n                    })(\n                        <div className=\"clearfix\">\n                            <Upload\n                                name=\"file\"\n                                action=\"http://localhost:8080/photo/upload/1\" //유저아이디 1로 설정\n                                listType=\"picture-card\"\n                                fileList={fileList}\n                                onPreview={this.handlePreview}\n                                onChange={this.handleChange}\n                            >\n                                {fileList.length >= 5 ? null : uploadButton}\n                            </Upload>\n                            <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n                                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n                            </Modal>\n                        </div>\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"article-form-button\">\n                        Upload\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(ArticleForm);\n"]},"metadata":{},"sourceType":"module"}