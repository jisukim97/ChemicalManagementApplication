{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBB34\\\\Desktop\\\\git\\\\ChemicalManagementApplication\\\\Dev\\\\Front\\\\src\\\\components\\\\MyGroupRegister.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { getUser, getLab } from '../authentication';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nimport { login } from '../authentication';\nconst Title = Typography.Title;\n\nclass MyGroupRegister extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCancel = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n          //따로 가공해줄 필요 없이 바로 http 요청을 보낸다\n          console.log(values);\n          fetch(serverUrl + '/lab/' + getLab().id + '/' + getUser().id, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //로그인이 성공하였을 경우\n              response.json().then(response => {\n                //로컬스토리지에 토큰 및 로그인 정보 저장\n                login(response);\n                console.log(response);\n                message.success(response.user.name + '그룹 가입에 성공하였습니다!');\n                this.props.enrollLab(3);\n                history.push(\"/main\");\n              });\n            } else if (result === 401) {\n              //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n              message.error('그룹 가입 신청에 실패하였습니다. 그룹 이름 혹은 그룹 비밀번호를 다시 확인해 주세요.');\n              console.log(\"fail!\");\n            } else {//내부 오류\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Lab \\uAC00\\uC785 \\uC2E0\\uCCAD\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, getFieldDecorator('LabName', {\n      rules: [{\n        required: true,\n        message: 'Lab 이름을 입력해 주세요!'\n      }]\n    })(React.createElement(Input //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n    , {\n      placeholder: \"Lab Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '그룹 비밀번호를 입력해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }),\n      type: \"Group Password\",\n      placeholder: \"Group Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"\\uAC00\\uC785 \\uC2E0\\uCCAD\"), React.createElement(Modal, {\n      title: \"\\uAC00\\uC785 \\uC2E0\\uCCAD\",\n      visible: this.state.visible,\n      onOk: this.handleOk,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"\\uC5D0 \\uAC00\\uC785\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupRegister);","map":{"version":3,"sources":["C:\\Users\\무\\Desktop\\git\\ChemicalManagementApplication\\Dev\\Front\\src\\components\\MyGroupRegister.js"],"names":["React","Component","Form","Icon","Input","Button","message","Modal","Link","Typography","getUser","getLab","history","serverUrl","login","Title","MyGroupRegister","state","visible","showModal","setState","handleOk","e","console","log","handleCancel","handleSubmit","preventDefault","props","form","validateFields","err","values","fetch","id","method","headers","body","JSON","stringify","then","response","result","status","json","success","user","name","enrollLab","push","error","render","getFieldDecorator","marginBottom","rules","required","color","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from 'antd';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { history } from '../History';\r\nimport { serverUrl } from '../setting';\r\nimport { login } from '../authentication';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupRegister extends Component {\r\n\r\n  state = { visible: false };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n\r\n  //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\r\n        //따로 가공해줄 필요 없이 바로 http 요청을 보낸다\r\n        console.log(values)\r\n        fetch(serverUrl + '/lab/' + getLab().id + '/' + getUser().id, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(values)\r\n        })\r\n        .then(response => {\r\n          const result = response.status;\r\n          if (result === 200) {\r\n            //로그인이 성공하였을 경우\r\n            response.json().then(response => {\r\n              //로컬스토리지에 토큰 및 로그인 정보 저장\r\n              login(response)\r\n              console.log(response)\r\n              message.success(response.user.name + '그룹 가입에 성공하였습니다!');\r\n              this.props.enrollLab(3);\r\n              history.push(\"/main\")\r\n            })\r\n          } else if (result === 401) {\r\n            //비밀번호 불일치 혹은 이메일이 등록되지 않았음\r\n            message.error('그룹 가입 신청에 실패하였습니다. 그룹 이름 혹은 그룹 비밀번호를 다시 확인해 주세요.');\r\n            console.log(\"fail!\")\r\n          } else {\r\n            //내부 오류\r\n          }\r\n        })\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div>\r\n      <center><Title style={{marginBottom : 50}}>Lab 가입 신청</Title></center>\r\n      {/* 이메일 폼*/}\r\n      <Form.Item>\r\n      {getFieldDecorator('LabName', {\r\n        rules: [{ required: true, message: 'Lab 이름을 입력해 주세요!' }],\r\n      })(\r\n        <Input\r\n        //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n        placeholder=\"Lab Name\"\r\n        />,\r\n      )}\r\n      </Form.Item>\r\n\r\n      {/* 비밀번호 폼*/}\r\n      <Form.Item>\r\n      {getFieldDecorator('password', {\r\n        rules: [{ required: true, message: '그룹 비밀번호를 입력해 주세요!' }],\r\n      })(\r\n        <Input\r\n        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n        type=\"Group Password\"\r\n        placeholder=\"Group Password\"\r\n        />,\r\n      )}\r\n      </Form.Item>\r\n\r\n      <Button type=\"primary\" onClick={this.showModal}>\r\n      가입 신청\r\n      </Button>\r\n      <Modal\r\n      title=\"가입 신청\"\r\n      visible={this.state.visible}\r\n      onOk={this.handleOk}\r\n      onCancel={this.handleCancel}\r\n      >\r\n      <p>에 가입하시겠습니까?</p>\r\n      </Modal>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(MyGroupRegister);\r\n"]},"metadata":{},"sourceType":"module"}