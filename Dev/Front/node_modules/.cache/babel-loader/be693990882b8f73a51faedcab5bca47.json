{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal, message } from 'antd';\nimport { getUser, getToken } from '../authentication';\nimport './ArticleForm.css';\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst TextArea = Input.TextArea;\n\nclass ArticleForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewVisible: false,\n      previewImage: '',\n      fileList: []\n    };\n    this.userID = getUser().userID;\n\n    this.handleCancel = () => this.setState({\n      previewVisible: false\n    });\n\n    this.handlePreview = async file => {\n      if (!file.url && !file.preview) {\n        file.preview = await getBase64(file.originFileObj);\n      }\n\n      this.setState({\n        previewImage: file.url || file.preview,\n        previewVisible: true\n      });\n    };\n\n    this.handleChange = ({\n      fileList\n    }) => this.setState({\n      fileList\n    });\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          if (values.content.length > 250) {\n            message.error(\"말이 너무 깁니다!\");\n          } else {\n            //파일명을 /로 묶어주기\n            //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n            let fileList = [];\n            this.state.fileList.map(file => fileList.push(file.response.name));\n            let fileNames = fileList.join('/'); //폼 묶어주기\n\n            let article = {\n              'userID': this.userID,\n              'content': values.content.replace(/\\n/gi, '<br>'),\n              //줄바꿈 표시를 <br/>로 바꿔줌\n              'photo': fileNames //요청\n\n            };\n            fetch('http://localhost:8080/article', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'token': getToken()\n              },\n              body: JSON.stringify(article)\n            }).then(response => {\n              if (response.status === 200) {\n                //글올리기 성공\n                response.json().then(rsp => {\n                  message.success(\"소식이 성공적으로 공유 되었습니다.\");\n                  this.props.form.resetFields();\n                  this.props.addArticle(rsp);\n                  this.handleCancel();\n                });\n              } else {\n                console.log(\"글올리기 실패\");\n              }\n            });\n          }\n        }\n      });\n    };\n  }\n\n  render() {\n    //사진 업로드용\n    const _this$state = this.state,\n          previewVisible = _this$state.previewVisible,\n          previewImage = _this$state.previewImage,\n          fileList = _this$state.fileList;\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Upload\"));\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      className: \"articleform\",\n      id: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"\\uB2F9\\uC2E0\\uC758 \\uC18C\\uC2DD\\uC744 \\uCE5C\\uAD6C\\uB4E4\\uC5D0\\uAC8C \\uC54C\\uB824\\uC8FC\\uC138\\uC694!\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"article-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, getFieldDecorator('content', {\n      rules: [{\n        required: true,\n        message: '한마디를 작성 해 주세요!'\n      }]\n    })(React.createElement(TextArea, {\n      placeholder: \"\\uC624\\uB298 \\uBB34\\uC2A8 \\uC77C\\uC774 \\uC77C\\uC5B4\\uB0AC\\uB098\\uC694?\",\n      autosize: {\n        minRows: 5,\n        maxRows: 6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator('photo', {\n      rules: [{\n        required: false\n      }]\n    })(React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      name: \"file\",\n      action: \"http://localhost:8080/photo/upload/\" + this.userID,\n      listType: \"picture-card\",\n      fileList: fileList,\n      onPreview: this.handlePreview,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, fileList.length >= 5 ? null : uploadButton), React.createElement(Modal, {\n      visible: previewVisible,\n      footer: null,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"example\",\n      style: {\n        width: '100%'\n      },\n      src: previewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"article-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Upload\")))));\n  }\n\n}\n\nexport default Form.create()(ArticleForm);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ArticleForm.js"],"names":["React","Component","Form","Icon","Input","Button","Upload","Modal","message","getUser","getToken","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","TextArea","ArticleForm","state","previewVisible","previewImage","fileList","userID","handleCancel","setState","handlePreview","url","preview","originFileObj","handleChange","handleSubmit","e","preventDefault","props","form","validateFields","err","values","content","length","map","push","response","name","fileNames","join","article","replace","fetch","method","headers","body","JSON","stringify","then","status","json","rsp","success","resetFields","addArticle","console","log","render","uploadButton","getFieldDecorator","rules","required","minRows","maxRows","width","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Upload, Modal, message } from 'antd';\n\nimport { getUser, getToken } from '../authentication';\n\nimport './ArticleForm.css';\n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nconst { TextArea } = Input;\n\nclass ArticleForm extends Component {\n\n    state = {\n        previewVisible: false,\n        previewImage: '',\n        fileList: [\n        ],\n    };\n\n    //유저아이디\n    userID = getUser().userID\n\n    //사진 업로드용\n    handleCancel = () => this.setState({ previewVisible: false });\n\n    handlePreview = async file => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n\n        this.setState({\n            previewImage: file.url || file.preview,\n            previewVisible: true,\n        });\n    };\n\n    handleChange = ({ fileList }) => this.setState({ fileList });\n\n\n    //글쓰기 버튼 눌렀을 떄\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (values.content.length > 250) {\n                    message.error(\"말이 너무 깁니다!\")\n                } else {\n                    //파일명을 /로 묶어주기\n                    //db에는 파일명이 저장됨. 파일명의 리스트를 만들어서 그들 사이를 /로 조인해줌. 나중에 split해서 쓸 것임\n                    let fileList = []\n                    this.state.fileList.map(file => fileList.push(file.response.name))\n                    let fileNames = fileList.join('/')\n\n                    //폼 묶어주기\n                    let article = {\n                        'userID': this.userID,\n                        'content': values.content.replace(/\\n/gi, '<br>'), //줄바꿈 표시를 <br/>로 바꿔줌\n                        'photo': fileNames\n                    }\n\n                    //요청\n                    fetch('http://localhost:8080/article', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'token': getToken()\n                        },\n                        body: JSON.stringify(article)\n                    }).then(response => {\n                        if (response.status === 200) {\n                            //글올리기 성공\n                            response.json().then(rsp => {\n                                message.success(\"소식이 성공적으로 공유 되었습니다.\")\n                                this.props.form.resetFields()\n                                this.props.addArticle(rsp)\n                                this.handleCancel();\n                            })\n                        } else {\n                            console.log(\"글올리기 실패\")\n                        }\n                    });\n                }\n            }\n        });\n    };\n\n    render() {\n\n        //사진 업로드용\n        const { previewVisible, previewImage, fileList } = this.state;\n        const uploadButton = (\n            <div>\n                <Icon type=\"plus\" />\n                <div className=\"ant-upload-text\">Upload</div>\n            </div>\n        );\n\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div className=\"articleform\" id='box'>\n\n                {/* 타이틀 */}\n                <center>당신의 소식을 친구들에게 알려주세요!</center> <br />\n\n                {/* 폼 */}\n                <Form onSubmit={this.handleSubmit} className=\"article-form\">\n\n                    {/* 글 작성 폼*/}\n                    <Form.Item>\n                        {getFieldDecorator('content', {\n                            rules: [{ required: true, message: '한마디를 작성 해 주세요!' }],\n                        })(\n                            <TextArea\n                                placeholder=\"오늘 무슨 일이 일어났나요?\"\n                                autosize={{ minRows: 5, maxRows: 6 }}\n                            />,\n                        )}\n                    </Form.Item>\n\n                    {/* 사진 업로드 폼 */}\n                    <Form.Item>\n                        {getFieldDecorator('photo', {\n                            rules: [{ required: false }],\n                        })(\n                            <div className=\"clearfix\">\n                                <Upload\n                                    name=\"file\"\n                                    action={\"http://localhost:8080/photo/upload/\" + this.userID}\n                                    listType=\"picture-card\"\n                                    fileList={fileList}\n                                    onPreview={this.handlePreview}\n                                    onChange={this.handleChange}\n                                >\n                                    {fileList.length >= 5 ? null : uploadButton}\n                                </Upload>\n                                <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n                                    <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n                                </Modal>\n                            </div>\n                        )}\n                    </Form.Item>\n\n                    {/* 업로드 버튼 */}\n                    <Form.Item>\n                        <center>\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"article-form-button\" >\n                                Upload\n                            </Button>\n                        </center>\n                    </Form.Item>\n\n                </Form>\n\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(ArticleForm);\n"]},"metadata":{},"sourceType":"module"}