{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/201902/YoongSoJongSeol/ChemicalManagementApplication/Dev/Front/src/components/CommentForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Button, Icon, Input, message } from 'antd';\nimport { getToken, getUser } from '../authentication';\nimport { serverUrl } from '../setting';\nimport './CommentForm.css';\n\nclass CommentForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          if (values.comment.length > 100) {\n            message.error(\"댓글 길이가 너무 깁니다!\");\n          } else {\n            //원하는 폼으로 가공\n            const content = {\n              articleID: this.props.articleID,\n              userID: getUser().userID,\n              content: values.comment //http요청 보내기\n\n            };\n            fetch(serverUrl + '/comment', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'token': getToken()\n              },\n              body: JSON.stringify(content)\n            }).then(response => {\n              if (response.status === 200) {\n                //글올리기 성공\n                message.success('댓글이 업로드 되었습니다.'); //댓글 창 리셋\n\n                this.props.form.resetFields();\n                return response.json();\n              } else {\n                //오류 처리\n                return null;\n              }\n            }).then(response => {\n              //다시 렌더링 하기 위해\n              this.props.addComment(response);\n            });\n          }\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Form, {\n      layout: \"inline\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, getFieldDecorator('comment', {\n      rules: [{\n        required: true,\n        message: '댓글을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"message\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }),\n      placeholder: \"Comment\",\n      onPressEnter: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"default\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Form.create()(CommentForm);","map":{"version":3,"sources":["/Users/yeongmo/Documents/201902/YoongSoJongSeol/ChemicalManagementApplication/Dev/Front/src/components/CommentForm.js"],"names":["React","Component","Form","Button","Icon","Input","message","getToken","getUser","serverUrl","CommentForm","handleSubmit","e","preventDefault","props","form","validateFields","err","values","comment","length","error","content","articleID","userID","fetch","method","headers","body","JSON","stringify","then","response","status","success","resetFields","json","addComment","render","getFieldDecorator","rules","required","color","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Button, Icon, Input, message } from 'antd'\n\nimport { getToken, getUser } from '../authentication';\nimport { serverUrl } from '../setting'\n\nimport './CommentForm.css';\n\nclass CommentForm extends Component {\n\n    //댓글 입력 버튼 눌렀을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (values.comment.length > 100) {\n                    message.error(\"댓글 길이가 너무 깁니다!\")\n                } else {\n                    //원하는 폼으로 가공\n                    const content = {\n                        articleID: this.props.articleID,\n                        userID: getUser().userID,\n                        content: values.comment\n                    }\n                    //http요청 보내기\n                    fetch(serverUrl + '/comment', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'token': getToken()\n                        },\n                        body: JSON.stringify(content)\n                    }).then(response => {\n                        if (response.status === 200) {\n                            //글올리기 성공\n                            message.success('댓글이 업로드 되었습니다.');\n                            //댓글 창 리셋\n                            this.props.form.resetFields()\n                            return response.json()\n                        } else {\n                            //오류 처리\n                            return null;\n                        }\n                    })\n                        .then(response => {\n                            //다시 렌더링 하기 위해\n                            this.props.addComment(response);\n                        })\n                }\n\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                    <Form.Item >\n                        {getFieldDecorator('comment', {\n                            rules: [{ required: true, message: '댓글을 입력 해 주세요!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"message\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Comment\"\n                                onPressEnter={this.handleSubmit}\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"default\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(CommentForm);"]},"metadata":{},"sourceType":"module"}