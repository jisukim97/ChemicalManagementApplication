{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBB34\\\\Desktop\\\\git\\\\ChemicalManagementApplication\\\\Dev\\\\Front\\\\src\\\\components\\\\Login.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport { login } from '../authentication';\nimport { serverUrl } from '../setting';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n          //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n          console.log(values);\n          fetch(serverUrl + '/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //로그인이 성공하였을 경우\n              response.json().then(response => {\n                //로컬스토리지에 토큰 및 로그인 정보 저장\n                login(response);\n                console.log(response);\n                message.success(response.user.name + '님 환영합니다!');\n                history.push(\"/mylab\");\n              });\n            } else {\n              //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n              message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n              console.log(\"fail!\");\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: '이메일을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Log in\"), \"Or \", React.createElement(Link, {\n      to: \"/register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"register now!\")));\n  }\n\n}\n\nexport default Form.create()(Login);","map":{"version":3,"sources":["C:\\Users\\무\\Desktop\\git\\ChemicalManagementApplication\\Dev\\Front\\src\\components\\Login.js"],"names":["React","Component","Form","Icon","Input","Button","message","Link","history","login","serverUrl","Login","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","headers","body","JSON","stringify","then","response","result","status","json","success","user","name","push","error","render","getFieldDecorator","rules","required","color","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, message } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { history } from '../History';\r\nimport { login } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\nclass Login extends Component {\r\n\r\n    //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\r\n                //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\r\n                console.log(values)\r\n                fetch(serverUrl + '/login', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(values)\r\n                })\r\n                    .then(response => {\r\n                        const result = response.status;\r\n                        if (result === 200) {\r\n                            //로그인이 성공하였을 경우\r\n                            response.json().then(response => {\r\n                                //로컬스토리지에 토큰 및 로그인 정보 저장\r\n                                login(response)\r\n                                console.log(response)\r\n                                message.success(response.user.name + '님 환영합니다!');\r\n                                history.push(\"/mylab\")\r\n                            })\r\n                        } else {\r\n                            //비밀번호 불일치 혹은 이메일이 등록되지 않았음\r\n                            message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\r\n                            console.log(\"fail!\")\r\n                        }\r\n                    })\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"form\">\r\n                {/* 이메일 폼*/}\r\n                <Form.Item>\r\n                    {getFieldDecorator('email', {\r\n                        rules: [{ required: true, message: '이메일을 입력 해 주세요!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            placeholder=\"Email\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n\r\n                {/* 비밀번호 폼*/}\r\n                <Form.Item>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{ required: true, message: '비밀번호를 입력 해 주세요!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n\r\n                {/* 비밀번호 잃어버림, 로그인, 가입 버튼*/}\r\n                <Form.Item>\r\n                    {/*<Link to='/login/forgot' className=\"login-form-forgot\">Forgot password</Link>*/}\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\r\n                        Log in\r\n                    </Button>\r\n                    Or <Link to=\"/register\">register now!</Link>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(Login);\r\n"]},"metadata":{},"sourceType":"module"}