{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBB34\\\\Desktop\\\\git\\\\ChemicalManagementApplication\\\\Dev\\\\Front\\\\src\\\\components\\\\MyGroupRegister.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { getUser, getLab } from '../authentication';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nimport { login } from '../authentication';\nconst Title = Typography.Title;\n\nclass MyGroupRegister extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(values);\n          const registInformation = {\n            name: values.groupName,\n            password: values.password\n          };\n          fetch(serverUrl + '/lab/' + getUser().id, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(registInformation)\n          }).then(response => {\n            if (response.status === 200) {\n              //가입이 성공적으로 수행 되었을 경우\n              message.success('그룹의 맴버가 되신 것을 환영합니다!');\n            } else if (response.status === 400) {\n              //그룹 이름이 없을 경우\n              message.warning('그룹 이름이 존재하지 않습니다!');\n            } else {\n              //패스워드가 틀릴 경우\n              message.warning('패스워드가 올바르지 않습니다!');\n            }\n          });\n        } else {}\n      });\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      form.validateFields(['confirm'], {\n        force: true\n      });\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, getFieldDecorator('groupName', {\n      rules: [{\n        required: true,\n        message: '그룹 이름을 입력해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }),\n      placeholder: \"Group Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력 해 주세요!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }),\n      placeholder: \"Group Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"\\uAC00\\uC785 \\uC2E0\\uCCAD\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupRegister);","map":{"version":3,"sources":["C:\\Users\\무\\Desktop\\git\\ChemicalManagementApplication\\Dev\\Front\\src\\components\\MyGroupRegister.js"],"names":["React","Component","Form","Icon","Input","Button","message","Modal","Link","Typography","getUser","getLab","history","serverUrl","login","Title","MyGroupRegister","state","visible","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","registInformation","name","groupName","password","fetch","id","method","headers","body","JSON","stringify","then","response","status","success","warning","validateToNextPassword","rule","value","callback","force","render","getFieldDecorator","rules","required","color","validator","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from 'antd';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { history } from '../History';\r\nimport { serverUrl } from '../setting';\r\nimport { login } from '../authentication';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupRegister extends Component {\r\n\r\n  state = { visible: false };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log(values)\r\n        const registInformation = {\r\n          name: values.groupName,\r\n          password: values.password,\r\n        }\r\n        fetch(serverUrl + '/lab/' + getUser().id, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(registInformation)\r\n        }).then(response => {\r\n          if (response.status === 200) {\r\n            //가입이 성공적으로 수행 되었을 경우\r\n            message.success('그룹의 맴버가 되신 것을 환영합니다!');\r\n          } \r\n          else if (response.status === 400) {\r\n            //그룹 이름이 없을 경우\r\n            message.warning('그룹 이름이 존재하지 않습니다!');\r\n          }\r\n          else {\r\n            //패스워드가 틀릴 경우\r\n            message.warning('패스워드가 올바르지 않습니다!');\r\n          }\r\n        })\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    form.validateFields(['confirm'], { force: true });\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className=\"form\">\r\n\r\n        {/* 이름 */}\r\n        <Form.Item>\r\n          {getFieldDecorator('groupName', {\r\n            rules: [{ required: true, message: '그룹 이름을 입력해 주세요!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"Group Name\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n\r\n        {/* 비밀번호 */}\r\n        <Form.Item hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true, message: '비밀번호를 입력 해 주세요!',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password\r\n            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n            placeholder=\"Group Password\" />)}\r\n        </Form.Item>\r\n\r\n        {/* 가입 버튼 */}\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\r\n            가입 신청\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(MyGroupRegister);\r\n"]},"metadata":{},"sourceType":"module"}