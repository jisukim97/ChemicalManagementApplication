{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Register.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Select } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport './Login.css';\nconst Option = Select.Option;\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values); //회원 가입 정보\n\n          const registInformation = {\n            email: values.email,\n            username: values.username,\n            password: values.password,\n            question: values.question,\n            answer: values.answer //http요청\n\n          };\n          fetch('http://localhost:8080/regist', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(registInformation)\n          }).then(response => {\n            if (response.status === 200) {\n              //가입이 성공적으로 수행 되었을 경우\n              message.success('회원이 되신 것을 환영합니다!');\n              history.push(\"/login\");\n            } else {\n              //가입 실패했을 경우\n              message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n            }\n          });\n        } else {\n          //비밀번호 틀렸을 경우 \n          message.error('두 비밀번호가 같은지 확인 해 주세요!');\n        }\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('두 비밀번호가 일치하지 않습니다!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      form.validateFields(['confirm'], {\n        force: true\n      });\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: '이메일 주소를 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }),\n      placeholder: \"Email Address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: '이름을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력 해 주세요!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }),\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 다시 한번 입력 해 주세요!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }),\n      placeholder: \"Confirm password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator('question', {\n      rules: [{\n        required: true,\n        message: '비밀번호 초기화 시 사용될 질문을 골라주세요!'\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Password reset question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"\\uBCF4\\uBB3C 1\\uD638\\uB294?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"\\uBCF4\\uBB3C 1\\uD638\\uB294?\"), React.createElement(Option, {\n      value: \"\\uC5C4\\uB9C8\\uC758 \\uC774\\uB984\\uC740?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"\\uC5C4\\uB9C8\\uC758 \\uC774\\uB984\\uC740?\"), React.createElement(Option, {\n      value: \"\\uC544\\uBE60\\uC758 \\uC774\\uB984\\uC740?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"\\uC544\\uBE60\\uC758 \\uC774\\uB984\\uC740?\"), React.createElement(Option, {\n      value: \"\\uCD9C\\uC2E0 \\uCD08\\uB4F1\\uD559\\uAD50\\uC758 \\uC774\\uB984\\uC740?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"\\uCD9C\\uC2E0 \\uCD08\\uB4F1\\uD559\\uAD50\\uC758 \\uC774\\uB984\\uC740?\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, getFieldDecorator('answer', {\n      rules: [{\n        required: true,\n        message: '질문에 대한 정답을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"question\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }),\n      placeholder: \"Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Register Now!\"), \"Or \", React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"login now!\")));\n  }\n\n}\n\nexport default Form.create()(Register);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Register.js"],"names":["React","Component","Form","Icon","Input","Button","message","Select","Link","history","Option","Register","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","registInformation","email","username","password","question","answer","fetch","method","headers","body","JSON","stringify","then","response","status","success","push","error","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","render","getFieldDecorator","rules","required","color","validator","handleConfirmBlur","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Select } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\n\nimport './Login.css';\n\nconst { Option } = Select;\n\nclass Register extends Component {\n\n    //회원가입 버튼 클릭했을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                //회원 가입 정보\n                const registInformation = {\n                    email : values.email,\n                    username : values.username,\n                    password : values.password,\n                    question : values.question,\n                    answer : values.answer\n                }\n                //http요청\n                fetch('http://localhost:8080/regist', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(registInformation)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //가입이 성공적으로 수행 되었을 경우\n                        message.success('회원이 되신 것을 환영합니다!');\n                        history.push(\"/login\")\n                    } else {\n                        //가입 실패했을 경우\n                        message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n                    }\n                })\n            } else {\n                //비밀번호 틀렸을 경우 \n                message.error('두 비밀번호가 같은지 확인 해 주세요!');\n            }\n        });\n    };\n\n    //비밀번호 두개 일치하는지 확인\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('두 비밀번호가 일치하지 않습니다!');\n        } else {\n            callback();\n        }\n    };\n\n    //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        form.validateFields(['confirm'], { force: true });\n        callback();\n    };\n\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: '이메일 주소를 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email Address\"\n                        />,\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: '이름을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Password\" />)}\n                </Form.Item>\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 다시 한번 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Confirm password\"\n                        onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('question', {\n                        rules: [{ required: true, message: '비밀번호 초기화 시 사용될 질문을 골라주세요!' }],\n                    })(\n                        <Select \n                        placeholder=\"Password reset question\">\n                            <Option value=\"보물 1호는?\">보물 1호는?</Option>\n                            <Option value=\"엄마의 이름은?\">엄마의 이름은?</Option>\n                            <Option value=\"아빠의 이름은?\">아빠의 이름은?</Option>\n                            <Option value=\"출신 초등학교의 이름은?\">출신 초등학교의 이름은?</Option>\n                        </Select>,\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('answer', {\n                        rules: [{ required: true, message: '질문에 대한 정답을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"question\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Answer\"\n                        />,\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Register Now!\n              </Button>\n                    Or <Link to=\"/login\">login now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(Register);\n"]},"metadata":{},"sourceType":"module"}