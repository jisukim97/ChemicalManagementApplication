{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/FriendSerch.js\";\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport { getUser, getToken } from '../authentication';\nimport FriendArray from './FriendArray';\nimport './FriendUnit.css';\nconst Search = Input.Search;\n\nclass FriendSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchList: []\n    };\n\n    this.deleteArray = friend => {\n      let lists = this.state.searchList;\n      lists.splice(lists.indexOf(friend), 1);\n      this.setState({\n        searchList: lists\n      });\n    };\n\n    this.searchForm = () => {\n      return React.createElement(Search, {\n        placeholder: \"\\uCC3E\\uACE0 \\uC2F6\\uC740 \\uCE5C\\uAD6C \\uC774\\uB984\",\n        onSearch: value => {\n          //검색 버튼을 눌렀을 경우 결과를 찾아옴\n          if (value != \"\") {\n            const requesturl = 'http://localhost:8080/friend/search/' + value;\n            fetch(requesturl, {\n              method: 'GET',\n              headers: {\n                'token': getToken()\n              }\n            }).then(response => {\n              if (response.status === 200) {\n                return response.json();\n              } else {\n                console.log('친구검색 에러!');\n                return [];\n              }\n            }).then(response => {\n              this.setState({\n                searchList: response\n              });\n            });\n          }\n        },\n        enterButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n    };\n\n    this.getArray = () => {\n      if (this.state.searchList == null || this.state.searchList == []) {\n        return React.createElement(\"div\", {\n          className: \"marginTopBottom grayColor\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"\\uAC80\\uC0C9 \\uACB0\\uACFC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\");\n      } else {\n        return React.createElement(FriendArray, {\n          friends: this.state.searchList,\n          from: \"search\",\n          deleteArray: this.deleteArray,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      }\n    };\n  } //삭제한 글 state의 리스트에서 삭제해 주어 다시 렌더링\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"\\uCE5C\\uAD6C \\uAC80\\uC0C9\", React.createElement(\"div\", {\n      className: \"marginTopBottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.searchForm()), this.getArray());\n  }\n\n}\n\nexport default FriendSearch;","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/FriendSerch.js"],"names":["React","Component","Input","getUser","getToken","FriendArray","Search","FriendSearch","constructor","props","state","searchList","deleteArray","friend","lists","splice","indexOf","setState","searchForm","value","requesturl","fetch","method","headers","then","response","status","json","console","log","getArray","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,mBAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,kBAAP;MAEQC,M,GAAWJ,K,CAAXI,M;;AAER,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAMjCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAJnBC,KAImB,GAJX;AACJC,MAAAA,UAAU,EAAE;AADR,KAIW;;AAAA,SAMnBC,WANmB,GAMJC,MAAD,IAAY;AACtB,UAAIC,KAAK,GAAG,KAAKJ,KAAL,CAAWC,UAAvB;AACAG,MAAAA,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACE,OAAN,CAAcH,MAAd,CAAb,EAAmC,CAAnC;AACA,WAAKI,QAAL,CAAc;AAACN,QAAAA,UAAU,EAAGG;AAAd,OAAd;AACH,KAVkB;;AAAA,SAanBI,UAbmB,GAaN,MAAM;AACf,aACI,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAC,qDAApB;AAAkC,QAAA,QAAQ,EAAEC,KAAK,IAAI;AACjD;AACA,cAAIA,KAAK,IAAE,EAAX,EAAc;AACV,kBAAMC,UAAU,GAAG,yCAAyCD,KAA5D;AACAE,YAAAA,KAAK,CAACD,UAAD,EAAa;AACdE,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAE;AACL,yBAASnB,QAAQ;AADZ;AAFK,aAAb,CAAL,CAMKoB,IANL,CAMUC,QAAQ,IAAI;AACd,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uBAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,eAFD,MAEO;AACHC,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,uBAAO,EAAP;AACH;AACJ,aAbL,EAaOL,IAbP,CAaYC,QAAQ,IAAI;AAChB,mBAAKR,QAAL,CAAc;AAAEN,gBAAAA,UAAU,EAAEc;AAAd,eAAd;AACH,aAfL;AAgBH;AACJ,SArBD;AAsBE,QAAA,WAAW,MAtBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAyBH,KAvCkB;;AAAA,SA0CnBK,QA1CmB,GA0CR,MAAM;AACb,UAAI,KAAKpB,KAAL,CAAWC,UAAX,IAAwB,IAAxB,IAAgC,KAAKD,KAAL,CAAWC,UAAX,IAAuB,EAA3D,EAA8D;AAC1D,eAAQ;AAAK,UAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAAR;AACH,OAFD,MAEO;AACH,eAAQ,oBAAC,WAAD;AAAa,UAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,UAAjC;AAA6C,UAAA,IAAI,EAAC,QAAlD;AAA2D,UAAA,WAAW,EAAE,KAAKC,WAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACH;AACJ,KAhDkB;AAGlB,GATgC,CAWjC;;;AA8CAmB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKb,UAAL,EADL,CAFJ,EAKK,KAAKY,QAAL,EALL,CADJ;AASH;;AAnEgC;;AAsErC,eAAevB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'antd';\n\nimport { getUser, getToken } from '../authentication';\nimport FriendArray from './FriendArray';\n\nimport './FriendUnit.css';\n\nconst { Search } = Input;\n\nclass FriendSearch extends Component {\n\n    state = {\n        searchList: []\n    };\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    //삭제한 글 state의 리스트에서 삭제해 주어 다시 렌더링\n    deleteArray = (friend) => {\n        let lists = this.state.searchList\n        lists.splice(lists.indexOf(friend),1);\n        this.setState({searchList : lists})\n    }\n\n    //검색 폼\n    searchForm = () => {\n        return (\n            <Search placeholder=\"찾고 싶은 친구 이름\" onSearch={value => {\n                //검색 버튼을 눌렀을 경우 결과를 찾아옴\n                if (value!=\"\"){\n                    const requesturl = 'http://localhost:8080/friend/search/' + value\n                    fetch(requesturl, {\n                        method: 'GET',\n                        headers: {\n                            'token': getToken()\n                        }\n                    })\n                        .then(response => {\n                            if (response.status === 200) {\n                                return response.json();\n                            } else {\n                                console.log('친구검색 에러!')\n                                return [];\n                            }\n                        }).then(response => {\n                            this.setState({ searchList: response })\n                        })    \n                }\n            }\n            } enterButton />\n        )\n    }\n\n    //친구 리스트가 있으면, 리스트를 분배해주는 array 컴포넌트를 리턴\n    getArray = () => {\n        if (this.state.searchList== null || this.state.searchList==[]){\n            return (<div className='marginTopBottom grayColor'>검색 결과가 없습니다</div>);\n        } else {\n            return (<FriendArray friends={this.state.searchList} from=\"search\" deleteArray={this.deleteArray}/>);\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                친구 검색\n                <div className='marginTopBottom'>\n                    {this.searchForm()}\n                </div>\n                {this.getArray()}\n            </div>\n        );\n    }\n}\n\nexport default FriendSearch;"]},"metadata":{},"sourceType":"module"}