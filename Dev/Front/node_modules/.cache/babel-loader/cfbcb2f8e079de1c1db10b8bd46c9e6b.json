{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Checkbox, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport { login } from '../authentication';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values); //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n          //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n\n          fetch('http://localhost:8080/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //로그인이 성공하였을 경우\n              response.json().then(response => {\n                //로컬스토리지에 토큰 및 로그인 정보 저장\n                login(response);\n                message.success(response.user.username + '님 환영합니다!');\n                history.push(\"/main\");\n              });\n            } else if (result === 401) {\n              //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n              message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n              console.log(\"fail!\");\n            } else {//내부 오류\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Remember me\")), React.createElement(\"a\", {\n      className: \"login-form-forgot\",\n      href: \"/login/forgot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Forgot password\"), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Log in\"), \"Or \", React.createElement(Link, {\n      to: \"/register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"register now!\")));\n  }\n\n}\n\nexport default Form.create()(Login);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Login.js"],"names":["React","Component","Form","Icon","Input","Button","Checkbox","message","Link","history","login","Login","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","headers","body","JSON","stringify","then","response","result","status","json","success","user","username","push","error","render","getFieldDecorator","rules","required","color","valuePropName","initialValue","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Checkbox, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport { login } from '../authentication'; \n\nimport './Login.css';\n\nclass Login extends Component {\n\n    //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n                //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n                fetch('http://localhost:8080/login', {\n                    method : 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body : JSON.stringify(values)\n                })\n                .then(response => { \n                    const result = response.status;\n                    if (result === 200){\n                        //로그인이 성공하였을 경우\n                        response.json().then(response => {\n                            //로컬스토리지에 토큰 및 로그인 정보 저장\n                            login(response)\n                            message.success(response.user.username + '님 환영합니다!');\n                            history.push(\"/main\")    \n                        })\n                    } else if (result === 401){\n                        //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n                        message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n                        console.log(\"fail!\")\n                    } else {\n                        //내부 오류\n                    }\n                })\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('remember', {\n                        valuePropName: 'checked',\n                        initialValue: true,\n                    })(<Checkbox>Remember me</Checkbox>)}\n                    <a className=\"login-form-forgot\" href=\"/login/forgot\">\n                        Forgot password\n              </a>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Log in\n              </Button>\n                    Or <Link to=\"/register\">register now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n}\n\nexport default Form.create()(Login);\n"]},"metadata":{},"sourceType":"module"}