{"ast":null,"code":"var _jsxFileName = \"/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupRegister.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nconst Title = Typography.Title;\n\nclass MyGroupRegister extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n          //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n          console.log(values);\n          fetch(serverUrl + '/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //로그인이 성공하였을 경우\n              response.json().then(response => {\n                //로컬스토리지에 토큰 및 로그인 정보 저장\n                login(response);\n                console.log(response);\n                message.success(response.user.name + '님 환영합니다!');\n                history.push(\"/main\");\n              });\n            } else if (result === 401) {\n              //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n              message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n              console.log(\"fail!\");\n            } else {//내부 오류\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        required: true,\n        message: '이메일을 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력 해 주세요!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Log in\"), \"Or \", React.createElement(Link, {\n      to: \"/register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"register now!\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupRegister);","map":{"version":3,"sources":["/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupRegister.js"],"names":["React","Component","Form","Icon","Input","Button","message","Link","Typography","history","serverUrl","Title","MyGroupRegister","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","headers","body","JSON","stringify","then","response","result","status","json","login","success","user","name","push","error","render","getFieldDecorator","rules","required","color","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\n\nconst { Title } = Typography;\n\nclass MyGroupRegister extends Component {\n\n  //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\n  handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n          if (!err) {\n              //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n              //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n              console.log(values)\n              fetch(serverUrl + '/login', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify(values)\n              })\n                  .then(response => {\n                      const result = response.status;\n                      if (result === 200) {\n                          //로그인이 성공하였을 경우\n                          response.json().then(response => {\n                              //로컬스토리지에 토큰 및 로그인 정보 저장\n                              login(response)\n                              console.log(response)\n                              message.success(response.user.name + '님 환영합니다!');\n                              history.push(\"/main\")\n                          })\n                      } else if (result === 401) {\n                          //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n                          message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n                          console.log(\"fail!\")\n                      } else {\n                          //내부 오류\n                      }\n                  })\n          }\n      });\n  };\n\n  render() {\n      const { getFieldDecorator } = this.props.form;\n      return (\n          <Form onSubmit={this.handleSubmit} className=\"form\">\n              {/* 이메일 폼*/}\n              <Form.Item>\n                  {getFieldDecorator('email', {\n                      rules: [{ required: true, message: '이메일을 입력 해 주세요!' }],\n                  })(\n                      <Input\n                          prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          placeholder=\"Email\"\n                      />,\n                  )}\n              </Form.Item>\n\n              {/* 비밀번호 폼*/}\n              <Form.Item>\n                  {getFieldDecorator('password', {\n                      rules: [{ required: true, message: '비밀번호를 입력 해 주세요!' }],\n                  })(\n                      <Input\n                          prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                          type=\"password\"\n                          placeholder=\"Password\"\n                      />,\n                  )}\n              </Form.Item>\n\n              {/* 비밀번호 잃어버림, 로그인, 가입 버튼*/}\n              <Form.Item>\n                  {/*<Link to='/login/forgot' className=\"login-form-forgot\">Forgot password</Link>*/}\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                      Log in\n                  </Button>\n                  Or <Link to=\"/register\">register now!</Link>\n              </Form.Item>\n\n          </Form>\n      );\n  }\n}\n\nexport default Form.create()(MyGroupRegister);\n"]},"metadata":{},"sourceType":"module"}