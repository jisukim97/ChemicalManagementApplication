{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Article.js\";\nimport React, { Component } from 'react';\nimport { getToken, getUser } from '../authentication';\nimport { Avatar, Icon, Row, Col, Button, Popconfirm, notification } from 'antd';\nimport FbImageLibrary from 'react-fb-image-grid';\nimport CommentModal from './CommentModal';\nimport './Article.css'; //소식 삭제 알림\n\nconst openNotificationWithIcon = type => {\n  notification[type]({\n    message: '소식 삭제 성공!',\n    description: '당신의 소식이 더이상 친구들에게 공유되지 않습니다!'\n  });\n};\n\nclass Article extends Component {\n  constructor(props) {\n    super(props); //liked를 \"true\" or \"false\"로 받음\n\n    this.state = {};\n\n    this.likeClick = () => {\n      fetch(\"http://localhost:8080/liked/\" + this.state.articleID + \"/\" + getUser().userID, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      });\n\n      if (this.state.liked == \"true\") {\n        //좋아요 취소\n        this.setState({\n          like: this.state.like - 1,\n          liked: \"false\"\n        });\n      } else {\n        this.setState({\n          like: this.state.like + 1,\n          liked: \"true\"\n        });\n      }\n    };\n\n    this.getPhoto = photoArr => {\n      if (photoArr == null || photoArr == []) {\n        return null;\n      }\n\n      let result = [];\n      photoArr.map(photo => result.push('http://localhost:8080/photo/download?filename=' + photo));\n      return React.createElement(FbImageLibrary, {\n        images: result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    };\n\n    this.getOnePhoto = (fileName, username) => {\n      if (fileName === \"\" || fileName == null) return React.createElement(Avatar, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, username);else return React.createElement(Avatar, {\n        size: \"large\",\n        src: 'http://localhost:8080/photo/download?filename=' + fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n    };\n\n    this.getDate = date => {\n      return \"\" + date.date.year + \"/\" + date.date.month + \"/\" + date.date.day + \" \" + date.time.hour + \":\" + date.time.minute;\n    };\n\n    this.confirm = e => {\n      fetch(\"http://localhost:8080/article/delete/\" + this.state.articleID + \"/\" + getUser().userID, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status == 200) {\n          openNotificationWithIcon('success');\n          this.props.deleteArticle(this.props.article);\n        } else {\n          console.log(\"글 삭제 실패\");\n        }\n      });\n    };\n\n    this.cancel = e => {\n      console.log(e);\n    };\n\n    this.deleteButton = (userID, articleUserID) => {\n      if (userID == articleUserID) {\n        return React.createElement(Popconfirm, {\n          title: \"\\uC774 \\uC18C\\uC2DD\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\",\n          onConfirm: this.confirm,\n          onCancel: this.cancel,\n          okText: \"Yes\",\n          cancelText: \"No\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"X\"));\n      } else {\n        return null;\n      }\n    };\n\n    this.state = {\n      articleUserID: this.props.article.userID,\n      articleUsername: this.props.article.username,\n      articleUserprofile: this.props.article.profile,\n      articleID: this.props.article.articleID,\n      content: this.props.article.content.split('<br>').map((line, i) => {\n        return React.createElement(\"span\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, line, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      }),\n      //줄바꾸기 변환 : 글 입력할 때 db에는 \\n을 <br>로 바꾸어 저장 한 다음에 이걸 다시 줄바꿈 해서 출력해줘야 하므로\n      like: this.props.article.like,\n      liked: this.props.article.liked,\n      // \"true\" 혹은 \"false\"의 문자열로 받아옴\n      photo: this.props.article.photo,\n      createdtime: this.props.article.createdtime\n    };\n  } //좋아요 클릭했을 경우\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"article\",\n      id: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.getOnePhoto(this.state.articleUserprofile, this.state.articleUsername)), React.createElement(\"div\", {\n      className: \"inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"titlAndDate\",\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.articleUserID), React.createElement(\"div\", {\n      className: \"inline rightAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.deleteButton(getUser().userID, this.state.articleUserID))), React.createElement(\"div\", {\n      className: \"titlAndDate\",\n      id: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.getDate(this.state.createdtime)))), React.createElement(\"div\", {\n      className: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, this.state.content), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.getPhoto(this.state.photo)), React.createElement(\"div\", {\n      className: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"like\",\n      theme: \"twoTone\",\n      twoToneColor: \"#eb2f96\",\n      width: \"200px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, this.state.like)), React.createElement(\"div\", {\n      className: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: this.state.liked == \"true\" ? \"primary\" : \"default\",\n      icon: \"like\",\n      onClick: this.likeClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"\\uC88B\\uC544\\uC694\"))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(CommentModal, {\n      articleID: this.state.articleID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Article;","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Article.js"],"names":["React","Component","getToken","getUser","Avatar","Icon","Row","Col","Button","Popconfirm","notification","FbImageLibrary","CommentModal","openNotificationWithIcon","type","message","description","Article","constructor","props","state","likeClick","fetch","articleID","userID","method","headers","liked","setState","like","getPhoto","photoArr","result","map","photo","push","getOnePhoto","fileName","username","getDate","date","year","month","day","time","hour","minute","confirm","e","then","response","status","deleteArticle","article","console","log","cancel","deleteButton","articleUserID","articleUsername","articleUserprofile","profile","content","split","line","i","createdtime","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { getToken, getUser } from '../authentication';\nimport { Avatar, Icon, Row, Col, Button, Popconfirm, notification } from 'antd';\nimport FbImageLibrary from 'react-fb-image-grid'\n\nimport CommentModal from './CommentModal';\n\n\nimport './Article.css';\n\n//소식 삭제 알림\nconst openNotificationWithIcon = type => {\n    notification[type]({\n      message: '소식 삭제 성공!',\n      description:\n        '당신의 소식이 더이상 친구들에게 공유되지 않습니다!',\n    });\n  };  \n\nclass Article extends Component {\n\n    state = {\n    };\n\n    constructor(props) {\n        super(props)\n\n        //liked를 \"true\" or \"false\"로 받음\n        this.state = {\n            articleUserID: this.props.article.userID,\n            articleUsername: this.props.article.username,\n            articleUserprofile: this.props.article.profile,\n            articleID: this.props.article.articleID,\n            content: this.props.article.content.split('<br>').map((line,i) => {\n                return (<span key={i}>{line}<br /></span>);\n            }), //줄바꾸기 변환 : 글 입력할 때 db에는 \\n을 <br>로 바꾸어 저장 한 다음에 이걸 다시 줄바꿈 해서 출력해줘야 하므로\n            like: this.props.article.like,\n            liked: this.props.article.liked, // \"true\" 혹은 \"false\"의 문자열로 받아옴\n            photo: this.props.article.photo,\n            createdtime: this.props.article.createdtime\n        };\n    }\n\n    //좋아요 클릭했을 경우\n    likeClick = () => {\n        fetch(\"http://localhost:8080/liked/\" + this.state.articleID + \"/\" + getUser().userID, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n        if (this.state.liked == \"true\") {\n            //좋아요 취소\n            this.setState({\n                like: this.state.like - 1,\n                liked: \"false\"\n            })\n        } else {\n            this.setState({\n                like: this.state.like + 1,\n                liked: \"true\"\n            })\n        }\n    }\n\n    getPhoto = (photoArr) => {\n        if (photoArr == null || photoArr == []) {\n            return null;\n        }\n        let result = []\n        photoArr.map(photo => result.push('http://localhost:8080/photo/download?filename=' + photo))\n        return (<FbImageLibrary images={result} />);\n    }\n\n    getOnePhoto = (fileName, username) => {\n        if (fileName === \"\" || fileName == null)\n            return <Avatar size='large'>{username}</Avatar>\n        else\n            return <Avatar size='large' src={'http://localhost:8080/photo/download?filename=' + fileName} />\n    }\n\n    getDate = (date) => {\n        return \"\" + date.date.year + \"/\" + date.date.month + \"/\" + date.date.day + \" \" + date.time.hour + \":\" + date.time.minute\n    }\n\n    //글 삭제\n    confirm = (e) => { \n        fetch(\"http://localhost:8080/article/delete/\"+this.state.articleID+\"/\"+getUser().userID, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status == 200) {\n\n                    openNotificationWithIcon('success')\n                    this.props.deleteArticle(this.props.article)\n                } else {\n                    console.log(\"글 삭제 실패\");\n                }\n            })\n    }\n\n    cancel = (e) => {\n        console.log(e);\n    }\n\n    deleteButton = (userID, articleUserID) => {\n        if (userID == articleUserID) {\n            return (\n                <Popconfirm\n                    title=\"이 소식을 삭제하시겠습니까?\"\n                    onConfirm={this.confirm}\n                    onCancel={this.cancel}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n                    <a href=\"#\">X</a>\n                </Popconfirm>\n            )\n        } else {\n            return null\n        }\n    }\n    render() {\n        return (\n            <div className=\"article\" id='box'>\n                <div>\n                    <div className='inline' >\n                        {this.getOnePhoto(this.state.articleUserprofile, this.state.articleUsername)}\n                    </div>\n                    <div className='inline'>\n                        <div className='titlAndDate' id='title'>\n                            <b>{this.state.articleUserID}</b>\n                            <div className='inline rightAlign'>\n                                {this.deleteButton(getUser().userID, this.state.articleUserID)}\n\n                            </div>\n                        </div>\n                        <div className='titlAndDate' id='date'>\n                            {this.getDate(this.state.createdtime)}\n                        </div>\n                    </div>\n                </div>\n                <div className='margin'>\n                    {this.state.content}\n                </div>\n                <div>\n                    {this.getPhoto(this.state.photo)}\n                </div>\n                <div className='margin'>\n                    <Icon type=\"like\" theme=\"twoTone\" twoToneColor=\"#eb2f96\" width='200px' />\n                    <span className='margin'>{this.state.like}</span>\n                </div>\n                <div className='margin'>\n                    <Row>\n                        <Col span={12}>\n                            <center><Button type={this.state.liked == \"true\" ? \"primary\" : \"default\"} icon=\"like\" onClick={this.likeClick}>좋아요</Button></center>\n                        </Col>\n                        <Col span={12}>\n                            <center><CommentModal articleID={this.state.articleID} /></center>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Article;"]},"metadata":{},"sourceType":"module"}