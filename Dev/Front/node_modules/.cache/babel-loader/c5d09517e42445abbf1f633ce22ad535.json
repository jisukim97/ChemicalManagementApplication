{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uBB34\\\\Desktop\\\\git\\\\ChemicalManagementApplication\\\\Dev\\\\Front\\\\src\\\\components\\\\MyGroupMember.js\";\nimport React, { Component } from 'react';\nimport { Form } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { List, Typography } from 'antd';\nimport Member from './Member';\nimport { getUser, getLab } from '../authentication';\nimport { serverUrl } from '../setting';\nconst Title = Typography.Title;\n\nclass MyGroupMember extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      members: [{\n        name: \"정영모\"\n      }, {\n        name: \"이한빈\"\n      }, {\n        name: \"김지수\"\n      }, {\n        name: \"이은무\"\n      }, {\n        name: \"문혁주\"\n      }, {\n        name: \"강주영\"\n      }]\n    };\n\n    this.fetchF = () => {\n      fetch(serverUrl + '/lab/' + getLab().id, {\n        method: 'GET',\n        //'GET', 'POST', 'DELETE' 등등\n        headers: {\n          'Content-Type': 'application/json'\n        } //안고쳐도 됨\n\n      }).then(response => {\n        if (response.status === 200) {\n          //이건 정상적으로 된 경우\n          return response.json();\n        } else {//이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\n        }\n      }).then(response => {\n        //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\n        //여기서 response라는걸 제대로 쓸 수 있음\n        console.log(response); // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\n        //예를들면\n\n        this.setStatus({\n          alarmList: response\n        }); //이렇게 응답받은 실제 결과를 status로 저장해 줄 수 있음\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Lab Members\")), React.createElement(List, {\n      grid: {\n        gutter: 16,\n        column: 3\n      },\n      dataSource: this.state.members,\n      renderItem: item => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Member, {\n        members: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Form.create()(MyGroupMember);","map":{"version":3,"sources":["C:\\Users\\무\\Desktop\\git\\ChemicalManagementApplication\\Dev\\Front\\src\\components\\MyGroupMember.js"],"names":["React","Component","Form","Link","List","Typography","Member","getUser","getLab","serverUrl","Title","MyGroupMember","state","members","name","fetchF","fetch","id","method","headers","then","response","status","json","console","log","setStatus","alarmList","render","marginBottom","gutter","column","item","create"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAgC,MAAhC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,YAA1B;MAIQC,K,GAAUL,U,CAAVK,K;;AAER,MAAMC,aAAN,SAA4BV,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEpCW,KAFoC,GAE5B;AACNC,MAAAA,OAAO,EAAG,CACR;AACEC,QAAAA,IAAI,EAAG;AADT,OADQ,EAIR;AACEA,QAAAA,IAAI,EAAG;AADT,OAJQ,EAOR;AACEA,QAAAA,IAAI,EAAG;AADT,OAPQ,EAUR;AACEA,QAAAA,IAAI,EAAG;AADT,OAVQ,EAaR;AACEA,QAAAA,IAAI,EAAG;AADT,OAbQ,EAgBR;AACEA,QAAAA,IAAI,EAAG;AADT,OAhBQ;AADJ,KAF4B;;AAAA,SAyBpCC,MAzBoC,GAyB3B,MAAM;AACbC,MAAAA,KAAK,CAACP,SAAS,GAAG,OAAZ,GAAsBD,MAAM,GAAGS,EAAhC,EAAoC;AACvCC,QAAAA,MAAM,EAAE,KAD+B;AACxB;AACfC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF8B,CAEU;;AAFV,OAApC,CAAL,CAGCC,IAHD,CAGMC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAHD,MAGO,CACL;AACD;AACF,OAVD,EAUGH,IAVH,CAUQC,QAAQ,IAAI;AAClB;AACA;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAHkB,CAGI;AAGtB;;AACA,aAAKK,SAAL,CAAe;AACbC,UAAAA,SAAS,EAAEN;AADE,SAAf,EAPkB,CAUlB;AACD,OArBD;AAsBD,KAhDmC;AAAA;;AAkDpCO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAG;AAAhB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAR,CAHA,EAIA,oBAAC,IAAD;AACA,MAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,EAAV;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OADN;AAEA,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWC,OAFvB;AAGA,MAAA,UAAU,EAAEmB,IAAI,IACd,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,CADF;AAgBD;;AAnEmC;;AAuEtC,eAAe9B,IAAI,CAAC+B,MAAL,GAActB,aAAd,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Typography} from 'antd';\r\n\r\nimport Member from './Member';\r\nimport { getUser, getLab } from '../authentication';\r\nimport { serverUrl } from '../setting'\r\n\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\nclass MyGroupMember extends Component {\r\n\r\n  state = {\r\n    members : [\r\n      {\r\n        name : \"정영모\"\r\n      },\r\n      {\r\n        name : \"이한빈\"\r\n      },\r\n      {\r\n        name : \"김지수\"\r\n      },\r\n      {\r\n        name : \"이은무\"\r\n      },\r\n      {\r\n        name : \"문혁주\"\r\n      },\r\n      {\r\n        name : \"강주영\"\r\n      }\r\n    ]\r\n  }\r\n  \r\n  fetchF = () => {\r\n    fetch(serverUrl + '/lab/' + getLab().id, {\r\n      method: 'GET', //'GET', 'POST', 'DELETE' 등등\r\n      headers: { 'Content-Type': 'application/json' }, //안고쳐도 됨\r\n  }).then(response => {\r\n      if (response.status === 200) {\r\n        //이건 정상적으로 된 경우\r\n        return response.json()\r\n      } else {\r\n        //이건 오류난 경우 -> 여기서 뭐뭐를 처리해 준다\r\n      }\r\n    }).then(response => {\r\n      //여기서 response로 온 값들을 state로 저장 하던가 해서 쓰면 됨\r\n      //여기서 response라는걸 제대로 쓸 수 있음\r\n      console.log(response) // 이걸로 개발자모드에서 어떠한 응답이 왔는지 확인 가능\r\n      \r\n      \r\n      //예를들면\r\n      this.setStatus({\r\n        alarmList: response\r\n      })\r\n      //이렇게 응답받은 실제 결과를 status로 저장해 줄 수 있음\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      {/* 약품 목록에서 각각 하나의 원소에 대한 Chemical 클래스 */}\r\n      <br/>\r\n      <center><Title style={{marginBottom : 50}}>Lab Members</Title></center>\r\n      <List\r\n      grid={{ gutter: 16, column: 3 }}\r\n      dataSource={this.state.members}\r\n      renderItem={item => (\r\n        <List.Item>\r\n        <Member members={item}/>\r\n        </List.Item>\r\n      )}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Form.create()(MyGroupMember);\r\n"]},"metadata":{},"sourceType":"module"}