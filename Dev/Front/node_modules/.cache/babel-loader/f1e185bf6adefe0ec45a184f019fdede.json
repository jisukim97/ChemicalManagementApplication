{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Comment.js\";\nimport React, { Component } from 'react';\nimport { getUser, getToken } from '../authentication';\nimport { List, Avatar, message } from 'antd';\nimport './Comment.css';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getDate = date => {\n      return \"\" + date.date.year + \"/\" + date.date.month + \"/\" + date.date.day + \" \" + date.time.hour + \":\" + date.time.minute;\n    };\n\n    this.getOnePhoto = (fileName, username) => {\n      if (fileName === \"\" || fileName == null) return React.createElement(Avatar, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, username);else return React.createElement(Avatar, {\n        size: \"large\",\n        src: 'http://localhost:8080/photo/download?filename=' + fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      });\n    };\n\n    this.confirm = (commentID, comment) => {\n      fetch(\"http://localhost:8080/comment/\" + commentID, {\n        method: 'DELETE',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status == 200) {\n          openNotificationWithIcon('success'); //댓글 삭제 처리\n\n          this.props.deleteComment(comment);\n          message.success('댓글 삭제가 완료 되었습니다!');\n        } else {//오류 처리\n        }\n      });\n    };\n\n    this.cancel = e => {\n      console.log(e);\n    };\n\n    this.deleteButton = (userID, commentUserID, commentID, comment) => {\n      if (userID == commentUserID) {\n        return React.createElement(Popconfirm, {\n          title: \"\\uC774 \\uB313\\uAE00\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\",\n          onConfirm: this.confirm(commentID, comment),\n          onCancel: this.cancel,\n          okText: \"Yes\",\n          cancelText: \"No\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"X\"));\n      } else {\n        return null;\n      }\n    };\n  }\n\n  //스크롤을 댓글 제일 아래로 유지하기 위해 (최신 댓글이 제일 아래 위치하므로)\n  scrollToBottom() {\n    const scrollHeight = this.messageList.scrollHeight;\n    const height = this.messageList.clientHeight;\n    const maxScrollTop = scrollHeight - height;\n    this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  } //날짜를 원하는 형식에 맞춰서 출력\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"list\",\n      ref: div => {\n        this.messageList = div;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(List, {\n      itemLayout: \"horizontal\",\n      dataSource: this.props.comments,\n      renderItem: item => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(List.Item.Meta, {\n        avatar: this.getOnePhoto(item.profile, item.username),\n        title: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, item.username), React.createElement(\"span\", {\n          id: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, this.getDate(item.createdtime)), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, this.deleteButton(getUser().userID, item.userID, item.commentID, item))),\n        description: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Comment;","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Comment.js"],"names":["React","Component","getUser","getToken","List","Avatar","message","Comment","getDate","date","year","month","day","time","hour","minute","getOnePhoto","fileName","username","confirm","commentID","comment","fetch","method","headers","then","response","status","openNotificationWithIcon","props","deleteComment","success","cancel","e","console","log","deleteButton","userID","commentUserID","scrollToBottom","scrollHeight","messageList","height","clientHeight","maxScrollTop","scrollTop","componentDidUpdate","componentDidMount","render","div","comments","item","profile","createdtime","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { getUser, getToken } from '../authentication';\nimport { List, Avatar, message } from 'antd'\n\nimport './Comment.css'\nclass Comment extends Component {\n\n    //스크롤을 댓글 제일 아래로 유지하기 위해 (최신 댓글이 제일 아래 위치하므로)\n    scrollToBottom() {\n        const scrollHeight = this.messageList.scrollHeight;\n        const height = this.messageList.clientHeight;\n        const maxScrollTop = scrollHeight - height;\n        this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    //날짜를 원하는 형식에 맞춰서 출력\n    getDate = (date) => {\n        return \"\" + date.date.year + \"/\" + date.date.month + \"/\" + date.date.day + \" \" + date.time.hour + \":\" + date.time.minute\n    }\n\n\n    //프로필 사진을 얻기 위해\n    getOnePhoto = (fileName, username) => {\n        if (fileName === \"\" || fileName == null)\n            return <Avatar size='large'>{username}</Avatar>\n        else\n            return <Avatar size='large' src={'http://localhost:8080/photo/download?filename=' + fileName} />\n    }\n\n\n    //댓글 삭제\n    confirm = (commentID, comment) => {\n        fetch(\"http://localhost:8080/comment/\" + commentID, {\n            method: 'DELETE',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status == 200) {\n                    openNotificationWithIcon('success')\n                    //댓글 삭제 처리\n                    this.props.deleteComment(comment);\n                    message.success('댓글 삭제가 완료 되었습니다!');\n                } else {\n                    //오류 처리\n                }\n            })\n    }\n    cancel = (e) => {\n        console.log(e);\n    }\n\n    //댓글 삭제 버튼\n    deleteButton = (userID, commentUserID, commentID, comment) => {\n        if (userID == commentUserID) {\n            return (\n                <Popconfirm\n                    title=\"이 댓글을 삭제하시겠습니까?\"\n                    onConfirm={this.confirm(commentID, comment)}\n                    onCancel={this.cancel}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n                    <a href=\"#\">X</a>\n                </Popconfirm>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        return (\n            <div className='list'\n                ref={(div) => {\n                    this.messageList = div;\n                }}\n            >\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={this.props.comments}\n                    renderItem={item => (\n                        <List.Item>\n                            <List.Item.Meta\n                                avatar={this.getOnePhoto(item.profile, item.username)}\n                                title={\n                                    <span>\n                                        <b>{item.username}</b>\n                                        <span id=\"date\">\n                                            {this.getDate(item.createdtime)}\n                                        </span>\n                                        <span>\n                                            {this.deleteButton(getUser().userID, item.userID, item.commentID, item)}\n                                        </span>\n                                    </span>\n                                }\n                                description={item.content}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Comment;"]},"metadata":{},"sourceType":"module"}