{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/CommentForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Button, Icon, Input, message } from 'antd';\nimport { getToken, getUser } from '../authentication';\nimport './CommentForm.css';\n\nclass CommentForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values); //원하는 폼으로 가공\n\n          const content = {\n            articleID: this.props.articleID,\n            userID: getUser().userID,\n            content: values.comment //http요청 보내기\n\n          };\n          fetch('http://localhost:8080/comment', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'token': getToken()\n            },\n            body: JSON.stringify(content)\n          }).then(response => {\n            if (response.status === 200) {\n              //글올리기 성공\n              message.success('댓글이 업로드 되었습니다.'); //댓글 창 리셋\n\n              this.props.form.resetFields(); //다시 렌더링 하기 위해\n\n              this.props.loadComments();\n            } else {//오류 처리\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Form, {\n      layout: \"inline\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, getFieldDecorator('comment', {\n      rules: [{\n        required: true,\n        message: 'Please input comment!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"message\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }),\n      placeholder: \"Comment\",\n      onPressEnter: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"default\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Form.create()(CommentForm);","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/CommentForm.js"],"names":["React","Component","Form","Button","Icon","Input","message","getToken","getUser","CommentForm","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","content","articleID","userID","comment","fetch","method","headers","body","JSON","stringify","then","response","status","success","resetFields","loadComments","render","getFieldDecorator","rules","required","color","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Button, Icon, Input, message } from 'antd'\n\nimport { getToken, getUser } from '../authentication';\n\nimport './CommentForm.css';\n\nclass CommentForm extends Component {\n\n    //댓글 입력 버튼 눌렀을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                //원하는 폼으로 가공\n                const content = {\n                    articleID : this.props.articleID,\n                    userID : getUser().userID,\n                    content : values.comment\n                }\n                //http요청 보내기\n                fetch('http://localhost:8080/comment', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'token': getToken()\n                    },\n                    body: JSON.stringify(content)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //글올리기 성공\n                        message.success('댓글이 업로드 되었습니다.');\n                        //댓글 창 리셋\n                        this.props.form.resetFields()      \n                        //다시 렌더링 하기 위해\n                        this.props.loadComments()\n                    } else {\n                        //오류 처리\n                    }\n                });\n\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                    <Form.Item >\n                        {getFieldDecorator('comment', {\n                            rules: [{ required: true, message: 'Please input comment!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"message\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Comment\"\n                                onPressEnter={this.handleSubmit}\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"default\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(CommentForm);"]},"metadata":{},"sourceType":"module"}