{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ForgotPassword.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Checkbox, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nclass ForgotPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visibleEmail: true,\n      visibleQuestion: false,\n      visibleReset: false,\n      question: \"\",\n      email: \"\" //이메일 입력 하고 버튼을 눌렀을 때 : 비밀번호 초기화 질문을 불러와서 물어본다\n\n    };\n\n    this.emailSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch('http://localhost:8080/login/forgot/question', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(values)\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //이메일이 존재 할 경우 성공하였을 경우\n              response.json().then(response => {\n                this.setState({\n                  question: response.question,\n                  visibleEmail: false,\n                  visibleQuestion: true,\n                  email: values.email\n                });\n              });\n            } else if (result === 403) {//이메일이 존재하지 않음\n            } else {//내부 오류\n              }\n          });\n        }\n      });\n    };\n\n    this.emailForm = () => {\n      const getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.emailSubmit,\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB97C \\uC785\\uB825 \\uD574 \\uC8FC\\uC138\\uC694\", getFieldDecorator('email', {\n        rules: [{\n          required: true,\n          message: 'Please input your email address!'\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"mail\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }),\n        placeholder: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Submit Email Address\"), \"Or \", React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"login now!\"))));\n    };\n\n    this.questionSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch('http://localhost:8080/login/forgot/answer', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              answer: values.answer,\n              email: this.state.email\n            })\n          }).then(response => {\n            const result = response.status;\n\n            if (result === 200) {\n              //이메일이 존재 할 경우 성공하였을 경우\n              response.json().then(response => {\n                this.setState({\n                  visibleQuestion: false,\n                  visibleReset: true\n                });\n              });\n            } else if (result === 403) {//이메일이 존재하지 않음\n            } else {//내부 오류\n              }\n          });\n        }\n      });\n    };\n\n    this.questionForm = () => {\n      const getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.questionSubmit,\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.question, getFieldDecorator('answer', {\n        rules: [{\n          required: true,\n          message: 'Please input your answer!'\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"question\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }),\n        placeholder: \"Answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Submit Answer\"), \"Or \", React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"login now!\"))));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.visibleEmail && this.emailForm(), this.state.visibleQuestion && this.questionForm());\n  }\n\n}\n\nexport default Form.create()(ForgotPassword); //해야할일 : 비밀번호 찾기 페이지, 유저 프로필 등록 페이지, 홈 페이지","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/ForgotPassword.js"],"names":["React","Component","Form","Icon","Input","Button","Checkbox","message","Link","ForgotPassword","state","visibleEmail","visibleQuestion","visibleReset","question","email","emailSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","headers","body","JSON","stringify","then","response","result","status","json","setState","emailForm","getFieldDecorator","rules","required","color","questionSubmit","answer","questionForm","render","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Checkbox, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\n\nclass ForgotPassword extends Component {\n    state = {\n        visibleEmail: true,\n        visibleQuestion: false,\n        visibleReset : false,\n        question :\"\",\n        email:\"\"\n    }\n    //이메일 입력 하고 버튼을 눌렀을 때 : 비밀번호 초기화 질문을 불러와서 물어본다\n    emailSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch('http://localhost:8080/login/forgot/question', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(values)\n                })\n                    .then(response => {\n                        const result = response.status;\n                        if (result === 200) {\n                            //이메일이 존재 할 경우 성공하였을 경우\n                            response.json().then(response => {\n                                this.setState({\n                                    question : response.question,\n                                    visibleEmail : false,\n                                    visibleQuestion : true,\n                                    email : values.email\n                                })\n                            })\n                        } else if (result === 403) {\n                            //이메일이 존재하지 않음\n                        } else {\n                            //내부 오류\n                        }\n                    })\n            }\n        });\n    };\n    emailForm = () => {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <span>\n                <Form onSubmit={this.emailSubmit} className=\"form\">\n                    <Form.Item>\n                        이메일 주소를 입력 해 주세요\n                        {getFieldDecorator('email', {\n                            rules: [{ required: true, message: 'Please input your email address!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Email\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                            Submit Email Address\n                        </Button>\n                        Or <Link to=\"/login\">login now!</Link>\n                    </Form.Item>\n                </Form >\n            </span>\n        );\n    }\n    //질문에 대한 답 입력 하고 버튼을 눌렀을 때 : 맞다면 비밀번호 초기화 폼을 불러온다\n    questionSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch('http://localhost:8080/login/forgot/answer', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        answer : values.answer,\n                        email : this.state.email\n                    })\n                })\n                    .then(response => {\n                        const result = response.status;\n                        if (result === 200) {\n                            //이메일이 존재 할 경우 성공하였을 경우\n                            response.json().then(response => {\n                                this.setState({\n                                    visibleQuestion : false,\n                                    visibleReset : true\n                                })\n                            })\n                        } else if (result === 403) {\n                            //이메일이 존재하지 않음\n                        } else {\n                            //내부 오류\n                        }\n                    })\n            }\n        });\n    };\n    questionForm = () => {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <span>\n                <Form onSubmit={this.questionSubmit} className=\"form\">\n                    <Form.Item>\n                        {this.state.question}\n                        {getFieldDecorator('answer', {\n                            rules: [{ required: true, message: 'Please input your answer!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"question\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Answer\"\n                            />,\n                        )}\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                            Submit Answer\n                        </Button>\n                        Or <Link to=\"/login\">login now!</Link>\n                    </Form.Item>\n                </Form >\n            </span>\n        );\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.state.visibleEmail && this.emailForm()}\n                {this.state.visibleQuestion && this.questionForm()}\n            </div>\n        );\n    }\n}\n\n\nexport default Form.create()(ForgotPassword);\n\n//해야할일 : 비밀번호 찾기 페이지, 유저 프로필 등록 페이지, 홈 페이지\n"]},"metadata":{},"sourceType":"module"}