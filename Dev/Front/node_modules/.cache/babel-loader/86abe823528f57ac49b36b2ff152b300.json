{"ast":null,"code":"var _jsxFileName = \"/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nconst Title = Typography.Title;\n\nclass MyGroupGenerate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCancel = e => {\n      console.log(e);\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //그룹 생성 정보\n          const registInformation = {\n            groupName: values.groupName,\n            groupPassword: values.groupPassword //http요청\n\n          };\n          fetch(serverUrl + '/regist', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(registInformation)\n          }).then(response => {\n            if (response.status === 200) {\n              //그룹 생이 성공적으로 수행 되었을 경우\n              message.success('그룹이 생성되었습니다!'); //history.push(\"/login\")\n            } else if (response.status === 403) {\n              //생 실패했을 경우\n              message.error('같은 그룹 이름을 사용하는 그룹이 이미 존재합니다!');\n            } else {//요청 오류 발생\n            }\n          });\n        } else {\n          //비밀번호 틀렸을 경우\n          message.error('두 비밀번호가 같은지 확인 해 주세요!');\n        }\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('groupPassword')) {\n        callback('두 비밀번호가 일치하지 않습니다!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      form.validateFields(['confirm'], {\n        force: true\n      });\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"my Lab \\uC0DD\\uC131\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('groupName', {\n      rules: [{\n        required: true,\n        message: '그룹 이름을 입력해 주세요!'\n      }]\n    })(React.createElement(Input //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n    , {\n      placeholder: \"Group Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, getFieldDecorator('groupPassword', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력해 주세요!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }),\n      placeholder: \"Group Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 다시 한번 입력해 주세요!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }),\n      placeholder: \"Confirm Group Password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"\\uD0C8\\uD1F4\\uD558\\uAE30\"), React.createElement(Modal, {\n      title: \"\\uD0C8\\uD1F4\\uD558\\uAE30\",\n      visible: this.state.visible,\n      onOk: this.handleOk,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"\\uC5D0\\uC11C \\uC815\\uB9D0 \\uD0C8\\uD1F4 \\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"(\\uD0C8\\uD1F4\\uC2DC, \\uAE30\\uAE30 \\uC608\\uC57D, \\uC54C\\uB9BC \\uB4F1\\uC758 \\uC815\\uBCF4\\uAC00 \\uBAA8\\uB450 \\uC0AD\\uC81C \\uB429\\uB2C8\\uB2E4.)\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupGenerate);","map":{"version":3,"sources":["/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js"],"names":["React","Component","Form","Icon","Input","Button","message","Modal","Link","Typography","history","serverUrl","Title","MyGroupGenerate","state","visible","showModal","setState","handleOk","e","console","log","handleCancel","handleSubmit","preventDefault","props","form","validateFields","err","values","registInformation","groupName","groupPassword","fetch","method","headers","body","JSON","stringify","then","response","status","success","error","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","render","getFieldDecorator","margin","marginBottom","rules","required","validator","color","handleConfirmBlur","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\n\nconst { Title } = Typography;\n\nclass MyGroupGenerate extends Component {\n\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n    //그룹 생성 버튼 클릭했을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //그룹 생성 정보\n                const registInformation = {\n                    groupName : values.groupName,\n                    groupPassword : values.groupPassword,\n                }\n                //http요청\n                fetch(serverUrl + '/regist', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(registInformation)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //그룹 생이 성공적으로 수행 되었을 경우\n                        message.success('그룹이 생성되었습니다!');\n                        //history.push(\"/login\")\n                    } else if (response.status === 403) {\n                        //생 실패했을 경우\n                        message.error('같은 그룹 이름을 사용하는 그룹이 이미 존재합니다!');\n                    } else {\n                        //요청 오류 발생\n                    }\n                })\n            } else {\n                //비밀번호 틀렸을 경우\n                message.error('두 비밀번호가 같은지 확인 해 주세요!');\n            }\n        });\n    };\n\n    //비밀번호 두개 일치하는지 확인\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('groupPassword')) {\n            callback('두 비밀번호가 일치하지 않습니다!');\n        } else {\n            callback();\n        }\n    };\n\n    //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        form.validateFields(['confirm'], { force: true });\n        callback();\n    };\n\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n          <div style={{ margin: '10px 0' }}>\n            <center><Title style={{marginBottom : 50}}>my Lab 생성</Title></center>\n\n                {/* 그룹 이름 */}\n                <Form.Item>\n                    {getFieldDecorator('groupName', {\n                        rules: [{ required: true, message: '그룹 이름을 입력해 주세요!' }],\n                    })(\n                        <Input\n                            //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Group Name\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 그룹 비밀번호1 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('groupPassword', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 입력해 주세요!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Group Password\" />)}\n                </Form.Item>\n\n                {/* 비밀번호2 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 다시 한번 입력해 주세요!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Confirm Group Password\"\n                        onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n\n\n                <Button type=\"primary\" onClick={this.showModal}>\n                탈퇴하기\n                </Button>\n                <Modal\n                title=\"탈퇴하기\"\n                visible={this.state.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                >\n                <p>에서 정말 탈퇴 하시겠습니까?</p>\n                <p>(탈퇴시, 기기 예약, 알림 등의 정보가 모두 삭제 됩니다.)</p>\n\n                </Modal>\n\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(MyGroupGenerate);\n"]},"metadata":{},"sourceType":"module"}