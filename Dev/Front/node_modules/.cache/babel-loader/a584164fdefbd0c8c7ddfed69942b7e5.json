{"ast":null,"code":"var _class, _temp;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { Image, Grid, Row, Col } from 'react-bootstrap';\nimport Modal from './Modal';\nimport PropTypes from 'prop-types';\nvar Images = (_temp = _class = function (_Component) {\n  _inherits(Images, _Component);\n\n  function Images(props) {\n    _classCallCheck(this, Images);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      modal: false,\n      countFrom: props.countFrom > 0 && props.countFrom < 5 ? props.countFrom : 5,\n      conditionalRender: false\n    };\n    _this.openModal = _this.openModal.bind(_this);\n    _this.onClose = _this.onClose.bind(_this);\n\n    if (props.countFrom <= 0 || props.countFrom > 5) {\n      console.warn('countFrom is limited to 5!');\n    }\n\n    return _this;\n  }\n\n  Images.prototype.openModal = function openModal(index) {\n    var _props = this.props,\n        onClickEach = _props.onClickEach,\n        images = _props.images;\n\n    if (onClickEach) {\n      return onClickEach({\n        src: images[index],\n        index: index\n      });\n    }\n\n    this.setState({\n      modal: true,\n      url: images[index],\n      index: index\n    });\n  };\n\n  Images.prototype.onClose = function onClose() {\n    this.setState({\n      modal: false\n    });\n  };\n\n  Images.prototype.renderOne = function renderOne() {\n    var images = this.props.images;\n    var countFrom = this.state.countFrom;\n    var overlay = images.length > countFrom && countFrom == 1 ? this.renderCountOverlay(true) : this.renderOverlay();\n    return React.createElement(Grid, null, React.createElement(Row, null, React.createElement(Col, {\n      xs: 12,\n      md: 12,\n      className: 'border height-one background',\n      onClick: this.openModal.bind(this, 0),\n      style: {\n        background: 'url(' + images[0] + ')'\n      }\n    }, overlay)));\n  };\n\n  Images.prototype.renderTwo = function renderTwo() {\n    var images = this.props.images;\n    var countFrom = this.state.countFrom;\n    var overlay = images.length > countFrom && [2, 3].includes(+countFrom) ? this.renderCountOverlay(true) : this.renderOverlay();\n    var conditionalRender = [3, 4].includes(images.length) || images.length > +countFrom && [3, 4].includes(+countFrom);\n    return React.createElement(Grid, null, React.createElement(Row, null, React.createElement(Col, {\n      xs: 6,\n      md: 6,\n      className: 'border height-two background',\n      onClick: this.openModal.bind(this, conditionalRender ? 1 : 0),\n      style: {\n        background: 'url(' + (conditionalRender ? images[1] : images[0]) + ')'\n      }\n    }, this.renderOverlay()), React.createElement(Col, {\n      xs: 6,\n      md: 6,\n      className: 'border height-two background',\n      onClick: this.openModal.bind(this, conditionalRender ? 2 : 1),\n      style: {\n        background: 'url(' + (conditionalRender ? images[2] : images[1]) + ')'\n      }\n    }, overlay)));\n  };\n\n  Images.prototype.renderThree = function renderThree(more) {\n    var images = this.props.images;\n    var countFrom = this.state.countFrom;\n    var overlay = !countFrom || countFrom > 5 || images.length > countFrom && [4, 5].includes(+countFrom) ? this.renderCountOverlay(true) : this.renderOverlay(conditionalRender ? 3 : 4);\n    var conditionalRender = images.length == 4 || images.length > +countFrom && +countFrom == 4;\n    return React.createElement(Grid, null, React.createElement(Row, null, React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      className: 'border height-three background',\n      onClick: this.openModal.bind(this, conditionalRender ? 1 : 2),\n      style: {\n        background: 'url(' + (conditionalRender ? images[1] : images[2]) + ')'\n      }\n    }, this.renderOverlay(conditionalRender ? 1 : 2)), React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      className: 'border height-three background',\n      onClick: this.openModal.bind(this, conditionalRender ? 2 : 3),\n      style: {\n        background: 'url(' + (conditionalRender ? images[2] : images[3]) + ')'\n      }\n    }, this.renderOverlay(conditionalRender ? 2 : 3)), React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      className: 'border height-three background',\n      onClick: this.openModal.bind(this, conditionalRender ? 3 : 4),\n      style: {\n        background: 'url(' + (conditionalRender ? images[3] : images[4]) + ')'\n      }\n    }, overlay)));\n  };\n\n  Images.prototype.renderOverlay = function renderOverlay(id) {\n    var _props2 = this.props,\n        hideOverlay = _props2.hideOverlay,\n        renderOverlay = _props2.renderOverlay,\n        overlayBackgroundColor = _props2.overlayBackgroundColor;\n\n    if (hideOverlay) {\n      return false;\n    }\n\n    return [React.createElement('div', {\n      key: 'cover-' + id,\n      className: 'cover slide',\n      style: {\n        backgroundColor: overlayBackgroundColor\n      }\n    }), React.createElement('div', {\n      key: 'cover-text-' + id,\n      className: 'cover-text slide animate-text',\n      style: {\n        fontSize: '100%'\n      }\n    }, renderOverlay())];\n  };\n\n  Images.prototype.renderCountOverlay = function renderCountOverlay(more) {\n    var images = this.props.images;\n    var countFrom = this.state.countFrom;\n    var extra = images.length - (countFrom && countFrom > 5 ? 5 : countFrom);\n    return [more && React.createElement('div', {\n      key: 'count',\n      className: 'cover'\n    }), more && React.createElement('div', {\n      key: 'count-sub',\n      className: 'cover-text',\n      style: {\n        fontSize: '200%'\n      }\n    }, React.createElement('p', null, '+', extra))];\n  };\n\n  Images.prototype.render = function render() {\n    var _state = this.state,\n        modal = _state.modal,\n        index = _state.index,\n        countFrom = _state.countFrom;\n    var images = this.props.images;\n    var imagesToShow = [].concat(images);\n\n    if (countFrom && images.length > countFrom) {\n      imagesToShow.length = countFrom;\n    }\n\n    return React.createElement('div', {\n      className: 'grid-container'\n    }, [1, 3, 4].includes(imagesToShow.length) && this.renderOne(), imagesToShow.length >= 2 && imagesToShow.length != 4 && this.renderTwo(), imagesToShow.length >= 4 && this.renderThree(), modal && React.createElement(Modal, {\n      onClose: this.onClose,\n      index: index,\n      images: images\n    }));\n  };\n\n  return Images;\n}(Component), _class.defaultProps = {\n  images: [],\n  hideOverlay: false,\n  renderOverlay: function renderOverlay() {\n    return 'Preview Image';\n  },\n  overlayBackgroundColor: '#222222',\n  onClickEach: null,\n  countFrom: 5\n}, _temp);\nImages.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  images: PropTypes.array.isRequired,\n  hideOverlay: PropTypes.bool,\n  renderOverlay: PropTypes.func,\n  overlayBackgroundColor: PropTypes.string,\n  onClickEach: PropTypes.func,\n  countFrom: PropTypes.number\n} : {};\nexport default Images;","map":null,"metadata":{},"sourceType":"module"}