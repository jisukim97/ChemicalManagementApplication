{"ast":null,"code":"var _jsxFileName = \"/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\nconst Title = Typography.Title;\n\nclass MyGroupGenerate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //그룹 생성 정보\n          console.log(values);\n          const registInformation = {\n            groupName: values.groupName,\n            groupPassword: values.groupPassword //http요청\n\n          };\n          fetch(serverUrl + '/regist', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(registInformation)\n          }).then(response => {\n            if (response.status === 200) {\n              //그룹 생이 성공적으로 수행 되었을 경우\n              message.success('그룹이 생성되었습니다!');\n              this.props.enrollLab(3); //history.push(\"/login\")\n            } else if (response.status === 403) {\n              //생 실패했을 경우\n              message.error('같은 그룹 이름을 사용하는 그룹이 이미 존재합니다!');\n            } else {//요청 오류 발생\n            }\n          });\n        } else {\n          //비밀번호 틀렸을 경우\n          message.error('두 비밀번호가 같은지 확인 해 주세요!');\n        }\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('groupPassword')) {\n        callback('두 비밀번호가 일치하지 않습니다!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      form.validateFields(['confirm'], {\n        force: true\n      });\n      callback();\n    };\n  } //그룹 생성 버튼 클릭했을 때\n\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Title, {\n      style: {\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"my Lab \\uC0DD\\uC131\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, getFieldDecorator('groupName', {\n      rules: [{\n        required: true,\n        message: '그룹 이름을 입력해 주세요!'\n      }]\n    })(React.createElement(Input //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n    , {\n      placeholder: \"Group Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, getFieldDecorator('groupPassword', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 입력해 주세요!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }),\n      placeholder: \"Group Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '비밀번호를 다시 한번 입력해 주세요!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }),\n      placeholder: \"Confirm Group Password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"\\uADF8\\uB8F9 \\uC0DD\\uC131\\uD558\\uAE30\")));\n  }\n\n}\n\nexport default Form.create()(MyGroupGenerate);","map":{"version":3,"sources":["/Users/Jennifer/Documents/GitHub/ChemicalManagementApplication/Dev/Front/src/components/MyGroupGenerate.js"],"names":["React","Component","Form","Icon","Input","Button","message","Link","Typography","history","serverUrl","Title","MyGroupGenerate","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","registInformation","groupName","groupPassword","fetch","method","headers","body","JSON","stringify","then","response","status","success","enrollLab","error","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","render","getFieldDecorator","margin","marginBottom","rules","required","validator","color","handleConfirmBlur","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { Typography } from 'antd';\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting';\n\nconst { Title } = Typography;\n\nclass MyGroupGenerate extends Component {\n\n  constructor(props){\n    super(props);\n  }\n\n  //그룹 생성 버튼 클릭했을 때\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        //그룹 생성 정보\n        console.log(values)\n        const registInformation = {\n          groupName : values.groupName,\n          groupPassword : values.groupPassword,\n        }\n        //http요청\n        fetch(serverUrl + '/regist', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(registInformation)\n        }).then(response => {\n          if (response.status === 200) {\n            //그룹 생이 성공적으로 수행 되었을 경우\n            message.success('그룹이 생성되었습니다!');\n            this.props.enrollLab(3);\n            //history.push(\"/login\")\n          } else if (response.status === 403) {\n            //생 실패했을 경우\n            message.error('같은 그룹 이름을 사용하는 그룹이 이미 존재합니다!');\n          } else {\n            //요청 오류 발생\n          }\n        })\n      } else {\n        //비밀번호 틀렸을 경우\n        message.error('두 비밀번호가 같은지 확인 해 주세요!');\n      }\n    });\n  };\n\n  //비밀번호 두개 일치하는지 확인\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('groupPassword')) {\n      callback('두 비밀번호가 일치하지 않습니다!');\n    } else {\n      callback();\n    }\n  };\n\n  //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    form.validateFields(['confirm'], { force: true });\n    callback();\n  };\n\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div style={{ margin: '10px 0' }}>\n      <center><Title style={{marginBottom : 50}}>my Lab 생성</Title></center>\n\n      {/* 그룹 이름 */}\n      <Form.Item>\n      {getFieldDecorator('groupName', {\n        rules: [{ required: true, message: '그룹 이름을 입력해 주세요!' }],\n      })(\n        <Input\n        //prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n        placeholder=\"Group Name\"\n        />,\n      )}\n      </Form.Item>\n\n      {/* 그룹 비밀번호1 */}\n      <Form.Item hasFeedback>\n      {getFieldDecorator('groupPassword', {\n        rules: [\n          {\n            required: true,\n            message: '비밀번호를 입력해 주세요!',\n          },\n          {\n            validator: this.validateToNextPassword,\n          },\n        ],\n      })(<Input.Password\n        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n        placeholder=\"Group Password\" />)}\n        </Form.Item>\n\n        {/* 비밀번호2 */}\n        <Form.Item hasFeedback>\n        {getFieldDecorator('confirm', {\n          rules: [\n            {\n              required: true,\n              message: '비밀번호를 다시 한번 입력해 주세요!',\n            },\n            {\n              validator: this.compareToFirstPassword,\n            },\n          ],\n        })(<Input.Password\n          prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n          placeholder=\"Confirm Group Password\"\n          onBlur={this.handleConfirmBlur} />)}\n          </Form.Item>\n\n          {/* 그룹 생성 버튼 */}\n          <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n          그룹 생성하기\n          </Button>\n          </Form.Item>\n\n          </div>\n        );\n      }\n    }\n\n    export default Form.create()(MyGroupGenerate);\n"]},"metadata":{},"sourceType":"module"}