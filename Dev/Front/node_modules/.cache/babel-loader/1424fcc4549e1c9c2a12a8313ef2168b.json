{"ast":null,"code":"var _jsxFileName = \"/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Button, message, Popconfirm } from 'antd';\nimport ArticleArray from './ArticleArray';\nimport { getUser, getToken } from '../authentication';\nimport { serverUrl } from '../setting';\nimport './Box.css';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props); //누구의 소식 모아보긴지 파라미터를 통해 얻음ㅁ\n\n    this.state = {\n      articles: [],\n      user: {},\n      relationship: 1\n    };\n\n    this.loadingRelationship = others => {\n      const requesturl = serverUrl + '/friend/request/check/' + getUser().userID + '/' + others;\n      fetch(requesturl, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          console.log('관계 불러오기 에러!');\n          return [];\n        }\n      }).then(response => this.setState({\n        relationship: response\n      }));\n    };\n\n    this.loadingUser = others => {\n      const requesturl = serverUrl + '/user/getinfo/' + others;\n      fetch(requesturl, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          console.log('유저 정보 불러오기 에러!');\n          return [];\n        }\n      }).then(response => this.setState({\n        user: response\n      }));\n    };\n\n    this.loadingArticles = others => {\n      const requesturl = serverUrl + '/article/home/' + others + '/' + getUser().userID;\n      fetch(requesturl, {\n        method: 'GET',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          console.log('소식 불러오기 에러!');\n          return [];\n        }\n      }).then(response => this.setState({\n        articles: response\n      }));\n    };\n\n    this.deleteArticle = article => {\n      let articles = this.state.articles;\n      articles.splice(articles.indexOf(article), 1);\n      this.setState({\n        articles: articles\n      });\n    };\n\n    this.getOnePhoto = (fileName, username) => {\n      if (fileName === \"\" || fileName == null) return React.createElement(Avatar, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, username);else return React.createElement(Avatar, {\n        size: \"large\",\n        src: serverUrl + '/photo/download?filename=' + fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    };\n\n    this.getButton = () => {\n      const userID = this.props.match.params.userID;\n\n      if (getUser().userID == userID) {\n        return null;\n      } else if (this.state.relationship === 1) {\n        //이미 친구인 상태\n        return React.createElement(Popconfirm, {\n          title: \"\\uC815\\uB9D0 \\uCE5C\\uAD6C \\uAD00\\uACC4\\uB97C \\uB04A\\uC73C\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\",\n          onConfirm: this.confirm,\n          onCancel: this.cancel,\n          okText: \"Yes\",\n          cancelText: \"No\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(Button, {\n          type: \"danger\",\n          size: \"small\",\n          ghost: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"\\uCE5C\\uAD6C\\uB04A\\uAE30\"));\n      } else if (this.state.relationship === 2) {\n        //이미 친구요청 보낸  상태\n        return React.createElement(Button, {\n          size: \"small\",\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"\\uC774\\uBBF8\\uC2E0\\uCCAD\\uD588\\uC74C\");\n      } else if (this.state.relationship === 3) {\n        //이미 친구요청 받은 상태\n        return React.createElement(Button, {\n          size: \"small\",\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"\\uCE5C\\uAD6C\\uC694\\uCCAD\\uBC1B\\uC74C\");\n      } else {\n        return React.createElement(Button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: this.sendRequest,\n          ghost: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"\\uCE5C\\uAD6C\\uC2E0\\uCCAD\");\n      }\n    };\n\n    this.sendRequest = () => {\n      const userID = this.props.match.params.userID;\n      fetch(serverUrl + \"/friend/request/\" + getUser().userID + \"/\" + userID, {\n        method: 'POST',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success(\"친구 요청을 보냈습니다!\");\n          this.setState({\n            relationship: 2\n          });\n        } else {\n          //오류 처리\n          console.log(\"error!\");\n        }\n      });\n    };\n\n    this.confirm = e => {\n      const userID = this.props.match.params.userID;\n      const requesturl = serverUrl + '/friends/' + userID + '/' + getUser().userID;\n      fetch(requesturl, {\n        method: 'DELETE',\n        headers: {\n          'token': getToken()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          message.success('더이상 친구관계가 아닙니다');\n          this.setState({\n            relationship: 4\n          });\n        } else {\n          console.log('친구 삭제');\n          return [];\n        }\n      });\n    };\n\n    this.cancel = e => {};\n\n    const _userID = this.props.match.params.userID;\n    this.loadingUser(_userID);\n    this.loadingArticles(_userID);\n    this.loadingRelationship(_userID);\n  }\n\n  shouldComponentUpdate(props) {\n    return true;\n  } //현재 페이지 내에서 파라미터만 변경되었을 경우 (소식 모아보기 -> 다른사람 소식 모아보기)\n\n\n  componentWillReceiveProps(newProps) {\n    if (this.props.match.params !== newProps.match.params) {\n      const userID = newProps.match.params.userID;\n      this.loadingUser(userID);\n      this.loadingArticles(userID);\n      this.loadingRelationship(userID);\n    }\n  } //나와의 관계가 무엇인지?\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.getOnePhoto(this.state.user.profile, this.state.user.username)), React.createElement(\"span\", {\n      id: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.state.user.username), \" \\uC758 \\uC18C\\uC2DD \\uBAA8\\uC544\\uBCF4\\uAE30\"), React.createElement(\"span\", {\n      id: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.getButton())), React.createElement(ArticleArray, {\n      articles: this.state.articles,\n      deleteArticle: this.deleteArticle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/yeongmo/Documents/Programming/timeline/timeline/src/components/Home.js"],"names":["React","Component","Avatar","Button","message","Popconfirm","ArticleArray","getUser","getToken","serverUrl","Home","constructor","props","state","articles","user","relationship","loadingRelationship","others","requesturl","userID","fetch","method","headers","then","response","status","json","console","log","setState","loadingUser","loadingArticles","deleteArticle","article","splice","indexOf","getOnePhoto","fileName","username","getButton","match","params","confirm","cancel","sendRequest","success","e","shouldComponentUpdate","componentWillReceiveProps","newProps","render","profile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Avatar, Button, message, Popconfirm } from 'antd';\n\nimport ArticleArray from './ArticleArray';\nimport { getUser, getToken } from '../authentication';\nimport { serverUrl } from '../setting'\n\nimport './Box.css';\n\nclass Home extends Component {\n    state = {\n        articles: [],\n        user: {},\n        relationship: 1\n    }\n\n    constructor(props) {\n        super(props)\n\n        //누구의 소식 모아보긴지 파라미터를 통해 얻음ㅁ\n        const { userID } = this.props.match.params\n        this.loadingUser(userID);\n        this.loadingArticles(userID)\n        this.loadingRelationship(userID);\n    }\n\n    shouldComponentUpdate(props) {\n        return true\n    }\n\n    //현재 페이지 내에서 파라미터만 변경되었을 경우 (소식 모아보기 -> 다른사람 소식 모아보기)\n    componentWillReceiveProps(newProps){\n        if (this.props.match.params !== newProps.match.params){\n            const { userID } = newProps.match.params;\n            this.loadingUser(userID);\n            this.loadingArticles(userID)\n            this.loadingRelationship(userID);    \n        }\n    }\n\n    //나와의 관계가 무엇인지?\n    loadingRelationship = (others) => {\n        const requesturl = serverUrl + '/friend/request/check/' + getUser().userID + '/' + others\n        fetch(requesturl, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    console.log('관계 불러오기 에러!')\n                    return [];\n                }\n            }).then(response => this.setState({ relationship: response }))\n\n    }\n\n    //해당 사람의 프로필 얻어오기\n    loadingUser = ( others) => {\n        const requesturl = serverUrl + '/user/getinfo/' + others\n        fetch(requesturl, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    console.log('유저 정보 불러오기 에러!')\n                    return [];\n                }\n            }).then(response => this.setState({ user: response }))\n    }\n\n    //해당 사람의 소식 모아보기\n    loadingArticles = (others) => {\n        const requesturl = serverUrl + '/article/home/' + others + '/' + getUser().userID\n        fetch(requesturl, {\n            method: 'GET',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    console.log('소식 불러오기 에러!')\n                    return [];\n                }\n            }).then(response => this.setState({ articles: response }))\n    }\n\n    //삭제한 글 state의 리스트에서 삭제해 주어 다시 렌더링\n    deleteArticle = (article) => {\n        let articles = this.state.articles\n        articles.splice(articles.indexOf(article), 1);\n        this.setState({ articles: articles })\n    }\n\n    //프로필 사진을 받아오기\n    getOnePhoto = (fileName, username) => {\n        if (fileName === \"\" || fileName == null)\n            return <Avatar size='large'>{username}</Avatar>\n        else\n            return <Avatar size='large' src={serverUrl + '/photo/download?filename=' + fileName} />\n    }\n\n    //그사람과의 관계에 따라 버튼이 달라짐\n    getButton = () => {\n        const { userID } = this.props.match.params\n        if (getUser().userID == userID) {\n            return null;\n        } else if (this.state.relationship === 1) {\n            //이미 친구인 상태\n            return (\n                <Popconfirm\n                    title=\"정말 친구 관계를 끊으시겠습니까?\"\n                    onConfirm={this.confirm}\n                    onCancel={this.cancel}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n\n                    <Button type=\"danger\" size=\"small\" ghost>친구끊기</Button>\n                </Popconfirm>\n            )\n        } else if (this.state.relationship === 2) {\n            //이미 친구요청 보낸  상태\n            return (\n                <Button size=\"small\" disabled>이미신청했음</Button>\n            )\n        } else if (this.state.relationship === 3) {\n            //이미 친구요청 받은 상태\n            return (\n                <Button size=\"small\" disabled>친구요청받음</Button>\n            )\n        } else {\n            return (\n                <Button type=\"primary\" size=\"small\" onClick={this.sendRequest} ghost>친구신청</Button>\n            )\n        }\n    }\n\n    //친구 요청을 보낼 떄\n    sendRequest = () => {\n        const { userID } = this.props.match.params\n        fetch(serverUrl + \"/friend/request/\"+getUser().userID+\"/\"+userID, {\n            method: 'POST',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success(\"친구 요청을 보냈습니다!\")\n                    this.setState({relationship : 2})\n                } else {\n                    //오류 처리\n                    console.log(\"error!\")\n                }\n            })\n    }\n\n    //친구 취소할 때\n    confirm = (e) => {\n        const { userID } = this.props.match.params;\n        const requesturl = serverUrl + '/friends/' + userID + '/' + getUser().userID;\n        fetch(requesturl, {\n            method: 'DELETE',\n            headers: {\n                'token': getToken()\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    message.success('더이상 친구관계가 아닙니다');\n                    this.setState({relationship : 4});\n                } else {\n                    console.log('친구 삭제')\n                    return [];\n                }\n            })\n\n    }\n\n    cancel = (e) => {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div id='box'>\n                    <span id='margin'>{this.getOnePhoto(this.state.user.profile, this.state.user.username)}</span>\n                    <span id='margin'><b>{this.state.user.username}</b> 의 소식 모아보기</span>\n                    <span id='margin'>{this.getButton()}</span>\n                </div>\n                <ArticleArray articles={this.state.articles} deleteArticle={this.deleteArticle} />\n            </div>\n        );\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}