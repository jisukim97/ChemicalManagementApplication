{"version":3,"sources":["History.js","authentication.js","setting.js","components/Login.js","components/Register.js","components/LoginAndRegister.js","components/Header.js","components/Buttons.js","components/Add.js","components/List.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","login","_ref","user","localStorage","setItem","JSON","stringify","getUser","getItem","parse","e","logout","removeItem","serverUrl","Login","handleSubmit","preventDefault","_this","props","form","validateFields","err","values","console","log","fetch","method","headers","Content-Type","body","then","response","result","status","json","message","success","name","push","error","getFieldDecorator","this","react_default","a","createElement","es_form","onSubmit","className","Item","rules","required","input","prefix","icon","type","style","color","placeholder","es_button","htmlType","react_router_dom","to","Component","Form","create","Register","registInformation","email","username","password","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","force","hasFeedback","validator","Password","onBlur","handleConfirmBlur","LoginAndRegister","id","margin","react_router","path","exact","component","excat","Header","state","logOut","toHome","userID","onClick","shape","Buttons","size","Search","Input","Option","Select","Add","visibleChemicalName","visiblePlaceSelect","chemicalName","place","placeList","chemicalNameForm","enterButton","onSearch","setState","getPlaceSuggest","es_select","defaultValue","width","onChange","handleChange","List","visible","data","columns","title","dataIndex","key","render","text","showModal","modal","onOk","handleOk","onCancel","handleCancel","date","year","monthValue","dayOfMonth","componentWillMount","table","dataSource","Footer","Layout","Content","Main","layout","src_components_Header","App","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb3b65c6.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()","export const login = ({ user }) => {\n    localStorage.setItem('USER', JSON.stringify(user))\n    //localStorage.setItem('token', token)\n}\n\nexport const getUser = () => {\n    const user = localStorage.getItem('USER')\n    try {\n        return JSON.parse(user)\n    } catch (e) {\n        return null\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('USER')\n    //localStorage.removeItem('token')\n}\n\nexport const getToken = () => {\n    try { \n        return localStorage.getItem('token')\n    } catch (e) {\n        //이거 토큰없으므로 처리 해 주기\n        return null\n    }\n}","export const serverUrl = 'http://13.124.122.246:8080'\n\n//'http://13.124.122.246:8080'","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nimport { history } from '../History';\nimport { login } from '../authentication';\nimport { serverUrl } from '../setting'\n\nclass Login extends Component {\n\n    //로그인 정보 입력 하고 로그인 버튼 눌렀을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //요청 양식은 이미 values에 동일하게 맞춰져 있는 상태이므로\n                //따로 가공해줄 필요 없이 바로 http 요청 을 보낸다\n                console.log(values)\n                fetch(serverUrl + '/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(values)\n                })\n                    .then(response => {\n                        const result = response.status;\n                        if (result === 200) {\n                            //로그인이 성공하였을 경우\n                            response.json().then(response => {\n                                //로컬스토리지에 토큰 및 로그인 정보 저장\n                                login(response)\n                                console.log(response)\n                                message.success(response.user.name + '님 환영합니다!');\n                                history.push(\"/main\")\n                            })\n                        } else if (result === 401) {\n                            //비밀번호 불일치 혹은 이메일이 등록되지 않았음\n                            message.error('로그인에 실패 하였습니다. 이메일 혹은 비밀번호를 다시 확인 해 주세요.');\n                            console.log(\"fail!\")\n                        } else {\n                            //내부 오류\n                        }\n                    })\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"form\">\n                {/* 이메일 폼*/}\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: '이메일을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호 폼*/}\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: '비밀번호를 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호 잃어버림, 로그인, 가입 버튼*/}\n                <Form.Item>\n                    {/*<Link to='/login/forgot' className=\"login-form-forgot\">Forgot password</Link>*/}\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                        Log in\n                    </Button>\n                    Or <Link to=\"/register\">register now!</Link>\n                </Form.Item>\n\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(Login);\n","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from \"react-router-dom\";\n\nimport { history } from '../History';\nimport { serverUrl } from '../setting'\n\nclass Register extends Component {\n\n    //회원가입 버튼 클릭했을 때\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //회원 가입 정보\n                const registInformation = {\n                    email : values.email,\n                    name : values.username,\n                    password : values.password,\n                }\n                //http요청\n                fetch(serverUrl + '/regist', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(registInformation)\n                }).then(response => {\n                    if (response.status === 200) {\n                        //가입이 성공적으로 수행 되었을 경우\n                        message.success('회원이 되신 것을 환영합니다!');\n                        history.push(\"/login\")\n                    } else if (response.status === 403) {\n                        //가입 실패했을 경우\n                        message.error('같은 이메일을 사용하는 사용자가 이미 존재합니다!');\n                    } else {\n                        //요청 오류 발생\n                    }\n                })\n            } else {\n                //비밀번호 틀렸을 경우 \n                message.error('두 비밀번호가 같은지 확인 해 주세요!');\n            }\n        });\n    };\n\n    //비밀번호 두개 일치하는지 확인\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('두 비밀번호가 일치하지 않습니다!');\n        } else {\n            callback();\n        }\n    };\n\n    //비밀번호 검증 과정인데 따로 규칙 지정 안했으므로 항상 true\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        form.validateFields(['confirm'], { force: true });\n        callback();\n    };\n\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"form\">\n\n                {/* 이메일 */}\n                <Form.Item>\n                    {getFieldDecorator('email', {\n                        rules: [{ required: true, message: '이메일 주소를 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Email Address\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 이름 */}\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: '이름을 입력 해 주세요!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n\n                {/* 비밀번호1 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Password\" />)}\n                </Form.Item>\n\n                {/* 비밀번호2 */}\n                <Form.Item hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: '비밀번호를 다시 한번 입력 해 주세요!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                        placeholder=\"Confirm password\"\n                        onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n\n                {/* 회원가입 버튼 */}\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"button\">\n                        Register Now!\n                    </Button>\n                    Or <Link to=\"/login\">login now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create()(Register);\n","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Login from './Login';\nimport Register from './Register';\nimport './LoginAndRegister.css';\n\nclass LoginAndRegister extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className='login' >\n                    <h1 id='loginHeadline'>SYLVY</h1>\n                    <div style={{ margin: '10px 0' }}>\n                        <Switch >\n                            <Route path='/login' exact component={Login} />\n                            <Route path='/register' excat component={Register} />\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LoginAndRegister;","import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { history } from '../History';\nimport { logout, getUser } from '../authentication';\n\nimport './Header.css';\nimport './Box.css';\n\nclass Header extends Component {\n\n    state = {\n        user: {}\n    }\n    //로그아웃\n    logOut = () => {\n        logout()\n        history.push('/login')\n    }\n\n\n    toHome = () => {\n        history.push('/home/' + getUser().userID)\n    }\n\n    render() {\n        return (\n            <div className='Header'>\n                {/* 로고 텍스트 ( 클릭하면 메인으로 이동) */}\n                <div className=\"left-box\">\n                    <b className='logo'><Link to='/main' id='color'>SYLVY</Link></b>\n                </div>\n\n                {/* 로그인 정보 + 프로필 변경 + 로그아웃 버튼 */}\n                <div className=\"right-box\">\n                    {/* 로그아웃 버튼 */}\n                    <span id='margin'><Button type=\"danger\" icon=\"poweroff\" onClick={this.logOut} shape=\"circle\" /></span>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'antd';\n\nimport './Box.css'\n\nclass Buttons extends Component {\n    render() {\n        return (\n            <div id=\"box\">\n                <div className='middle'> <Link to='/add' id='color'><Button type=\"primary\" size='large'>ADD</Button></Link> </div>\n                <div className='middle'> <Link to='/list' id='color'><Button type=\"primary\" size='large'>LIST</Button></Link> </div>\n            </div>\n        );\n    }\n}\n\nexport default Buttons;","import React, { Component } from 'react';\nimport { Input, Select, message } from 'antd';\nimport { serverUrl } from '../setting'\nimport { getUser } from '../authentication';\n\nimport { history } from '../History';\n\nimport './Box.css'\n\nconst { Search } = Input;\nconst { Option } = Select;\n\nclass Add extends Component {\n\n    state = {\n        visibleChemicalName: true,\n        visiblePlaceSelect: false,\n        chemicalName :\"\",\n        place:\"\",\n        placeList : []\n    }\n\n    chemicalNameForm = () => {\n        return (\n            <div>\n                <Search\n                    placeholder=\"약품 이름을 입력해주세요\"\n                    enterButton=\"검색\"\n                    size=\"large\"\n                    onSearch={value => {\n                        fetch(serverUrl + '/chemical/request', {\n                            method: 'GET',\n                            headers: { 'Content-Type': 'application/json' },\n                        })\n                            .then(response => {\n                                const result = response.status;\n                                if (result === 200) {\n                                    //성공하였을 경우 : 리스트에 저장\n                                    response.json().then(response => {\n                                        console.log(response)\n                                        this.setState({placeList : response})\n                                        this.setState({visiblePlaceSelect : true, chemicalName : value})\n                                    })\n                                } else {\n                                    //내부 오류\n                                }\n                            })                \n                        }\n                    }\n                />    \n            </div>\n        )\n    }\n\n    getPlaceSuggest = () => {\n        return (\n            <div>\n                <Select defaultValue=\"추천된 장소 중 선택해주세요\" style={{ width: 300 }} onChange={this.handleChange}>\n                    <Option value={this.state.placeList[0]}>{this.state.placeList[0]}</Option>\n                    <Option value={this.state.placeList[1]}>{this.state.placeList[1]}</Option>\n                    <Option value={this.state.placeList[2]}>{this.state.placeList[2]}</Option>\n                </Select>\n            </div>\n        )\n    }\n\n    handleChange = (value) => {\n        console.log(value)\n        console.log(getUser().id)\n        \n        fetch(serverUrl + '/chemical/add/' + getUser().id, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body : JSON.stringify({name : this.state.chemicalName, place : value})\n        })\n            .then(response => {\n                const result = response.status;\n                if (result === 200) {\n                    //성공하였을 경우 \n                    message.success('성공적으로 추가되었습니다');\n                    history.push('/main')\n                } else {\n                    //내부 오류\n                }\n            })                \n        }\n\n\n    render() {\n        return (\n            <div id='box'>\n                <div className='middle'> {this.state.visibleChemicalName && this.chemicalNameForm()} </div>\n                <div className='middle'> {this.state.visiblePlaceSelect && this.getPlaceSuggest()} </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default Add;","import React, { Component } from 'react';\nimport { Table, Modal } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { serverUrl } from '../setting'\n\nimport { getUser } from '../authentication';\n\nimport './Box.css'\n\nclass List extends Component {\n\n\n    state = { visible: false };\n\n    state = {\n        \n        data : []\n    }\n\n    columns = [\n        {\n            title: '이름',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => (\n                <a>\n                    <Link to='#' onClick={this.showModal}>\n                        {text}\n                    </Link>\n                    <Modal\n                        title=\"MSDS\"\n                        visible={this.state.visible}\n                        onOk={this.handleOk}\n                        onCancel={this.handleCancel}\n                    >\n                        <p>\n                            <h3>위험</h3>\n                            H290 : 금속을 부식시킬 수 있음<br/>\n                            H314 : 피부에 심한 화상과 눈 손상을 일으킴<br/>\n                            H318 : 눈에 심한 손상을 일으킴<br/>\n                            H330 : 흡입하면 치명적임<br/>\n                            H350 : 암을 일으킬 수 있음<br/>\n                        </p>\n                        <p>\n                            <h3>주의</h3>\n                            P201 : 사용 전 취급 설명서를 확보하시오.<br/>\n                            P202 : 모든 안전 예방조치 문구를 읽고 이해하기 전에는 취급하지 마시오.<br/>\n                            P234 : 원래의 용기에만 보관하시오.<br/>\n                            P260 : (분진·흄·가스·미스트·증기·스프레이)를(을) 흡입하지 마시오.<br/>\n                        </p>\n                        <p>등등..</p>\n                    </Modal>\n                </a>),\n        },\n        {\n          title: '보관장소',\n          dataIndex: 'place',\n          key: 'place',\n        },\n        {\n          title: '생성일',\n          dataIndex: 'putDate',\n          key: 'putDate',\n          render : date => date.year + '/' + date.monthValue + '/' + date.dayOfMonth\n        }\n    ]\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    handleOk = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleCancel = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    componentWillMount = () => {\n        fetch(serverUrl + '/chemical/list/' + getUser().id, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(response => {\n                const result = response.status;\n                if (result === 200) {\n                    //성공하였을 경우 \n                    console.log(response)\n                    response.json().then(response => {\n                        console.log(response);\n                        this.setState({data : response})\n                    })\n                } else {\n                    //내부 오류\n                }\n            })\n    }\n\n    render() {\n        return (\n            <div id='box'>\n                <Table columns={this.columns} dataSource={this.state.data} />\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Header from './Header';\nimport Buttons from './Buttons';\nimport Add from './Add';\nimport List from './List';\n\nimport './Main.css';\n\nconst { Footer, Content } = Layout;\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <div>\n                <Layout>\n                    <Header/>\n                    <Content >\n                        <div className='MarginTop'>\n                        <Switch>\n                            <Route path='/main' exact component={Buttons} />\n                            <Route path='/add' exact component={Add} />\n                            <Route path='/list' exact component={List} />\n                        </Switch>\n                        </div>\n                    </Content>\n                    <Footer>\n                        <div className='footer'>\n                            Copyright 2019. Team 3 All rights reserved.\n                        </div>\n                    </Footer>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, {Component} from 'react';\nimport {history} from './History';\nimport { Router, Route, Switch } from \"react-router-dom\";\n\nimport LoginAndRegister from './components/LoginAndRegister';\nimport Main from './components/Main';\n\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router history={history}>\n          <Switch>\n            <Route path='/login' exact component={LoginAndRegister} /> \n            <Route path='/register' exact component={LoginAndRegister} />\n            <Route path='/main' exact component={Main}/>\n            <Route path='/add' exact component={Main}/>\n            <Route path='/list' exact component={Main}/>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}